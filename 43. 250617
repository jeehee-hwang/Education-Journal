JPA -CRUD 어렵다 
자바의 CRUD 또한 매우 어려웠는데 쿼리문을 작성하지 않아 좋으나 과정을 잘 모르겠다. 

 * JDBC API를 이용해 직접 SQL을 다룰 때 발생할 수 있는 문제점
    1. 데이터 변환, SQL 작성, JDBC API 코드 등을 중복 작성 (= 개발시간 증가, 유지보수성 악화)
    2. SQL 의존적인 개발
      - 조회 항목 변경에 따른 의존성
    3. 패러다임 불일치 문제 (상속, 연관관계, 객체 그래프 탐색)
       3-1. 상속 문제 */
        * 객체 지향 언어의 상속 개념과 유사한 것이 데이터베이스의 서브타입엔티티 이다.
        * 유사한 것 같지만 다른 부분은 데이터베이스의 상속은 상속 개념을 데이터로 추상화해서 슈퍼타입과 서브타입으로 구분하고,
        * 슈퍼타입의 모든 속성을 서브타입이 공유하지 못하여 물리적으로 다른 테이블로 분리가 된 형태이다.
        * (설계에 따라서는 속성으로 추가되기도 한다.)
        * 하지만 객체지향의 상속은 슈퍼타입의 속성을 공유해서 사용하므로 여기서 패러다임 불일치 현상이 발생한다.
        * 법인 회원과 일반 회원이라는 두 가지 회원을 추상화하여 회원이라는 슈퍼타입 엔터티를 도출하고
        * 서브타입 엔터티로 법인회원과 일반회원이 존재하는 상황인 경우
        * 물리적으로 회원과 법인회원 테이블로 분리된 상황에서는 각각 insert 구문을 수행해야 한다.
        * INSERT INTO 회원 ...
        * INSERT INTO 법인회원 ...
        * 하지만 JPA를 이용하여 상속을 구현한 경우에는
        * entityManager.persist(법인회원);
        * 이렇게 한 번에 해결이 가능하다.
      3-2. 연관관계 문제, 객체 그래프 탐색 문제 */
        * < 데이터베이스 테이블에 맞춘 객체 모델 >
        * 객체지향에서 말하는 가지고 있는(association 연관관계, 혹은 collection 연관관계) 경우 데이터베이스 저장 구조와 다른 형태이다.
     4. 동일성 보장 문제


✅ JPA - CRUD가 왜 필요한가?
1. 객체와 관계형 데이터베이스의 불일치 해소 (Object-Relational Impedance Mismatch)
Java는 객체(Object) 지향 언어이고, 데이터베이스는 테이블 기반(Relational)입니다.

이 두 구조는 다르기 때문에, 데이터를 주고받기 위해 복잡한 매핑 코드가 필요합니다.

JPA는 이런 매핑을 자동으로 처리해 줌으로써 개발자가 비즈니스 로직에 집중할 수 있게 해줍니다.

✅ JPA를 사용하는 이유 (장점)
1. 생산성 향상
- SQL 문을 직접 작성하지 않아도 됩니다.
- save(), findById(), delete() 등 CRUD 메서드만 호출하면 됩니다.

2. 가독성과 유지보수성
- 비즈니스 로직 코드가 간결해지고, 데이터베이스 변경 시 코드 수정이 최소화됩니다.

3. 데이터 변경 추적 (변경 감지 - Dirty Checking)
- 객체만 수정하면, 트랜잭션 커밋 시 자동으로 UPDATE 쿼리가 발생합니다.
- 수동으로 SQL을 작성할 필요 없음.

4. 캐싱 및 성능 최적화
- 1차 캐시(영속성 컨텍스트)를 사용해 동일 객체 중복 조회를 방지함.
- 성능을 자동으로 최적화할 수 있는 기회 제공.


- JPA CRUD는 객체 지향 개발자가 복잡한 SQL 없이도 안정적이고 효율적으로 데이터베이스와 상호작용할 수 있도록 도와줍니다.
즉, 생산성, 유지보수, 코드 일관성을 높이는 핵심 기술입니다.


