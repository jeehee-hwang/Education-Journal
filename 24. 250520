mysql, 모델링 

수업진도 깃허브 09_SET_OPERATORS.sql - 16_VIEW.sql

모델링
엔터티 - 업무의 관심 대상이 되는 정보를 갖고 있거나 그에 대한 정보를 알아야 하는 유, 무형의 사물(개체)를 의미
1-2-1. 엔터티와 속성 도출
  정해진 공식은 없지만 일련의 과정들을 거쳐 엔터티 기술서를 작성하게 된다.
  1. 엔터티 후보 풀과 엔터티 리스트를 그린다.
  2. 분석 대상 문서를 보고 명사를 찾아 표시한다.
  3. 명사 하나하나에 대해 속성인지 엔터티인지를 구분한다.
  4. 중복된 명사나 유사한 의미의 명사는 하나로 정리한다.
  5. 엔터티 후보 풀에 있는 명사들을 검토한다.
  6. 도출된 엔터티에 대하여 구축될 시스템에서 데이터를 관리할 필요가 있는지를 판단한다.
1-2-2. 엔터티 도출 원칙
  업무의 관심 대상이 되는 사물이어야 된다.
  두 개 이상의 인스턴스를 소유해야 한다.
  데이터의 정체성이 분명해야 한다.
  데이터 종속성에 의해서 하나의 주제만을 관리하는 정의가 명확한 모델
  엔터티의 인스턴스를 식별할 수 있는 식별자(Identifier)가 존재해야 한다.
  동일한 성격의 데이터는 유일해야 한다.
  엔터티 명은 관리하고자 하는 데이터의 성격(주제)을 가장 잘 표현하는 이름으로 한다.
2. 관계(Relationship)
  2-1. 관계란
  두 개 이상의 엔터티 간에 존재하는 연관성을 나타낸다.
  하위(자식) 엔터티의 속성으로 관리될 때만 관계를 표현한다.
  관계에는 종속관계와 참조 관계가 있다.
  종속관계: 부모 엔터티와 자식 엔터티 간의 관계로 부모 엔터티가 존재해야 자식 엔터티가 존
  재할 수 있다. 반대로 말하면 부모 엔터티 없이 관계를 삭제하고 자식 엔터티만 존재할 수 없
  다.
  참조관계: 엔터티간에 연관성이 존재하긴 하지만 다른 엔터티가 없다고 존재할 수 없는 관계
  는 아니다. 단순히 참조 데이터를 관리하므로 관계를 삭제해도 한 속성에 대한 연관성만 문제
  가 되고 하위 엔티티 존재해는 지장이 없다
2-2. 관계의 구성요소
  2-2-1. 카디널리티(Cardinality)
  카티널리티는 릴레이션에서 튜플의 개수이자 상위(부모) 엔터티의 인스턴스 하나가 하위(자식)엔터
  티의 인스턴스 몇 개와 관련이 있는지 혹은 그 반대를 나타내는 것이다.
  카디널리티를 통해 관계가 있는 두 엔터티는 일대일(1:1), 일대다(1:M), 다대다(M:M) 관계를 나타낸
  다.
  다대다(M:M) 관계이면 교차 엔터티(Association Entity)를 통해 다대다 관계를 일대다(1:M) 관계로
  해소해 주어야 한다.
  2-2-2. 옵셔널리티(Optionality)
  상위(부모) 엔터티와 하위(자식)엔터티가 서로 연관되는 값이 반드시 존재해야 하는지 존재하지 않
  아도 되는지를 의미한다.
  서로 연관되는 값이 반드시 존재하면(최소 1개 이상) Mandatory이다.
  서로 연관되는 값이 반드시 존재하지 않아도 된다면(최소 0개 이상) Optional이다.
  2-2-3. 관계 디그리(Relationship Degree)
  하나의 관계에 포함된 엔터티의 개수를 뜻한다.
  하나의 관계는 하나의 엔터티나 두개의 엔터티 뿐 아니라 3개 이상의 엔터티에서도 발생한다.
  1개체 관계(Unary Relationship): 한 개의 엔터티가 연관된 관계(재귀 관계(Recursive
  Relationships))
  2개체 관계(Binary Relationships): 두 개의 엔터티가 연관된 관계
  3개체 관계(Ternary Relationships): 세 개의 엔터티가 연관된 관계
  N개체 관계(N-ary Relationships): N개의 엔터티가 연관된 관계




MySQL 
/* SET_OPERATORS */
/* SET 연산자는 두 개 이상의 SELECT문의 결과 집합을 결합하는데 사용한다.
   SET 연산자를 통해 결합하는 결과 집합의 컬럼이 동일해야 한다. */
   
/* UNION */
-- 두 개 이상의 SELECT 문의 결과를 결합하여 중복된 레코드를 제거한 후 반환하는 연산자
SELECT
        MENU_CODE
      , MENU_NAME
      , MENU_PRICE
      , CATEGORY_CODE
      , ORDERABLE_STATUS
   FROM TBL_MENU
  WHERE CATEGORY_CODE = 10
  UNION
 SELECT  
        MENU_CODE
      , MENU_NAME
      , MENU_PRICE
      , CATEGORY_CODE
      , ORDERABLE_STATUS
   FROM TBL_MENU
  WHERE MENU_PRICE < 9000; 

/* UNION ALL */
-- 두 개 이상의 SELECT문의 결과를 결합하여 중복된 레코드를 제거하지 않고 모두 반환
SELECT
        MENU_CODE
      , MENU_NAME
      , MENU_PRICE
      , CATEGORY_CODE
      , ORDERABLE_STATUS
   FROM TBL_MENU
  WHERE CATEGORY_CODE = 10
  UNION ALL
 SELECT  
        MENU_CODE
      , MENU_NAME
      , MENU_PRICE
      , CATEGORY_CODE
      , ORDERABLE_STATUS
   FROM TBL_MENU
  WHERE MENU_PRICE < 9000; 
  
/* INTERSECT */  
-- 두 개 SELECT문의 결과 중 공통되는 레코드만을 반환하는 연산자이다.
-- MYSQL INTERSECT를 제공하지 않는다.
-- 하지만 INNER JOIN또는 IN연산자 활용해서 구현하는 것은 가능하다.

/* DML(Data Manipulation Language) */
-- 데이터 조작 언어, 테이블의 값을 삽입하거나, 수정하거나, 삭제하는 언어

/* INSERT */
-- 새로운 행을 추가하는 구문이다.
-- 테이블의 행 수가 증가된다.
INSERT INTO TBL_MENU VALUES (null, '바나나해장국', 8500, 4, 'y');

-- null 허용 가능한(nullable)컬럼이나, auto_increment가 있는 컬럼을 제외하고
-- insert 하고 싶은 데이터 컬럼을 지정해서 insert가 가능하다.
INSERT INTO TBL_MENU(MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS)
VALUES ('초콜릿죽', 6500, 7, 'Y');

INSERT INTO TBL_MENU(ORDERABLE_STATUS, MENU_NAME, MENU_PRICE, CATEGORY_CODE)
VALUES ('Y', '파인애플탕', 5500, 4);

SELECT * FROM TBL_MENU;

INSERT INTO TBL_MENU VALUES 
(NULL, '참치맛아이스크림', 1700, 12, 'Y'),
(NULL, '멸치맛아이스크림', 1500, 11, 'Y'),
(NULL, '소시지맛아이스크림', 1700, 12, 'Y');

/* UPDATE */
-- 테이블에 기록된 컬럼의 값을 수정하는 구문이다.
-- 테이블의 전체 행 갯수는 변화가 없다.
SELECT
       MENU_CODE
     , CATEGORY_CODE
  FROM TBL_MENU
 WHERE MENU_NAME = '파인애플탕'; 
 
UPDATE TBL_MENU
   SET CATEGORY_CODE = 7
 WHERE MENU_CODE = 24;
 
/* DELETE */ 
-- 테이블의 행을 삭제하는 구문이다.
-- 테이블의 행의 갯수가 줄어든다.
SELECT
       MENU_PRICE
  FROM TBL_MENU
  ORDER BY MENU_PRICE;
  
-- LIMIT을 활용한 행 삭제
DELETE FROM TBL_MENU
 ORDER BY MENU_PRICE
 LIMIT 2;
 
-- WHERE절을 활용한 단일 행 삭제
DELETE FROM TBL_MENU
 WHERE MENU_CODE = 24; 
 
SELECT * FROM TBL_MENU;

-- 해당 테이블 전체 행 삭제
DELETE FROM TBL_MENU;

/* REPLACE */
-- INSERT 시 PRIMARY KEY 또는 UNIQUE KEY가 충돌이 발생할 수 있다면
-- REPLACE를 통해 중복된 데이터를 덮어 쓸 수 있다.
-- INSERT INTO TBL_MENU VALUES(17, '참기름소주', 5000, 10, 'Y');
REPLACE INTO TBL_MENU VALUES(17, '참기름소주', 5000, 10, 'Y');

-- INTO 생략이 가능하다.
REPLACE TBL_MENU VALUES(17, '참기름소주', 5000, 10, 'Y');

/* TRANSACTION */
-- MYSQL 기본적으로 COMMIT이 자동으로 되므로 수동으로 조절하고 싶으면 AUTO COMMIT 설정을 바꿔 주어야 한다.

-- AUTO COMMIT 활성화
SET AUTOCOMMIT = 1;
SET AUTOCOMMIT = ON;

-- AUTO COMMIT 비활성화
SET AUTOCOMMIT = 0;
SET AUTOCOMMIT = OFF;

-- START TRANSACTION 구문을 작성하고 DML 작업 수행후 COMMIT 또는 ROLLBACK을 하면 된다.
START TRANSACTION;

SELECT * FROM TBL_MENU;

INSERT INTO TBL_MENU VALUES(NULL, '바나나해장국', 8500, 4, 'Y');
UPDATE TBL_MENU SET MENU_NAME = '수정된 메뉴' WHERE MENU_CODE = 5;
DELETE FROM TBL_MENU WHERE MENU_CODE = 7;

ROLLBACK;

COMMIT;

/* DDL(Data Definition Language)*/
-- 데이터베이스의 스키마를 정의하거나 수정하는데 사용되는 SQL의 한 부분이다.

/* CREATE */
-- 테이블 생성을 위한 구문
-- IF NOT EXISTS 를 적용하면 기존에 존재하는 테이블이라도 에러가 발생하지 않는다.

-- tb1 생성
create table if not exists tb1(
	pk int primary key,
    fk int,
    col1 varchar(255),
    check(col1 in('y', 'n'))
)engine=innodb;

-- 테이블 구조 확인
describe tb1;

insert into tb1 values(1, 10, 'y');

select * from tb1;

/* AUTO INCREMENT */
-- INSERT 시 PRIMARY KEY키에 해당하는 컬럼에 자동으로 번호를 발생(중복되지 않게)시켜 저장할 수 있다.
create table if not exists tb2(
	pk int auto_increment primary key,
    fk int,
    col1 varchar(255),
    check(col1 in('y', 'n'))
)engine=innodb;

describe tb2;

insert into tb2 values(null, 10, 'y');
insert into tb2 values(null, 20, 'y');

select * from tb2;

/* ALTER */
-- 테이블에 추가/변경/수정/삭제하는 모든 것은 ALTER 명령어를 사용해 적용한다.

-- 열 추가
alter table tb2
add col2 int not null;

describe tb2;

-- 열 삭제
alter table tb2
drop column col2;

-- 열 이름 및 데이터 형식 변경
alter table tb2
change column fk change_fk int not null;

-- 열 제약 조건 추가 및 삭제
-- tb2 테이블의 primary key 제약조건 삭제
alter table tb2
drop primary key;

-- modify로 컬럼의 정의를 바꾸기
alter table tb2
modify pk int;

-- 다시 pk 제약조건 추가
alter table tb2
add primary key(pk);

describe tb2;

/* DROP */
-- 테이블을 삭제하기 위한 구문
-- if exists 적용하면 존재하지 않는 테이블 삭제 구문이라도 에러가 발생하지 않는다.

create table if not exists tb3(
	pk int auto_increment primary key,
    fk int,
    col1 varchar(255)
)engine=innodb;

drop table if exists tb3;
drop table if exists tb1, tb2;

/* TRUNCATE */
-- 논리적으로는 WHERE절이 없는 DELETE구문과 큰 차이가 없어 보인다.
-- 하지만 어차피 데이터를 다 삭제할 경우 행마다 하나씩 지워지는 DELETE보다
-- DROP 이후 바로 테이블을 재생성 해주는 TRUNCATE가 훨씬 효율적으로 한번에 테이블을 초기화 시켜준다.
-- 또한 AUTO_INCREMENT 컬럼이 있는 경우 시작 값을 0으로 초기화가 된다.

create table if not exists tb4(
	pk int auto_increment primary key,
    fk int,
    col1 varchar(255),
    check(col1 in ('y', 'n'))
)engine=innodb;

describe tb4;

insert into tb4 values(null, 10, 'y');
insert into tb4 values(null, 20, 'y');
insert into tb4 values(null, 30, 'y');
insert into tb4 values(null, 40, 'y');

select * from tb4;

-- 테이블 초기화 하기
truncate tb4;
truncate table tb4;

/* CONSTRAINTS */

-- 제약조건
-- 테이블 작성 시 각 컬럼에 값 기록에 대한 제약조건을 설정할 수 있다.
-- 데이터 무결성 보장을 목적으로 함
-- 입력/수정하는 데이터에 문제가 없는지 자동으로 검사해 주게 하기 위한 목적
-- PRIMARY KEY, NOT NULL, UNIQUE, CHECK, FOREIGN KEY

-- NOT NULL
-- NULL값 허용하지 않음
drop table if exists user_notnull;
create table if not exists user_notnull (
	user_no int not null,
    user_id varchar(255) not null,
    user_pwd varchar(255) not null,
    user_name varchar(255) not null,
    gender varchar(3),
    phone varchar(255) not null,
    email varchar(255)
)engine=innodb;

describe user_notnull;

insert into user_notnull(user_no, user_id, user_pwd, user_name, gender, phone, email)
values
(1, 'user01', 'pass01', '홍길동', '남', '010-1234-5678', 'hong@gmail.com'),
(2, 'user02', 'pass02', '유관순', '여', '010-777-7777', 'you@gmail.com');

select * from user_notnull;

-- not null 제약조건 에러 발생(null 값 적용)
insert into user_notnull(user_no, user_id, user_pwd, user_name, gender, phone, email)
values
(3, 'user03', null, '이순신', '남', '010-1234-5678', 'lee@gmail.com');

/* UNIQUE */
-- 중복 값을 허용하지 않음 
drop table if exists user_unique;
create table if not exists user_unique(
	user_no int not null unique,
    user_id varchar(255) not null,
    user_pwd varchar(255) not null,
    user_name varchar(255) not null,
    gender varchar(3),
    phone varchar(255) not null,
    email varchar(255),
    unique(phone)
)engine=innodb;

insert into user_unique(user_no, user_id, user_pwd, user_name, gender, phone, email)
values
(1, 'user01', 'pass01', '홍길동', '남', '010-1234-5678', 'hong@gmail.com'),
(2, 'user02', 'pass02', '유관순', '여', '010-777-7777', 'you@gmail.com');

select * from user_unique;

-- unique 제약조건 에러 발생(전화번호 중복값 적용)
insert into user_unique(user_no, user_id, user_pwd, user_name, gender, phone, email)
values
(3, 'user03', 'pass03', '이순신', '남', '010-777-7777', 'lee@gmail.com');

/* PRIMARY KEY */
-- 테이블에서 한 행의 정보를 찾기 위해 사용할 컬럼을 의미한다.
-- 테이블에 대한 식별자 역할을 한다.(한 행씩 구분하는 역할을 말한다.)
-- NOT NULL + UNIQUE 제약조건의 의미
-- 한 테이블당 한 개만 설정할 수 있음
-- 컬럼 레벨, 테이블 레벨 둘 다 설정 가능함
-- 한 개의 컬럼에 설정할 수도 있고, 여러 개의 컬럼을 묶어서 설정할 수도 있음(복합키)
drop table if exists user_primarykey;
create table if not exists user_primarykey(
	user_no int,
    user_id varchar(255) not null,
    user_pwd varchar(255) not null,
    user_name varchar(255) not null,
    gender varchar(3),
    phone varchar(255) not null,
    email varchar(255),
    primary key(user_no)
)engine=innodb;

insert into user_primarykey(user_no, user_id, user_pwd, user_name, gender, phone, email)
values
(1, 'user01', 'pass01', '홍길동', '남', '010-1234-5678', 'hong@gmail.com'),
(2, 'user02', 'pass02', '유관순', '여', '010-777-7777', 'you@gmail.com');

select * from user_primarykey;

-- primary key 제약조건 에러 발생(null값 적용)
insert into user_primarykey(user_no, user_id, user_pwd, user_name, gender, phone, email)
values
(null, 'user03', 'pass03', '이순신', '남', '010-777-7777', 'lee@gmail.com');

-- primary key 제약조건 에러 발생(중복값 적용)
insert into user_primarykey(user_no, user_id, user_pwd, user_name, gender, phone, email)
values
(2, 'user03', 'pass03', '이순신', '남', '010-777-7777', 'lee@gmail.com');

/* FOREIGN KEY */
-- 참조(references)된 다른 테이블에서 제공하는 값만 사용할 수 있음
-- 참조 무결성을 위배하지 않기 위해 사용
-- foreign key 제약조건에 의해서
-- 테이블 간의 관계(relationship)가 형성됨
-- 제공되는 값 외에는 null을 사용할 수 있음
drop table if exists user_grade;
create table if not exists user_grade(
	grade_code int not null unique,
    grade_name varchar(255) not null
)engine=innodb;

describe user_grade;

insert into user_grade
values
(10, '일반회원'),
(20, '우수회원'),
(30, '특별회원');

select * from user_grade;

drop table if exists user_foreignkey1;
create table if not exists user_foreignkey1(
	user_no int primary key,
    user_id varchar(255) not null,
    user_pwd varchar(255) not null,
    user_name varchar(255) not null,
    gender varchar(3),
    phone varchar(255) not null,
    email varchar(255),
    grade_code int,
    foreign key(grade_code)
    references user_grade(grade_code)
)engine=innodb;

describe user_foreignkey1;

insert into user_foreignkey1(user_no, user_id, user_pwd, user_name, gender, phone, email, grade_code)
values
(1, 'user01', 'pass01', '홍길동', '남', '010-1234-5678', 'hong@gmail.com', 10),
(2, 'user02', 'pass02', '유관순', '여', '010-777-7777', 'you@gmail.com', 20);

select * from user_foreignkey1;

-- foreignkey 제약조건 에러 발생(참조컬럼에 없는 값 적용)
insert into user_foreignkey1(user_no, user_id, user_pwd, user_name, gender, phone, email, grade_code)
values
(3, 'user03', 'pass03', '이순신', '남', '010-1234-5678', 'lee@gmail.com', 50);

-- ON UPDATE SET NULL, ON DELETE SET NULL
drop table if exists user_foreignkey2;
create table if not exists user_foreignkey2(
	user_no int primary key,
    user_id varchar(255) not null,
    user_pwd varchar(255) not null,
    user_name varchar(255) not null,
    gender varchar(3),
    phone varchar(255) not null,
    email varchar(255),
    grade_code int,
    foreign key(grade_code)
    references user_grade(grade_code)
    on update set null
    on delete set null
)engine=innodb;


insert into user_foreignkey2(user_no, user_id, user_pwd, user_name, gender, phone, email, grade_code)
values
(1, 'user01', 'pass01', '홍길동', '남', '010-1234-5678', 'hong@gmail.com', 10),
(2, 'user02', 'pass02', '유관순', '여', '010-777-7777', 'you@gmail.com', 20);

select * from user_foreignkey2;

-- 1) 부모 테이블의 grade_code 수정
drop table if exists user_foreignkey1;
update user_grade
   set grade_code = 1
 where grade_code = 10;
 
-- 2) 부모 테이블의 행 삭제
delete from user_grade
 where grade_code = 20;
 
/* CHECK */
drop table if exists user_check;
create table if not exists user_check (
	user_no int auto_increment primary key,
    user_name varchar(255) not null,
    gender varchar(3) check(gender in('남', '여')),
    age int check(age >= 19)
)engine=innodb;

insert into user_check
values
(null, '홍길동', '남', 25),
(null, '이순신', '남', 33);

select * from user_check;

-- gender 컬럼 check 제약 조건 에러 발생
insert into user_check
values
(null, '안중근', '남성', 33);

-- age 컬럼 check 제약 조건 에러 발생
insert into user_check
values
(null, '유관순', '여', 17);

/* DEFAULT */
-- 컬럼에 NULL 대신 기본 값 적용
drop table if exists tbl_country;
create table if not exists tbl_country (
	country_code int auto_increment primary key,
    country_name varchar(255) default '한국',
    population varchar(255) default '0명'
)engine=innodb;

select * from tbl_country;

insert into tbl_country
values (null, default, default);

/* CAST FUNCTION */

/* 명시적 형변환 */
-- CAST(expression AS 데이터형식 [(길이)]
-- CONVERT(expression AS 데이터형식 [(길이)]
-- 데이터 형식으로 가능한 것은 BINARY, CHAR, DATE, DATETIME, DECIMAL, JSON, SIGNED INTEGER, TIME, UNSIGNED INTEGER 등이 있다.

select avg(menu_price) from tbl_menu;
select cast(avg(menu_price) as signed integer) as '평균 메뉴 가격' from tbl_menu;
select convert(avg(menu_price), signed integer) as '평균 메뉴 가격' from tbl_menu;

select cast('2025$5$20' as date);
select cast('2025/5/20' as date);
select cast('2025%5%20' as date);
select cast('2025@5@20' as date);

select concat(cast(menu_price as char(5)), '원') from tbl_menu;

-- 카테고리별 메뉴 가격 합계 구하기
select
       category_code,
       concat(cast(sum(menu_price) as char(10)), '원')
  from tbl_menu
  group by category_code;
  
-- 암시적 형변환
select '1' + '2'; -- 각 문자가 정수로 변환됨
select concat(menu_price, '원') from tbl_menu;
select '2025-05-20';

/* BUILD IN FUNCTIONS */

/* 문자열 관련 함수 */

-- ASCII(아스키 코드), CHAR(숫자)
-- ASCII: 아스키 코드 값 추출
-- CHAR: 아스키 코드로 문자 추출
SELECT ASCII('A'), CHAR(65);
-- (Workbench의 버그로 CHAR(65)의 결과가 'BLOB'으로 보일 수 있는데 일반 명령형 모드에서는 정상적으로 'A'로 출력된다.
-- 'BLOB' 글자에서 마우스 오른쪽 버튼 클릭하고 'Open Value in Viewer' 선택 후 Text 탭에서 확인할 수 있다.)

-- BIT_LENGTH(문자열), CHAR_LENGTH(문자열), LENGTH(문자열)
-- BIT_LENGTH: 할당된 비트 크기 반환
-- CHAR_LENGTH: 문자열의 길이 반환
-- LENGTH: 할당된 BYTE 크기 반환
SELECT BIT_LENGTH('pie'), CHAR_LENGTH('pie'), LENGTH('pie');
SELECT menu_name, BIT_LENGTH(menu_name), CHAR_LENGTH(menu_name), LENGTH(menu_name) from tbl_menu;

-- CONCAT(문자열1, 문자열2, ...), CONCAT_WS(구분자, 문자열1, 문자열2, ...)
-- CONCAT: 문자열을 이어붙임
-- CONCAT_WS: 구분자와 함께 문자열을 이어붙임
SELECT CONCAT('호랑이', '기린', '토끼');
SELECT CONCAT_WS(',', '호랑이', '기린', '토끼');
SELECT CONCAT_WS('-', '2023', '05', '31');

-- ELT(위치, 문자열1, 문자열2, ...), FIELD(찾을 문자열, 문자열1, 문자열2, ...),
-- FIND_IN_SET(찾을 문자열, 문자열 리스트), INSTR(기준 문자열, 부분 문자열),
-- LOCATE(부분 문자열, 기준 문자열)
-- ELT: 해당 위치의 문자열 반환
-- FIELD: 찾을 문자열 위치 반환
-- FIND_IN_SET: 찾을 문자열의 위치 반환
-- INSTR: 기준 문자열에서 부분 문자열의 시작 위치 반환
-- LOCATE: INSTR과 동일하고 순서는 반대
SELECT 
    ELT(2, '사과', '딸기', '바나나'), FIELD('딸기', '사과', '딸기', '바나나'), 
    FIND_IN_SET('바나나', '사과,딸기,바나나'), INSTR('사과딸기바나나', '딸기'), LOCATE('딸기', '사과딸기바나나');

-- FORMAT(숫자, 소수점 자릿수)
-- FORMAT: 1000단위마다 콤마(,) 표시를 해 주며 소수점 아래 자릿수(반올림)까지 표현한다.
SELECT FORMAT(123142512521.5635326, 3);

-- BIN(숫자), OCT(숫자), HEX(숫자)
-- BIN: 2진수 표현
-- OCT: 8진수 표현
-- HEX: 16진수 표현
SELECT BIN(65), OCT(65), HEX(65);

-- INSERT(기준 문자열, 위치, 길이, 삽입할 문자열)
-- INSERT: 기준 문자열의 위치부터 길이만큼을 지우고 삽입할 문자열을 끼워 넣는다.
SELECT INSERT('내 이름은 아무개입니다.', 7, 3, '홍길동');

-- LEFT(문자열, 길이), RIGHT(문자열, 길이)
-- LEFT: 왼쪽에서 문자열의 길이만큼을 반환
-- RIGHT: 오른쪽에서 문자열의 길이만큼을 반환
SELECT LEFT('Hello World!', 3), RIGHT('Hello World!', 3);

-- UPPER(문자열), LOWER(문자열)
-- UPPER: 소문자를 대문자로 변경
-- LOWER: 대문자를 소문자로 변경
SELECT LOWER('Hello World!'), UPPER('Hello World!');

-- LPAD(문자열, 길이, 채울 문자열), RPAD(문자열, 길이, 채울 문자열)
-- LPAD: 문자열을 길이만큼 왼쪽으로 늘린 후에 빈 곳을 문자열로 채운다.
-- RPAD: 문자열을 길이만큼 오른쪽으로 늘린 후에 빈 곳을 문자열로 채운다.
SELECT LPAD('왼쪽', 6, '@'), RPAD('오른쪽', 6 ,'@');

-- LTRIM(문자열), RTRIM(문자열)
-- LTRIM: 왼쪽 공백 제거
-- RTRIM: 오른쪽 공백 제거
SELECT LTRIM('    왼쪽'), RTRIM('오른쪽    ');

-- TRIM(문자열), TRIM(방향 자를_문자열 FROM 문자열)
-- TRIM은 기본적으로 앞뒤 공백을 제거하지만
-- 방향(LEADING(앞), BOTH(양쪽), TRAILING(뒤))이 있으면
-- 해당 방향에 지정한 문자열을 제거할 수 있다.
SELECT TRIM('    MySQL    '), TRIM(BOTH '@' FROM '@@@@MySQL@@@@');

-- REPEAT(문자열, 횟수)
-- REPEAT: 문자열을 횟수만큼 반복
SELECT REPEAT('재밌어', 3);

-- REPLACE(문자열, 찾을 문자열, 바꿀 문자열)
-- REPLACE: 문자열에서 문자열을 찾아 치환
SELECT REPLACE('마이SQL', '마이', 'My');

-- REVERSE(문자열)
-- REVERSE: 문자열의 순서를 거꾸로 뒤집음
SELECT REVERSE('stressed');

-- SPACE(길이)
-- SPACE: 길이 만큼의 공백을 반환
SELECT CONCAT('제 이름은', SPACE(5), '이고 나이는', SPACE(3), '세입니다.');

-- SUBSTRING(문자열, 시작위치, 길이)
-- SUBSTRING: 시작 위치부터 길이만큼의 문자를 반환(길이를 생략하면 시작 위치부터 끝까지 반환)
SELECT SUBSTRING('안녕하세요 반갑습니다.', 7, 2), SUBSTRING('안녕하세요 반갑습니다.', 7);

-- SUBSTRING_INDEX(문자열, 구분자, 횟수)
-- SUBSTRING_INDEX: 구분자가 왼쪽부터 횟수 번쨰 나오면 그 이후의 오른쪽은 버린다.
-- 횟수가 음수일 경우 오른쪽부터 세고 왼쪽을 버린다.
SELECT SUBSTRING_INDEX('hong.test@gmail.com', '.', 2), SUBSTRING_INDEX('hong.test@gmail.com', '.', -2);

/* 수학 관련 함수 */
-- ABS(숫자)
-- ABS: 절대값 반환
SELECT ABS(-123);

-- CEILING(숫자), FLOOR(숫자), ROUND(숫자)
-- CEILING: 올림값 반환
-- FLOOR: 버림값 반환
-- ROUND: 반올림값 반환
SELECT CEILING(1234.56), FLOOR(1234.56), ROUND(1234.56);

-- CONV(숫자, 원래 진수, 변환할 진수)
-- CONV: 원래 진수에서 변환하고자 하는 진수로 변환
SELECT CONV('A', 16, 10), CONV('A', 16, 2), CONV(1010, 2, 8);

-- MOD(숫자1, 숫자2) 또는 숫자1 % 숫자2 또는 숫자1 MOD 숫자2
-- MOD: 숫자 1을 숫자 2로 나눈 나머지 추출
SELECT MOD(75, 10), 75 % 10, 75 MOD 10;

-- POW(숫자1, 숫자2), SQRT(숫자)
-- POW: 거듭제곱값 추출
-- SQRT: 제곱근을 추출
SELECT POW(2, 4), SQRT(16);

-- RAND()
-- RAND: 0이상 1 미만의 실수를 구한다.
-- 'm <= 임의의 정수 < n'을 구하고 싶다면
-- FLOOR((RAND() * (n - m) + m)을 사용한다.
-- 1부터 10까지 난수 발생: FLOOR(RAND() * (11 - 1) + 1)
SELECT RAND(), FLOOR(RAND() * (11 - 1) + 1); 

-- SIGN(숫자)
-- SIGN: 양수면 1, 0이면 0, 음수면 -1을 반환
SELECT SIGN(10.1), SIGN(0), SIGN(-10.1);

-- TRUNCATE(숫자, 정수)
-- TRUNCATE: 소수점을 기준으로 정수 위치까지 구하고 나머지는 버림
SELECT TRUNCATE(12345.12345, 2), TRUNCATE(12345.12345, -2);

/* 날짜 및 시간 관련 함수 */
-- ADDDATE(날짜, 차이), SUBDATE(날짜, 차이)
-- ADDDATE: 날짜를 기준으로 차이를 더함
-- SUBDATE: 날짜를 기준으로 날짜를 뺌
SELECT ADDDATE('2023-05-31', INTERVAL 30 DAY), ADDDATE('2023-05-31', INTERVAL 6 MONTH);
SELECT SUBDATE('2023-05-31', INTERVAL 30 DAY), SUBDATE('2023-05-31', INTERVAL 6 MONTH);

-- ADDTIME(날짜/시간, 시간), SUBTIME(날짜/시간, 시간)
-- ADDTIME: 날짜 또는 시간을 기준으로 시간을 더함
-- SUBTIME: 날짜 또는 시간을 기준으로 시간을 뺌
SELECT ADDTIME('2023-05-31 09:00:00', '1:0:1'), SUBTIME('2023-05-31 09:00:00', '1:0:1');

-- CURDATE(), CURTIME(), NOW(), SYSDATE()
-- CURDATE: 현재 연-월-일 추출
-- CURTIME: 현재 시:분:초 추출
-- NOW() 또는 SYSDATE(): 현재 연-월-일 시:분:초 추출
SELECT CURDATE(), CURTIME(), NOW(), SYSDATE();

-- CURDATE(), CURRENT_DATE(), CURRENT_DATE는 동일
SELECT CURDATE(), CURRENT_DATE(), CURRENT_DATE;

-- CURTIME(), CURRENT_TIME(), CURRENT_TIME은 동일 
SELECT CURTIME(), CURRENT_TIME(), CURRENT_TIME;

-- NOW(), LOCALTIME, LOCALTIME(), LOCALTIMESTAMP, LOCALTIMESTAMP()는 동일
SELECT NOW(), LOCALTIME, LOCALTIME(), LOCALTIMESTAMP, LOCALTIMESTAMP();

-- YEAR(날짜), MONTH(날짜), DAY(날짜),
-- HOUR(시간), MINUTE(시간), SECOND(시간), MICROSECOND(시간)
-- 날짜 또는 시간에서 연, 월, 일, 시, 분, 초, 밀리초를 추출
SELECT YEAR(CURDATE()), MONTH(CURDATE()), DAYOFMONTH(CURDATE());
SELECT HOUR(CURTIME()), MINUTE(CURTIME()), SECOND(CURRENT_TIME), MICROSECOND(CURRENT_TIME);

-- DATE(), TIME()
-- DATE: 연-월-일만 추출
-- TIME: 시:분:초만 추출
SELECT DATE(NOW()), TIME(NOW());

-- DATEDIFF(날짜1, 날짜2), TIMEDIFF(날짜1 또는 시간1, 날짜1 또는 시간2)
-- DATEDIFF: 날짜1 - 날짜2의 일수를 반환
-- TIMEDIFF: 시간1 - 시간2의 결과를 구함
SELECT DATEDIFF('2023-05-31', NOW()), TIMEDIFF('17:07:11', '13:06:10');

-- DAYOFWEEK(날짜), MONTHNAME(), DAYOFYEAR(날짜)
-- DAYOFWEEK: 요일 반환(1이 일요일)
-- MONTHNAME: 해당 달의 이름 반환
-- DAYOFYEAR: 해당 년도에서 몇 일이 흘렀는지 반환
SELECT DAYOFWEEK(CURDATE()), MONTHNAME(CURDATE()), DAYOFYEAR(CURDATE());

-- LAST_DAY(날짜)
-- LAST_DAY: 해당 날짜의 달에서 마지막 날의 날짜를 구한다.
SELECT LAST_DAY('20230201');

-- MAKEDATE(연도, 정수)
-- MAKEDATE: 해당 연도의 정수만큼 지난 날짜를 구한다.
SELECT MAKEDATE(2023, 32);

-- MAKETIME(시, 분, 초)
-- MAKETIME: 시, 분, 초를 이용해서 '시:분:초'의 TIME 형식을 만든다.
SELECT MAKETIME(17, 03, 02);

-- PERIOD_ADD(연월, 개월 수), PERIOD_DIFF(연월1, 연월2)
-- PERIOD_ADD: 열월에서 개월 수 이후의 연월을 구한다.(연월은 YYYY 또는 YYYYMM형식을 사용한다.)
-- PERIOD_DIFF: 연월1 - 연월2의 개월 수를 구한다.
SELECT PERIOD_ADD(202305, 6), PERIOD_DIFF(202305, 202311);

-- QUARTER(날짜)
-- QUARTER: 해당 날짜의 분기를 구함
SELECT QUARTER('2023-05-31');

-- TIME_TO_SEC(시간)
-- TIME_TO_SEC: 시간을 초 단위로 구함
SELECT TIME_TO_SEC('1:1:1');

/* VIEW */
-- SELECT 쿼리문을 저장한 객체로 가상테이블이라고 불린다.
-- 실질적인 데이터를 물리적으로 저장하고 있지 않음
-- 테이블을 사용하는 것과 동일하게 사용할 수 있다.

-- view 생성
create view hansik as
select
       menu_code
     , menu_name
     , menu_price
     , category_code
     , orderable_status
 from tbl_menu
where category_code = 4;

-- 생성된 view 조회
select * from hansik;

-- 베이스 테이블의 정보가 변경되면 view결과도 같이 변경된다.
insert into tbl_menu values (null, '식혜맛국밥', 5500, 4, 'y');

-- view를 통한 dml
-- 1) insert
insert into hansik values (99, '수정과맛국밥', 5500, 4, 'y');

-- 2) update
update hansik
   set menu_name = '버터맛국밥',
	   menu_price = 5700
 where menu_code = 99;

select * from hansik;
select * from tbl_menu;

-- 3) delete
delete from hansik where menu_code = 99;
select * from hansik;
select * from tbl_menu;

-- view 삭제
drop view hansik;
