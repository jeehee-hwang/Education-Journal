React- redux

===========================
- intro

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/redux@4.2.0/dist/redux.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">

        /* 
            [redux]
            상태관리를 위한 라이브러리이다. 
            app의 상태는 전부 하나의 저장소(store) 안에 있는 객체 트리에 저장된다. 
            상태 트리를 변경하는 유일한 방법은 어떤 행동이 일어날지에 해당하는 action이다. 
            action에 따라 상태를 어떻게 변경할지를 명시하기 위해 함수를 작성하며,
            이를 reducer 함수라고 한다.
        
        
        */

        const { createStore } = Redux; 

        function counter(state = 0, action) {
            /* 
                [action]
                {
                    type: 'ACTION_NAME'  ->필수 
                    paylode: {name: '판다', age:5} -> 옵션
                }
            */

            switch(action.type) {
                case 'INCREMENT' : return state +1; 
                case 'DECREMENT' : return state -1;
                default : return state; 
            }
        } 

        /*APP  상태(state)를 보관하는 redux 저장소를 만든다*/
        const store = createStore(counter);
        // console.log(store); 

        /* 스토어의 상태 변활르 구독하여 실행될 콜팩 함수를 전달한다.
        스토어의 상태값이 변화할 때 콜백 함수가 호출된다.*/
        store.subscribe(() => console.log(store.getState())); 

        /* dispatch는 리듀서 함수를 호출하며, state의 현재 상태가 리듀서에 자동으로 전달되며 호출된다.
        액션을 넣어 호출하면 리듀서 함수의 두 번째 인자로 액션값을 전달한다. 
        state를 변경하는 유일한 방법은 dispatch를 통해 리듀서에 액션을 보내는 것 뿐이다.*/
        store.dispatch({type : 'INCREMENT'});
        store.dispatch({type : 'INCREMENT'});
        store.dispatch({type : 'DECREMENT'});
    </script>

</body>
</html>

=====================================================
- function

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/redux@4.2.0/dist/redux.js"></script>
    <script src="https://unpkg.com/react-redux@8.0.4/dist/react-redux.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">

        const {Provider, useSelector, useDispatch} = ReactRedux; 
        const { createStore } = Redux; 

        /* Ducks 패턴에 의하면 초기값, action, reducer를 관련있는 state 별로 modules 폴더에 만들어서 관리한다.*/
       
        /*초기값*/
        const initialState = 0; 

        /* action */
        /* 액션 타입을 상수로 선언, 접두사는 다른 모듈과 액션 값이 겹치지 않도록 하기 위함*/
        const INCREMENT = 'count/INCREMENT'
        const DECREMENT = 'count/DECREMENT'

        /* 액션 타입을 함수 형태로 재사용할 수 있도록 dispatch 호출 시 인자로 전달할 값을 반환하는 함수 작성*/
        const increase = () => ({
            type: INCREMENT, 
            payload: {
                incrementValue: 1
            }
        });
        
        const decrease = () => ({
            type: DECREMENT, 
            payload: {
                decrementValue: 1
            }
        });

        /* reducer */
        function reducer(state = initialState, {type, payload}) {
            switch(type) {
                case INCREMENT: return state + payload.incrementValue;
                case DECREMENT: return state - payload.decrementValue;
                default: return state; 
            }
        }

        /*--------------------------분리------------------*/

        /* component */
        function App() {

            const count = useSelector(state => state); 
            const dispatch = useDispatch(); 


            /* 사전에 정의한 액션 함수를 호출하여 반환 받은 액션 객체를 dispatch에 전달한다.
            호출 시 직접 액션 객체를 리터럴로 작성하는 것 보다 가독성, 재사용성이 증가한다. */
            const increaseCount = ( ) => {
                dispatch(increase()); 
            }

            const decreaseCount = ( ) => {
                dispatch(decrease()); 
            }

            return(
                <>
                    <h1>Count: {count}</h1>
                    <button onClick={increaseCount}>증가</button>
                    <button onClick={decreaseCount}>감소</button>

                </>
            )
        }

        /* store*/
        const store = createStore (reducer,
            /* 크롬 확장 프로그램 redux devtools 적용 */
            window.__REDUX_DEVTOOLS_EXTENSION_&& window.__REDUX_DEVTOOLS_EXTENSION_()); 
 
        ReactDOM.createRoot(document.getElementById('root')).render(
            <Provider store={store}>
                <App/>
            </Provider>
         );

    </script>
</body>
</html>

===============================================
- action

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/redux@4.2.0/dist/redux.js"></script>
    <script src="https://unpkg.com/react-redux@8.0.4/dist/react-redux.js"></script>
    <script src="https://unpkg.com/redux-actions@2.6.5/dist/redux-actions.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">

        const { Provider, useSelector, useDispatch } = ReactRedux; 
        const { createStore } = Redux; 
        const { createAction, createActions, handleActions} = ReduxActions;

        /* 초기값 */
        const initialState = 0;

        /* 액션 */
        const INCREMENT = 'count/INCREASE'
        const DECREMENT = 'count/DECREASE'

        /* 1. CREATEACTION 사용*/
        /* 
        - 첫 번째 인자(문자열) : reducer로 전달되는 action의 type 속성
        - 두 번째 인자(콜백함수) : return값을 자동으로 payload 속성에 담는 함수 

        */
        //const increase = createAction(INCREMENT, (amount = 0) => ({incrementValue:amount})); 
        //const decrease = createAction(DECREMENT, (amount = 0) => ({decrementValue:amount})); 

        /* 2. createActions 사용*/
        /*
        -   여러개의 action함수를 한번에 생성할 수 있다. 
        -   접두사가 있으므로 대괄호를 이용해 키 식별자 작성
        -   중첩 구조분해 할당으로 꺼낼 수 있다 
        */

        const {count: {increase, decrease}} = createActions({
            [INCREMENT] : (amount = 0) => ({incrementValue: amount}), 
            [DECREMENT] : (amount = 0) => ({decrementValue: amount})
        });


        /* reducer */
        /*
        - 첫 번째 인자 : 객체 (key - action, value - state, action)을 전달 받아 새로운 state 반환
        - 두 번째 인자 : state의 초기값

        */
        const reducer = handleActions(
            {   
                [INCREMENT] : (state, {payload : {incrementValue} }) => state + incrementValue,
                [DECREMENT] : (state, {payload : {decrementValue} }) => state - decrementValue
            }, initialState
        );


            /*---------분리 ---------------*/


            /* componenent */
            function App() {
                const count = useSelector(state => state); 
                const dispatch = useDispatch(); 

                const increaseCount = () => {
                    dispatch (increase(3)); 
                }

                const decreaseCount = () => {
                    dispatch(decrease(3)); 
                }

                return(
                    <>
                        <h1>Count: {count}</h1>
                        <button onClick={increaseCount}>+3</button>
                        <button onClick={decreaseCount}>-3</button>
                    </>
                )

            }
            
            const store = createStore(reducer); 

        ReactDOM.createRoot(document.getElementById('root')).render( 
            <Provider store={store}>
                <App/>
            </Provider>
        );

    </script>
</body>
</html>
