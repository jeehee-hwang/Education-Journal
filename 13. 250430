* 배열 사용 이유, 선언,  [](인덱스 연산자를 사용, 인덱스는 (n-1)) 까지 이해
* 얕은 복사, 깊은 복사는 좀 더 공부가 필요 

* 수업 진도 04_java/chap05-array-lecture-source - chap06-class-object-lecture-source

 /* comment. 배열에 대해 이해하고 배열의 사용 목적을 이해할 수 있다. */
        /* 배열이란?
        *  동일한 자료형의 묶음(연속된 메모리 공간에 값을 저장하고 사용하기 위한 용도) 이다.
        *  배열은 heap 영역에 new 연산자를 이용하여 할당한다.
        * */

        /* 배열의 사용 이유?
        *  만약 배열을 사용하지 않는다면 변수를 여러 개 사용해야 한다.
        *  1. 연속된 메모리 공간으로 관리할 수 없다. (모든 변수의 이름을 사용자가 관리해야 한다.)
        *  2. 반복문을 이용한 연속 처리가 불가능하다.
        * */

         /* 배열의 선언 및 할당 */
         /* 하나의 이름으로 관리되는 연속된 메모리 공간이고, 공간마다 찾아갈 수 있는 번호(인덱스)를 이용해 접근한다. */

/* comment. 배열의 사용 방법을 익혀 배열을 사용할 수 있다. */
        /* 배열의 사용 방법
        *  1. 배열의 선언
        *  2. 배열의 할당
        *  3. 배열의 인덱스 공간에 값 대입
        * */

        /* 1. 배열의 선언 */
        /* 자료형[] 변수명; */
        /* 자료형 변수명[]; 로 선언할 수 있다. */

        /* 선언은 stack에 배열의 주소를 보관할 수 있는 공간을 만드는 것이다. */
        int[] iarr;
        char carr[];

        /* 2. 배열의 할당
        * 선언한 레퍼런스변수에 배열을 할당하여 대입할 수 있다.
        * new 연산자는 heap 영역에 공간을 할당하고 발생한 주소값을 반환하는 연산자이다.
        * 발생한 주소를 레퍼런스변수(참조형 변수)에 저장하고 이것을 참조하여 사용하기 때문에 참조자료형이라고 한다.
        * */

        /* 배열을 할당할 때는 반드시 배열의 크기를 지정해 주어야 한다. */
//        iarr = new int[];
        iarr = new int[5];
        carr = new char[10];

        /* 선언과 할당을 동시에 할 수 있다. */
        int[] iarr2 = new int[5];
        char carr2[] = new char[10];

        /* heap 메모리는 이름으로 접근하는 것이 아닌 주소로 접근하는 영역이다.
        *  stack에 저장된 주소로 heap에 할당된 배열을 찾아갈 수 있다.
        * */
        System.out.println("iarr2 = " + iarr2); // 16진수 주소값 출력
        System.out.println("carr2 = " + carr2);

        /* hashcode() : 일반적으로 객체의 주소값을 10진수로 변환하여 생성한 객체의 고유한 정수값을 반환한다.
        *  동일객체인지 비교할 때 사용할 목적으로 쓰여진다.
        * */
        System.out.println(iarr2.hashCode());
        System.out.println(carr2.hashCode());

        /* length : 배열의 길이를 알 수 있는 기능 */
        System.out.println(iarr2.length);
        System.out.println(carr2.length);

        double[] darr = new double[size];

        darr = null;

        /* NullPointerException : 아무것도 참조하지 않고 null이라는 특수한 값을 참조하고 있는 경우
        *                         참조연산자를 사용하게 될 때 발생하는 에러이다.
        * */

/* comment. 배열에 초기화되는 자료형별 기본값을 이해할 수 있다. */
    /* 값의 형태 별 기본값
    *  정수 : 0
    *  실수 : 0.0
    *  논리 : false
    *  문자 : \u0000
    *  참조 : null
    * */
    
/* 자바에서 지정한 기본값 외의 값으로 초기화를 하고 싶은 경우 블럭을 이용한다.
        *  블럭을 사용하는 경우 new를 사용하지 않아도 되며, 값의 갯수만큼 자동으로 크기가 설정된다.
        int[] iarr2 = {11, 22, 33, 44, 55};
        int[] iarr3 = new int[] {11, 22, 33, 44, 55};

/* comment. 다차원 배열의 구조를 이해하고 사용할 수 있다. */
        /* 다차원 배열?
        *  2차원 이상의 배열을 의미한다.
        *  배열의 인덱스마다 또 다른 배열의 주소를 보관하는 배열을 의미한다.
        *  즉, 2차원 배열은 1차원 배열 여러 개를 하나로 묶어서 관리하는 배열을 의미한다.
        *  더 많은 차원의 배열을 사용할 수 있지만 일반적으로 2차원 배열보다 더 높은 차원의 배열은 사용 빈도가 적다.
        * */

        /* 2차원 배열을 사용하는 방법
        *  1. 배열의 주소를 보관할 레퍼런스 변수 선언(stack)
        *  2. 여러 개의 1차원 배열의 주소를 관리하는 배열을 생성(heap)
        *  3. 각 인덱스에서 관리하는 배열을 할당(heap)하여 주소를 보관하는 배열에 저장
        *  4. 생성한 여러 개의 1차원 배열에 차례로 접근해서 사용
        * */

/* comment. 배열의 복사 개념 중 얕은 복사에 대해 이해할 수 있다. */
        /* 배열의 복사에는 두 가지 종류가 있다.
        *  1. 얕은 복사 : stack의 주소값만 복사
        *  2. 깊은 복사 : heap의 배열에 저장된 값 복사
        * */

        /* 얕은 복사는 stack에 저장되어 있는 배열의 주소값만 복사한다는 것이다.
        *  따라서 두 개의 레퍼런스 변수는 동일한 배열의 주소값을 가지고 있다.
        *  하나의 레퍼런스 변수에 저장된 주소값을 가지고 배열의 내용을 수정(값 변경)을 하게 되면
        *  다른 레퍼런스 변수로 배열에 접근했을 때도 동일한 배열을 가리키고 있기 때문에 변경된 값이 반영되어 있다.
        * */

/* comment. 얕은 복사를 활용하여 매개변수와 리턴값으로 활용할 수 있다. */
        /* 얕은 복사의 활용
        *  주로 메소드 호출 시 인자로 사용하는 경우와
        *  리턴값으로 동일한 배열을 리턴해주고 싶은 경우 사용한다.
        * */

/* comment. 배열의 깊은 복사를 사용한 자바 문법을 이해하고 활용할 수 있다. */
        /* 깊은 복사는 원본과 복사본 중 둘 중 한 가지 값을 변경해도 다른 하나에 영향을 주지 않는다.
        *  같은 값을 가지고 있는 서로 다른 배열이기 때문이다.
        * */

/* comment. 변수의 두 값을 변경하는 방법에 대해 이해할 수 있다. */
        > 빈 공간을 하나 만들어 값을 변경시켜 주는 것 
        

----------------- 반복문 연습 
7. 정수를 입력받아 1부터 입력받은 정수까지
홀수이면 "토", 짝수이면 "마"가 정수만큼 누적되어 출력되도록 하세요.

-- 입력 예시 --
정수를 입력하세요 : 5

-- 출력 예시 --
토마토마토

------------

package org.example;

import java.util.Scanner;

public class practice7 {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        System.out.println("정수를 입력하세요 : ");
        int num  = sc.nextInt();

        String result = "";

        for (int i = 1; i <= num; i++) {
            if (i % 2 == 0) {
                result += "마";
            } else {
                result += "토";
            }
        }

        System.out.println(result);
    }
}
* 아직 반복문과 조건문이 익숙하지 않고 결과값을 만드는 공간이 필요하다는 것을 자꾸 잊음 


