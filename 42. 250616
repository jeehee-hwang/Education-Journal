Spring-security

security 내용이 굉장히 어렵다 

@Bean
public SecurityFilterChain configure(HttpSecurity http) throws Exception {
    // 1. 인가 (Authorization) 설정
    http.authorizeHttpRequests( auth -> { ... })

    // 2. 로그인 설정
        .formLogin( login -> { ... })

    // 3. 로그아웃 설정
        .logout( logout -> { ... })

    // 4. 세션 설정
        .sessionManagement( session -> { ... })

    // 5. CSRF 설정
        .csrf( csrf -> csrf.disable());

    return http.build(); // SecurityFilterChain 반환
}

1. authorizeHttpRequests(...) - 인가 설정
http.authorizeHttpRequests(auth -> {
    auth.requestMatchers("/auth/login", "/user/signup", "/auth/fail", "/", "/main").permitAll(); 
    auth.requestMatchers("/admin/*").hasAnyAuthority(UserRole.ADMIN.getRole());
    auth.requestMatchers("/user/*").hasAnyAuthority(UserRole.USER.getRole());
    auth.anyRequest().authenticated();
});

항목 |	설명
requestMatchers(...).permitAll() | 해당 경로는 로그인 없이 접근 허용
hasAnyAuthority(...) | 지정된 권한을 가진 사용자만 접근 허용
anyRequest().authenticated() | 위에서 지정한 것 외 모든 요청은 인증 필요

2. formLogin(...) - 로그인 설정
.formLogin(login -> {
    login.loginPage("/auth/login"); // 사용자 정의 로그인 페이지 경로
    login.usernameParameter("user"); // 로그인 form의 사용자 ID 파라미터명
    login.passwordParameter("pass"); // 로그인 form의 비밀번호 파라미터명
    login.defaultSuccessUrl("/", true); // 로그인 성공 시 이동할 기본 페이지
    login.failureHandler(authFailHandler); // 로그인 실패 시 동작할 핸들러
});
항목	| 설명
loginPage(...) |	기본 /login 대신 커스텀 경로 사용
usernameParameter(...) |	form에서 사용자 ID input의 name 속성
passwordParameter(...) |	form에서 비밀번호 input의 name 속성
defaultSuccessUrl(...) |	로그인 성공 후 이동할 URL (true = 항상 이동)
failureHandler(...) |	로그인 실패 처리 핸들러 (예: 오류 메시지 전달 등)

3. logout(...) - 로그아웃 설정
.logout(logout -> {
    logout.logoutRequestMatcher(new AntPathRequestMatcher("/auth/logout")); // 로그아웃 경로
    logout.deleteCookies("JSESSIONID"); // 쿠키 삭제
    logout.invalidateHttpSession(true); // 세션 무효화
    logout.logoutSuccessUrl("/"); // 로그아웃 후 리다이렉트 경로
});

4. sessionManagement(...) - 세션 설정
.sessionManagement(session -> {
    session.maximumSessions(1); // 최대 동시 세션 수 1 (중복 로그인 방지)
    session.invalidSessionUrl("/"); // 세션 만료 시 이동할 URL
});

5. csrf(...) - CSRF 보호 설정
.csrf(csrf -> csrf.disable()); // CSRF 보호 비활성화 (API 개발 등에서는 사용)
⚠️ 주의: CSRF는 웹 보안의 중요한 부분입니다. 비활성화는 신중해야 하며, REST API 등에서만 주로 사용됩니다.

정리 - 이 메서드는 무엇을 설정하나?
항목 |	기능
인가	| URL 패턴별 권한 설정
인증	| 로그인 페이지, 파라미터 이름, 성공/실패 처리
로그아웃 |	요청 URL, 세션 무효화, 쿠키 삭제
세션 관리 |	중복 로그인 방지, 세션 만료 처리
CSRF |	보호 비활성화 (선택적)

