JPQL  parameter

JPQL에서 파라미터 바인딩은 동적인 값을 쿼리에 안전하게 전달하는 방법입니다. 
SQL 인젝션 공격을 방지하고, JPA의 쿼리 캐시를 통해 성능을 최적화할 수 있으므로 반드시 사용해야 합니다. 
파라미터 바인딩에는 이름 기준과 위치 기준 두 가지 방식이 있습니다.

문법 설명 및 활용법
1. 이름 기준 파라미터 (Named Parameters)
이름 기준 파라미터는 쿼리문에 :파라미터이름 형식으로 정의합니다. 
코드 가독성이 높고 파라미터 순서가 바뀌어도 안전하기 때문에 가장 권장되는 방식입니다. 

JPQL 문법: WHERE a.name = :name AND a.age > :age

Java 코드: query.setParameter("파라미터이름", 값) 메서드를 사용해 값을 바인딩합니다.

활용 예시
// EntityManager em = ...

// 1. JPQL에 이름 기준 파라미터(:username, :age) 정의
String jpql = "SELECT m FROM Member m WHERE m.username = :username AND m.age > :age";

// 2. 쿼리 생성
TypedQuery<Member> query = em.createQuery(jpql, Member.class);

// 3. setParameter()로 각 파라미터에 값 바인딩
query.setParameter("username", "홍길동");
query.setParameter("age", 25);

// 4. 쿼리 실행
List<Member> result = query.getResultList();


2. 위치 기준 파라미터 (Positional Parameters)
위치 기준 파라미터는 쿼리문에 ?위치 형식으로 정의하며, 위치 값은 1부터 시작합니다. 
코드가 직관적이지 않고, 쿼리 수정 시 파라미터 순서가 꼬여 에러가 발생할 위험이 있어 현대 개발에서는 잘 사용하지 않습니다.

JPQL 문법: WHERE a.name = ?1 AND a.age > ?2

Java 코드: query.setParameter(위치, 값) 메서드를 사용해 값을 바인딩합니다.

활용 예시
// EntityManager em = ...

// 1. JPQL에 위치 기준 파라미터(?1, ?2) 정의
String jpql = "SELECT m FROM Member m WHERE m.username = ?1 AND m.age > ?2";

// 2. 쿼리 생성
TypedQuery<Member> query = em.createQuery(jpql, Member.class);

// 3. setParameter()로 각 위치에 값 바인딩
query.setParameter(1, "홍길동"); // 첫 번째 파라미터
query.setParameter(2, 25);     // 두 번째 파라미터

// 4. 쿼리 실행
List<Member> result = query.getResultList();

결론: 이름 기준 파라미터를 사용하세요

구분 | 이름 기준 파라미터 (:name) | 위치 기준 파라미터 (?1)
장점 | 가독성이 매우 높음, 파라미터 순서와 무관하여 유지보수가 용이 | 코드 길이가 약간 짧음
단점 | 없음 | 가독성이 낮음, 파라미터 순서 변경 시 심각한 오류 발생 가능
추천 | 강력히 추천 (Best Practice) |사용 비추천

결론적으로, 유지보수성과 안정성을 위해 항상 이름 기준 파라미터를 사용하는 것이 더 좋다 
