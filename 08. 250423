03-02_javascript(web) 4-2. BOM (Browser Object Model) - 03-03_javascript(ES6+)

4-2. BOM (Browser Object Model)
브라우저 객체 모델은 문서 이외의 모든 것을 제어하기 위해 브라우저(호스트 환경)가 제공하는 추가 객체를 나타낸다. 

4-2-1. location - location 객체는 현재 URL을 읽을 수 있게 해주고 새로운 URL로 변경(redirect)할 수 있게 해준다.
4-2-2. navigator
- navigator 객체는 브라우저와 운영체제에 대한 정보를 제공한다.
- 객체엔 다양한 프로퍼티가 있는데, 가장 잘 알려진 프로퍼티는 현재 사용 중인 브라우저 정보를 알려주는 navigator.userAgent와 브라우저가 실행 중인 운영체제(Windows, Linux, Mac 등) 정보를 알려주는 navigator.platform이다.

4-2-3. screen
- screen 객체는 웹 브라우저 화면이 아닌 운영체제 화면의 속성을 가지는 객체이다.
- screen.width, screen.height는 화면 너비와 높이를 나타내지만 screen.availWidth, screen.availHeight는 실제 화면에서 사용 가능한(상태 표시줄 등을 제외한) 너비와 높이를 의미한다.
- screen.colorDepth는 사용 가능한 색상 수, screen.pixelDepth는 한 픽셀 당 비트 수를 의미한다.

03-03_javascript(ES6+)
1-1. class basic syntax (클래스 기본 문법)

동일한 종류의 객체를 여러 개 생성해야 하는 경우 객체 리터럴을 여러 개 생성하기 보다 클래스 문법을 통해 동일한 종류의 객체를 재생성할 수 있다.

1-1-1. class declarations (클래스 선언)
- Student 클래스를 선언하고 new Student()를 호출하면 새로운 객체가 생성되며 넘겨받은 인수 name과 함께 constructor가 자동으로 실행되어 “홍길동”이 this.name에 할당된다.
- 클래스 몸체에 정의한 메서드는 기본적으로 프로토타입 메서드가 된다.
- 정리하면 new Student()를 호출하면 Student라는 이름을 가진 함수를 만들고 함수 본문은 생성자 메서드 constructor에서 가져온다.
- 만약 생성자 메서드가 없으면 본문이 비워진 채로 함수가 만들어진다. introduce와 같이 클래스 내에서 정의한 메서드를 Student.prototype에 저장한다.
- 클래스 문법과 유사하게 기능하는 것처럼 보이는 생성자 함수를 사용할 수도 있다.

- 생성자 함수와 클래스의 차이점
    1. 클래스 생성자를 new와 함께 호출하지 않으면 에러가 발생한다. 함수 내부 프로퍼티 [[IsClassConstructor]] : true 가 사용 된다.
    2. 클래스에 정의 된 메서드는 열거 불가하다. enumerable 플래그가 false이기 때문이다. 따라서 for..in 으로 객체 순회 시 메서드 순회 대상에서 제외된다.
    3. 클래스는 호이스팅이 발생하지 않는 것처럼 동작한다. 함수 선언문 생성자 함수는 함수 호이스팅, 함수 표현식 생성자 함수는 변수 호이스팅이 발생한다.
    4. 클래스는 항상 use strict 적용된다. 클래스 생성자 안 코드는 자동으로 엄격 모드가 적용 된다.
- 따라서 클래스 문법은 생성자 함수와는 다른 새로운 객체 생성 매커니즘이다.

1-1-2. class expression (클래스 표현식)
익명 클래스 표현식
기명 클래스 표현식
클래스 동적 생성 
  - 클래스 표현식 정의가 가능하다는 것의 의미는 함수처럼 클래스도 일급 객체이며 다른 표현식 내부에서 정의, 전달, 반환, 할당이 가능하다는 것이다.

1-1-3. getter setter
- 접근자 프로퍼티는 프로토타입의 프로퍼티가 된다. name, price로 외부 접근하고 _name, _price로 실제 값을 담는다.
- 밑줄은 프로그래머들 사이에서 외부 접근이 불가능한 프로퍼티나 메서드를 나타낼 때 사용한다.

1-2. class inheritance (클래스 상속)
클래스 상속을 사용하면 클래스를 다른 클래스로 확장할 수 있다.

1-2-1. inheritance basic syntax (상속 기본 문법)
- Animal 클래스 선언
- Animal을 상속 받는 Human 클래스 선언
- extends 키워드를 사용한다.
- 키워드 extends는 프로토타입을 기반으로 동작한다.
- extends는 Human.prototype.[[Prototype]]을 Animal.prototype으로 설정한다.
- 그렇기 때문에 Human.prototype에서 메서드를 찾지 못하면 Animal.prototype에서 메서드를 가져온다.

1-2-2. method overiding (메서드 오버라이딩)
부모 메서드 전체를 교체하지 않고, 부모 메서드를 토대로 일부 기능만 변경하고 싶을 때, 부모 메서드의 기능을 확장하고 싶을 때 메서드 오버라이딩을 사용한다.
- Animal 클래스 선언
- Animal을 상속 받는 Tiger 클래스 선언

1-2-3. constructor overriding (생성자 오버라이딩)
- 클래스가 다른 클래스를 상속 받고 constructor가 없는 경우에는 비어있는 constructor가 만들어진다.
- 생성자는 기본적으로 부모 constructor를 호출한다.
- 이때 부모 constructor에도 인수를 모두 전달하는데 클래스에 자체 생성자가 없는 경우엔 이런 일이 모두 자동으로 일어난다.
- Animal 클래스 선언
- Animal 클래스를 상속하는 Deer 클래스 선언
- 자바스크립트는 ’상속 클래스의 생성자 함수(derived constructor)’와 그렇지 않은 생성자 함수를 구분한다.
- 상속 클래스의 생성자 함수엔 특수 내부 프로퍼티인 [[ConstructorKind]]:“derived”가 붙는다.
- 일반 클래스는 new와 함께 실행되면 빈 객체가 만들어지고 this에 이 객체를 할당하지만, 상속 클래스의 생성자 함수가 실행되면 빈 객체를 만들고 this에 이 객체를 할당하는 일을 부모 클래스의 생성자가 처리해주길 기대한다.
- 이런 차이 때문에 상속 클래스의 생성자에선 super를 호출해 부모 생성자를 실행해 주어야 하고 그렇지 않으면 this가 될 객체가 만들어지지 않아 에러가 발생하는 것이다.

2. arrow function (화살표 함수)
2-1. arrow function basic syntax (화살표 함수 기본 문법)
2-1-1. arrow function basic syntax (화살표 함수 기본 문법)
- ES6에서 도입 된 화살표 함수는 function 키워드 대신 화살표를 사용해 좀 더 간략한 방법으로 함수를 선언할 수 있다.
- 화살표 함수는 항상 익명 함수로 정의한다. 본문이 한 줄인 함수를 작성할 때 유용하다.

2-2. arrow function feature (화살표 함수 특징)
2-2-1. arrow function feature (화살표 함수 특징)
- 화살표 함수는 기존의 함수보다 표현만 간략한 것이 아니라 내부 동작 또한 간략화 되어있다.
- 일반 함수와의 차이점을 알아보자.
    * 화살표 함수는 this를 가지지 않는다.
- 이러한 특징은 객체의 메서드 안에서 동일한 객체의 프로퍼티를 대상으로 순회하는데 사용할 수 있다.
* 화살표 함수는 new와 함께 호출 할 수 없다.
* this가 없기 때문에 생성자 함수로 사용할 수 없다.
* 화살표 함수는 super를 가지지 않는다.
* 화살표 함수는 arguments를 지원하지 않는다.
- 화살표 함수는 다른 함수의 인수로 전달 되어 콜백함수로 사용되는 경우가 많다.
- 위와 같은 특징들은 콜백 함수 내부의 this가 외부 함수의 this와 다르기 때문에 발생하는 문제를 해결하기 위해 의도적으로 설계 된 것이라 할 수 있다.

3. spread syntax (스프레드 문법)
3-1. rest parameter (나머지 매개변수)
3-1-1. rest parameter (나머지 매개변수)
- 함수에 정해진 인수보다 적게 전달 되면 undefined, 정해진 인수보다 많이 전달 되면 해당 인수를 무시하고 기능한다.
- 이 때 나머지 매개변수 … 를 사용하면 매개변수를 한데 모아 배열에 담을 수 있다.
- 유의할 점은 나머지 매개변수는 항상 마지막에 있어야 한다.

3-2. spread syntax (스프레드 문법, 전개 문법)
3-2-1. spread syntax (스프레드 문법, 전개 문법)
- rest parameter처럼 매개변수 목록을 배열로 가져오는 것과는 반대로 배열을 통째로 매개변수에 넘겨주는 기능이다.
- 하나로 뭉쳐 있는 여러 값들의 집합을 전개해서 개별적인 값들의 목록으로 만든다.
- 사용 대상은 for … of 문으로 순회할 수 있는 이터러블에 한정된다.
- 배열 병합에도 사용 가능하다 - concat 보다 간결
- 이터러블 배열 변환
- 스프레드 문법은 for … of 와 같은 방식으로 내부에서 이터레이터(iterator, 반복자)를 사용해 요소를 수집한다.

3-3. array and object copy (스프레드 문법을 이용한 배열, 객체 복사)
3-3-1. array and object copy (스프레드 문법을 이용한 배열, 객체 복사)
- 배열 복사
- 스프레드 문법의 대상은 이터러블이어야 하지만 스프레드 프로퍼티 제안은 일반 객체를 대상으로도 허용하고 있다.

정리
- 스프레드 문법과 나머지 매개변수의 구분
- 스프레드 문법 : 배열을 목록으로 확장해주므로 …이 함수 호출 시, 배열이나 객체 리터럴 내부에 사용된다.
- 나머지 매개변수 : 인수 목록의 나머지를 배열로 모아주므로 …이 함수 매개변수의 끝에 있다.
- 두 가지 문법을 함께 사용하면 매개변수 목록과 배열 간 전환을 쉽게 할 수 있다.

4. distructuring assignment (구조 분해 할당)
구조 분해 할당을 사용하면 배열이나 객체를 변수로 ’분해’하여 연결할 수 있다.

4-1. array distructring assignment basic syntax (배열 구조 분해 할당)
4-1-1. array distructring assignment basic syntax (배열 구조 분해 할당 기본 문법)
4-1-2. various usage (다양한 사용법)
- 할당 연산자 우측엔 모든 이터러블이 올 수 있고 할당 연산자 좌측엔 뭐든지 올 수 있다. 객체 프로퍼티도 가능하다.
- Object.entries()와 구조 분해를 조합하면 객체의 키와 값을 순회해 변수로 분해 할당할 수 있다.
- 변수 교환 용도로도 사용할 수 있다.
- rest parameter …로 나머지 요소를 한 번에 가져올 수도 있다.
- 기본 값을 설정하고 사용할 수도 있다.

4-2. object distructring assignment (객체 구조 분해 할당)
4-2-1. object distructring assignment basic syntax (객체 구조 분해 할당 기본 문법)
4-2-2. various usage (다양한 사용법)
- 객체에 존재하지 않는 프로퍼티는 기본 값을 설정해서 사용할 수 있다.
- 또한 콜론과 할당을 동시에 사용할 수 있다.
- 프로퍼티가 많은 복잡한 객체에서 원하는 정보만 뽑아오는 것도 가능하다.
- rest parameter …로 나머지 요소를 한 번에 가져올 수도 있다.
- 단, 구버전 브라우저에서는 동작하지 않는다. 바벨을 사용해 동작 시킬 수 있다.

4-2-3. nested distructring (중첩 구조 분해)
4-2-4. function parameters (함수 매개변수)
- 함수의 매개변수가 많거나 매개변수 기본값이 필요한 경우 등에 활용된다.


---실습 문제 --- 
   <h1  class="wrapper">사용자 입력 양식 이벤트 연습하기</h1>
  
    <form name="memberjoin">
    <label for="username" class="name1" >이름<br>    
    <input type="text" name="username" id="username" class="name1" ></label>
   
    <br><br>

    <label for="email" class="email1" >이메일<br>
    <input type="text" name="email" id="email" class="email1"></label>

    <br><br>
    
    <div class="gender1">
    <label>성별</label><br>
    <input type="radio" name="gender" id="male" value="m">
    <label for="male">남자</label>
    <input type="radio" name="gender" id="female" value="f">
    <label for="female">여자</label>
    </div>

    <br>

    <div class="date1">
    <label for="">참여 일자 선택</label><br>
      <select name="" id="">
        <option value=>-- 날짜 선택 -- </option>
        <option value=>2025.04.24</option>
        <option value=>2025.04.25</option>
        <option value=>2025.04.26</option>
        <option value=>2025.04.27</option>
        <option value=>2025.04.28</option>
      </select>
    </div>

   <br>

    <div class="introduce1">
      <label for="">요청사항</label><br>
      <textarea name="introduce" id="introduce" ></textarea>
      <br>
      <span>0</span>/500자 
   </div>
   
   <br>
    
    <input type="checkbox" class="checkbox1">
      <label>개인정보 수집에 동의합니다.</label>

    <br><br>

    <input type="submit" value="신청하기" class="submit1">

  </form>
  
  <script>
    // 폼 취득
    console.log(document.forms);
    console.log(document.forms.memberjoin);
    console.log(document.forms[0]);
    const $form = document.forms.memberjoin;

    // 요소 취득
    console.log($form.elements);
    console.log($form.elements.username);

   // 버블링
    $form.addEventListener('focusin', (e) => e.target.classList.add('focusde')); //이름이 같아야함 
    $form.addEventListener('focusout', (e) => e.target.classList.remove('focusde'));

  //alert 사용법 
    const $email = $form.email;
    $email.addEventListener('change', () => {
      alert('이메일에 @ 기호가 포함되어야 합니다.');
    });

   // 요청사항 500자 제한 및 공백은 체크되지 않게 하는 법 
    const $introduce = $form.introduce
    $introduce.addEventListener('input', (e) => {
      let value = e.target.value;
      let len = value.trim().length;
      if (len > 500) {
        e.target.value = value.slice(0, 500); 
        len = 500;
      }
      $form.querySelector('span').textContent = len;
    }); 

  </script>
</body>
