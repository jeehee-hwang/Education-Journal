* 컬렉션의 개념과 쓰임은 잘 알아 둘것 (오늘 수업에서는 ArrayList가 포인트) 

- 수업 진도 ( 04_java /chap10 / section01 ~~  chap12/ section01) 

### 제네릭스(Generics)
- 제네릭은 데이터의 타입을 일반화한다는 의미를 가진다.
- 제네릭스를 활용하는 제네릭 클래스는 제네릭 타입(T, E, K, V)을 활용하여 하나의
클래스로 해당 제네릭 타입에 변화를 줘서 제네릭 클래스의 인스턴스를 다양한 타입
을 지닌 인스턴스로 활용할 수 있다.
- 하나의 클래스만 작성해도 여러 타입의 필드 값을 가진 클래스로 변형해서 다룰 수
있어 구현의 편리함이 있다.
- 제네릭을 적용한 클래스는 타입을 명확히 알고 쓰기 때문에 해당 제네릭 클래스의 필
드 타입이나 메소드의 매개변수나 반환형을 알고 사용하기 때문에 자료형의 안전성
이 높다.

    public static void main(String[] args) {

        GenericTest<Integer> gt1 = new GenericTest<Integer>();

        gt1.setValue(Integer.valueOf(10));
        System.out.println(gt1.getValue());
        System.out.println(gt1.getValue() instanceof Integer);

        GenericTest<String> gt2 = new GenericTest<>();

        gt2.setValue("홍길동");
        System.out.println(gt2.getValue());
        System.out.println(gt2.getValue() instanceof String);

        GenericTest<Double> gt3 = new GenericTest<>();

        gt3.setValue(0.5);
        System.out.println(gt3.getValue());
        System.out.println(gt3.getValue() instanceof Double);
    }
}



### 와일드카드 (Wildcard)
- 제네릭 클래스의 인스턴스를 유연하게 활용하기 위한 문법이다.
- 메소드의 매개변수로 받을 시 타입을 원하는 만큼으로 제한하는 것으로 불특정한 제네릭 클래스 타입을
조금 더 활용할 수 있다.
- <?>: 모든 타입을 허용하는 와일드 카드
<? extends T>: T 타입 또는 T의 하위 타입을 허용하는 와일드 카드
<? super T>: T 타입 또는 T의 상위 타입을 허용하는 와일드 카드

    public static void main(String[] args) {

        WildCardFarm wildCardFarm = new WildCardFarm();

//        wildCardFarm.anyType(new RabbitFarm<Mammal>(new Mammal()));

        wildCardFarm.anyType(new RabbitFarm<Rabbit>(new Rabbit()));
        wildCardFarm.anyType(new RabbitFarm<Bunny>(new Bunny()));
        wildCardFarm.anyType(new RabbitFarm<DrunkenBunny>(new DrunkenBunny()));

//        wildCardFarm.extendsType(new RabbitFarm<Rabbit>(new Rabbit()));
        wildCardFarm.extendsType(new RabbitFarm<Bunny>(new Bunny()));
        wildCardFarm.extendsType(new RabbitFarm<DrunkenBunny>(new DrunkenBunny()));

        wildCardFarm.superType(new RabbitFarm<Rabbit>(new Rabbit()));
        wildCardFarm.superType(new RabbitFarm<Bunny>(new Bunny()));
//        wildCardFarm.superType(new RabbitFarm<DrunkenBunny>(new DrunkenBunny()));
    }
}


### 컬렉션(Collection)
- 많은 데이터들을 효과적으로 처리할 수 있는 방법을 제공하는 클래스들의 집합
- Collection 인터페이스는 List, Set, Queue 로 크게 3가지 상위 인터페이스로 분류가 된다.
- List와 Set, Queue는 Collection 인터페이스를 상속 받지만, 구조 상의 이유로 Map은 따로 구현되어 있다.

Collection 사용하는 이유
1. 일관된 API
: Collection 에서 제공하는 규격화된 메소드를 사용함으로 일관된 사용과 유지보수가 가능하다.
2. 프로그래밍 비용 감소
: 이미 제공된 자료구조를 활용하는 것으로 low-level의 알고리즘을 고민할 시간과 노력을 아낄 수 있다.
3. 프로그래밍 속도 및 품질 향상
: 필요한 자료구조를 사용함으로써 프로그래밍의 속도 뿐만 아니라 기동 속도, 품질 향상을 기대할 수 있다.

Collection 주요 인터페이스 특징
| 인터페이스 | 설명 | 구현 클래스 |
| List<E> | 순서가 있는 데이터의 집합으로, 데이터의 중복을 허용한다. | ArrayList, LinkedList, Stack, Queue, Vector |
| Set<E> | 순서가 없는 데이터의 집합으로, 데이터 중복 허용하지 않는다. |  HashSet, TreeSet |
| Map<K, V>  | 키와 값이 쌍을 이루어 구성되는 데이터 집합으로 순서가 없다. 키의 중복은 허용되지 않지만, 값의 중복은 허용된다. | HashMap, TreeMap, Properties |

2. List
2.1 List 특징
- List 인터페이스를 구현한 모든 클래스는 저장 순서가 유지된다.
- List 계열의 클래스는 중복 저장을 허용한다

2.2 ArrayList
- ArrayList는 자바에서 제공하는 기본 배열보다 느릴 수 있지만 동적 배열이 구현되어 있다.
- ArrayList 클래스는 가장 많이 사용되는 컬렉션 클래스이다.
- ArrayList 특징
    - ArrayList는 인스턴스를 생성하게 되면 내부적으로 10칸짜리 배열을 생성해서 관리한다.
    - 배열의 단점을 보완하기 위해 만들어졌기 때문에 크기 변경, 요소 추가/삭제/정렬 기능들을 
    메소드로 제공하고 있다.
    - 자동적으로 수행되는 것이지 속도가 빨라지는 것은 아니다.
    - ArrayList는 스레드간 동기화가 지원되지 않는다. 따라서 다수의 스레드가 동시에 접근하여 데이터를 조작하게 될 경우 데이터 훼손이 일어날 수 있다.
    - ArrayList는 인덱스로 데이터에 접근할 수 있기 때문에 조회 기능적으로 뛰어나다.


    public static void main(String[] args) {

        ArrayList alist = new ArrayList();

        List list = new ArrayList();

        Collection clist = new ArrayList<>();

        alist.add("apple");
        alist.add(123);
        alist.add(45.34);
        alist.add(new Date());

        System.out.println(alist);

        System.out.println(alist.size());

        for(int i = 0; i < alist.size(); i++) {
            System.out.println(i + " : " + alist.get(i));
        }

        // 데이터의 중복 저장을 허용
        alist.add("apple");
        System.out.println(alist);

        alist.add(1, "banana");
        System.out.println(alist);

        // 값을 삭제할 때
        alist.remove(2);
        System.out.println(alist);

        // 값을 수정할 때
        alist.set(1, Boolean.valueOf(true));
        System.out.println(alist);

        List<String> stringList = new ArrayList<>();
        stringList.add("apple");
//        stringList.add(123);
        stringList.add("banana");
        stringList.add("orange");
        stringList.add("mango");
        stringList.add("grape");

        System.out.println(stringList);

        // 오름차순 정렬
        Collections.sort(stringList);

        System.out.println(stringList);

        stringList = new LinkedList<>(stringList);

        Iterator<String> dIter = ((LinkedList<String>) stringList).descendingIterator();

//        while (dIter.hasNext()) {
//            System.out.println(dIter.next());
//        }

        List<String> descList = new ArrayList<>();
        while (dIter.hasNext()) {
           descList.add(dIter.next());
        }
        System.out.println(descList);
    }
}

        /* comment. String 클래스의 자주 사용하는 메소드에 대해 숙지하고 응용할 수 있다. */
        /* charAt() : 해당 문자열의 특정 인덱스에 해당하는 문자를 반환한다.
                     인덱스는 0부터 시작하는 숫자 체계를 의미하며
                     인덱스를 벗어난 정수를 인자로 전달하는 경우에는 IndexOutOfBoundsException이 발생한다.
        /* compareTo() : 인자로 전달된 문자열과 사전 순으로 비교를 하여
                        두 문자열이 같다면 0을 반환, 인자로 전달된 문자열보다 작으면 음수를, 크면 양수를 반환한다.
                        단, 이 메소드 대소문자를 구분하여 비교한다.
         /* concat() : 문자열에 인자로 전달된 문자열을 합치기해서 새로운 문자열을 반환한다.
                     원본 문자열에는 영향을 주지 않는다.
         /* indexOf() : 문자열에서 특정 문자를 탐색하여 처음 일치하는 인덱스 위치를 정수형으로 반환한다.
                      단, 일치하는 문자가 없는 경우 -1을 반환한다.
         /* lastIndexOf() : 문자열 탐색을 뒤에서부터 하고 처음 일치하는 위치의 인덱스를 반환한다.
                          단, 일치하는 문자가 없는 경우 -1을 반환한다.
        /* trim() : 문자열의 앞 뒤에 공백을 제거한 문자열을 반환한다. 
        /* toLowerCase() : 모든 문자를 소문자로 변환시킨다. 원본에는 영향을 주지 않는다.
        *  toUpperCase() : 모든 문자를 대문자로 변환시킨다. 원본에는 영향을 주지 않는다.
        /* substring() : 문자열의 일부분을 잘라내어 새로운 문자열을 반환한다. 원본에 영향을 주지 않는다.
        /* replace() : 문자열에서 대체할 문자열로 기존 문자열을 변경해서 반환한다. 원본에 영향을 주지 않는다.
        /* length() : 문자열의 길이를 정수형으로 반환한다.
        /* isEmpty() : 문자열의 길이가 0이면 true 반환, 아니면 false를 반환, 길이가 0인 문자열은 null과는 다르다.
        

        /* comment. Wrapper 클래스에 대해 이해할 수 있다. */
        /* 기본타입       래퍼클래스
        *  byte           Byte
        *  short          Short
        *  int            Integer
        *  long           Long
        *  float          Float
        *  double         Double
        *  char           Character
        *  boolean        Boolean
        * */

        /* 박싱(Boxing) 언박싱(UnBoxing)
        *  기본타입을 래퍼클래스의 인스턴스로 인스턴스화 하는 것을 박싱(Boxing)이라고 하며,
        *  래퍼클래스 타입의 인스턴스를 기본 타입으로 변경하는 것을 언박싱(UnBoxing)이라고 한다.
        * */

        int intValue = 20;
        Integer boxingNumber1 = Integer.valueOf(intValue);  // 박싱

        int unBoxingNumber1 = boxingNumber1.intValue();     // 언박싱

        /* 오토 박싱과 오토 언박싱 */
        Integer boxingNumber2 = intValue;       // 오토 박싱

        int unBoxingNumber2 = boxingNumber2;    // 오토 언박싱

        
        /* comment. time 패키지에서 제공하는 클래스들의 사용 용법을 이해할 수 있다. */
        /* java.time
        *     ㄴ java.time.zone : 시간대에 관련된 기능 제공
        *  LocalTime, LocalDate, LocalDateTime, ZonedDateTime 클래스들이 있다.
        * */

