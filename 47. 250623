- 프로젝트 기획
- 코드 공부 
- 일단 쿼리문을 공부해야함, 쿼리문 작성을 잘 모르겠음.. 

JPQL(Java Persistence Query Language)
- JPQL은 엔터티 객체를 중심으로 개발할 수 있는 객체 지향 쿼리

  1-1. 기본 문법
  - SELECT , UPDATE , DELETE 등의 키워드 사용은 SQL과 동일하다. INSERT 는 persist() 메소드를 사용하면 된다. 
  - 키워드는 대소문자를 구분하지 않지만, 엔터티와 속성은 대소문자를 구분함에 유의한다. 엔터티 별칭을 필수로 사용해야 하며 별칭 없이 작성하면 에러가 발생한다.
  JPQL 사용 방법은 다음과 같다.
    1. 작성한 JPQL(문자열)을 entityManager.createQuery() 메소드를 통해 쿼리 객체로 만든다.
    2. 쿼리 객체는 TypedQuery , Query 두 가지가 있다.
      a. TypedQuery : 반환할 타입을 명확하게 지정하는 방식일 때 사용하며 쿼리 객체의 메소드 실행 결과로 지정한 타입이 반환 된다.
      b. Query : 반환할 타입을 명확하게 지정할 수 없을 때 사용하며 쿼리 객체 메소드의 실행 결과로 Object 또는 Object[]이 반환 된다.
    3. 쿼리 객체에서 제공하는 메소드 getSingleResult() 또는 getResultList() 를 호출해서 쿼리를 실행하고 데이터 베이스를 조회한다.
      a. getSingleResult() : 결과가 정확히 한 행일경우 사용하며 없거나 많으면 예외가 발생한다.
      b. getResultList() : 결과가 2행 이상일 경우 사용하며 컬렉션을 반환한다. 결과가 없으면 빈 컬렉션을 반환한다.

1. TypedQuery: 타입 안정성을 갖춘 조회
목적: 조회 결과의 타입을 명확히 알 때 사용합니다. 반환받을 객체 타입을 지정하므로 불필요한 형변환이 없고, 컴파일 시점에 타입 오류를 잡을 수 있어 안전합니다.

// Member.class 라는 반환 타입을 명확히 지정
TypedQuery<Member> query = em.createQuery("SELECT m FROM Member m", Member.class);
List<Member> members = query.getResultList();

2. Query: 동적 또는 복합 결과 조회
목적: 여러 엔티티나 특정 컬럼만 조회하여 반환 타입이 명확하지 않을 때 사용합니다. 결과는 Object 또는 Object[]로 반환되므로 적절한 형변환이 필요합니다.

// 회원의 이름(String)과 나이(Integer)만 조회
Query query = em.createQuery("SELECT m.username, m.age FROM Member m");
List<Object[]> resultList = query.getResultList();

3. getSingleResult(): 단일 결과 조회
목적: 조회 결과가 정확히 하나라고 확신할 때 사용합니다. 결과가 없으면 NoResultException, 두 개 이상이면 NonUniqueResultException이 발생하므로 예외 처리가 필수적입니다.

try {
    Member member = em.createQuery("SELECT m FROM Member m WHERE m.id = :id", Member.class)
                      .setParameter("id", 1L)
                      .getSingleResult();
} catch (NoResultException e) {
    // 결과 없음
}

4. getResultList(): 다중 결과 조회
목적: 조회 결과가 여러 개일 때 사용합니다. 결과가 없어도 예외가 발생하지 않고 비어 있는 리스트(List)를 반환하여 안정적입니다.

TypedQuery<Member> query = em.createQuery("SELECT m FROM Member m WHERE m.age > :age", Member.class);
query.setParameter("age", 20);
List<Member> members = query.getResultList(); // 결과가 없으면 empty list 반환

5. 파라미터 바인딩 (setParameter)
목적: SQL 인젝션 공격을 방지하고 성능을 최적화하기 위해 사용합니다. 쿼리문에 이름 기반(:name) 또는 위치 기반(?1)으로 파라미터를 선언하고 값을 동적으로 설정합니다. 이름 기반 파라미터 사용을 권장합니다.

// 이름 기반 파라미터 바인딩
String usernameParam = "사용자1";
Member member = em.createQuery("SELECT m FROM Member m WHERE m.username = :username", Member.class)
                  .setParameter("username", usernameParam)
                  .getSingleResult();

6. SELECT NEW: DTO로 직접 조회
목적: 엔티티 전체가 아닌, 화면에 필요한 특정 데이터만 담은 DTO(Data Transfer Object)로 직접 조회하여 성능을 최적화합니다. JPQL에서 new 키워드와 함께 DTO의 전체 클래스 경로를 지정합니다.

// MemberDto(username, age) 생성자를 호출하여 바로 DTO 리스트를 받음
String jpql = "SELECT new com.example.MemberDto(m.username, m.age) FROM Member m";
List<MemberDto> dtoList = em.createQuery(jpql, MemberDto.class).getResultList();

7. FETCH JOIN: 성능 최적화를 위한 연관 엔티티 동시 조회
목적: N+1 문제를 해결하기 위한 가장 효과적인 방법입니다. 연관된 엔티티를 함께 조회하여 별도의 추가 쿼리가 발생하는 것을 방지합니다.

// Member를 조회하면서 연관된 Team도 함께 즉시 로딩 (별도의 팀 조회 쿼리 없음)
String jpql = "SELECT m FROM Member m JOIN FETCH m.team";
List<Member> members = em.createQuery(jpql, Member.class).getResultList();

8. DISTINCT: 중복 제거
목적: 조회 결과에서 중복된 데이터를 제거합니다. 특히 JOIN으로 인해 데이터가 뻥튀기될 때 유용하게 사용됩니다.

// 중복된 팀 이름을 제거하여 조회
List<String> teamNames = em.createQuery("SELECT DISTINCT t.name FROM Team t", String.class)
                           .getResultList();

9. IN 연산자: 여러 값 중 하나와 일치 여부 확인
목적: WHERE 절에서 특정 컬럼의 값이 주어진 목록(Collection)에 포함되는지 확인할 때 사용합니다. 여러 개의 OR 조건을 간결하게 대체할 수 있습니다.

List<String> names = List.of("회원1", "회원3", "회원5");
List<Member> members = em.createQuery("SELECT m FROM Member m WHERE m.username IN :names", Member.class)
                         .setParameter("names", names)
                         .getResultList();

10. LIKE 연산자: 문자열 패턴 검색
목적: 문자열 컬럼에서 특정 패턴을 포함하는 데이터를 검색합니다. %(여러 문자), _(한 문자) 와일드카드를 사용합니다.

// '김'으로 시작하는 모든 회원 검색
List<Member> members = em.createQuery("SELECT m FROM Member m WHERE m.username LIKE :pattern", Member.class)
                         .setParameter("pattern", "김%")
                         .getResultList();

