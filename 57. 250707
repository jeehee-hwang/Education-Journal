React redux-middleware
React redux-toolkit

===========================
redux-logger

1. Redux Middleware (리덕스 미들웨어) ⚙️
**미들웨어(Middleware)**는 리덕스에서 액션(Action)이 디스패치(Dispatch)되어 리듀서(Reducer)에 도달하기 전에 추가적인 작업을 할 수 있도록 중간에서 가로채는 함수입니다.

왜 사용하나요?
리덕스의 기본 흐름은 동기적(Synchronous)입니다. 하지만 실제 애플리케이션에서는 비동기 작업이 필수적입니다. 미들웨어는 이러한 비동기 처리를 가능하게 하는 핵심적인 역할을 합니다.

비동기 통신: 서버 API 호출과 같은 비동기 작업을 처리할 때 사용합니다. (e.g., redux-thunk, redux-saga)

로깅: 액션이 디스패치될 때마다 콘솔에 로그를 남겨 디버깅을 용이하게 합니다.

라우팅: 특정 액션이 발생했을 때 페이지를 이동시키는 등 라우팅 관련 작업을 처리합니다.

문법 및 활용법 (redux-thunk 기준)
redux-thunk는 가장 직관적이고 인기 있는 미들웨어 중 하나로, 액션 생성자가 함수를 반환할 수 있게 해줍니다.

설치: npm install redux-thunk

스토어에 적용:

JavaScript
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import rootReducer from './reducers';

// applyMiddleware를 사용해 스토어에 thunk 미들웨어를 적용
const store = createStore(rootReducer, applyMiddleware(thunk));

비동기 액션 생성자 작성:

// 일반적인 액션 생성자는 객체를 반환
const fetchDataRequest = () => ({ type: 'FETCH_DATA_REQUEST' });

// thunk를 사용한 비동기 액션 생성자는 함수를 반환
// 이 함수는 dispatch와 getState를 인자로 받음
const fetchData = () => {
  return (dispatch, getState) => {
    dispatch(fetchDataRequest()); // 로딩 시작을 알림
    fetch('https://api.example.com/data')
      .then(res => res.json())
      .then(data => dispatch({ type: 'FETCH_DATA_SUCCESS', payload: data }))
      .catch(error => dispatch({ type: 'FETCH_DATA_FAILURE', error }));
  };
};

컴포넌트에서는 dispatch(fetchData())처럼 호출하여 비동기 작업을 시작할 수 있습니다.

===========================
redux-toolkit
**Redux Toolkit(RTK)**은 리덕스 팀이 공식적으로 권장하는 리덕스 개발 도구 모음입니다. 복잡하고 장황했던 기존 리덕스의 단점을 해결하고, 훨씬 간결하고 효율적으로 코드를 작성할 수 있게 해줍니다.

왜 사용하나요?
RTK는 리덕스 개발의 **"Best Practice"**를 담고 있어, 개발자가 더 쉽고 빠르게 상태 관리를 할 수 있도록 돕습니다.

보일러플레이트(Boilerplate) 코드 대폭 감소: 액션 타입, 액션 생성자, 리듀서를 따로 만들 필요 없이 한 번에 정의합니다.

간결한 스토어 설정: configureStore 하나로 미들웨어(thunk 포함), Redux DevTools 확장 프로그램 등이 자동으로 설정됩니다.

불변성 관리 용이: 내부적으로 Immer 라이브러리를 사용하여, state.value += 1처럼 직접 상태를 수정하는 것처럼 코드를 작성해도 안전하게 불변성을 유지해 줍니다.

문법 및 활용법
설치: npm install @reduxjs/toolkit react-redux

createSlice로 리듀서와 액션 생성:
createSlice는 리덕스 상태의 한 조각(slice)을 만드는 핵심 기능입니다.

JavaScript

// features/counter/counterSlice.js
import { createSlice } from '@reduxjs/toolkit';

const counterSlice = createSlice({
  name: 'counter', // 슬라이스 이름
  initialState: { value: 0 }, // 초기 상태
  // 리듀서 로직 (액션 생성자도 자동으로 만들어짐)
  reducers: {
    increment: (state) => {
      // Immer 덕분에 state를 직접 수정하는 것처럼 코드를 작성 가능
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload; // payload로 전달된 값 사용
    },
  },
});

// 액션 생성자들을 export
export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// 리듀서를 export
export default counterSlice.reducer;
configureStore로 스토어 생성:

JavaScript

// app/store.js
import { configureStore } from '@reduxjs/toolkit';
import counterReducer from '../features/counter/counterSlice';

export const store = configureStore({
  reducer: {
    // 여기에 각 슬라이스의 리듀서를 추가
    counter: counterReducer,
  },
  // thunk 미들웨어는 기본적으로 포함되어 있음
});
createSlice가 액션 타입, 액션 생성자, 리듀서 로직을 모두 자동으로 만들어주므로 코드량이 획기적으로 줄어듭니다.

