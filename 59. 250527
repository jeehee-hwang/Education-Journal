* Integer, int 차이점
* crud를 잘 알아 둘것! 


    <!-- <if> 태그 : test 속성의 조건에 해당할 때만 엘리먼트 구문을 쿼리에 포함한다. -->
    <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
             A.MENU_CODE
           , A.MENU_NAME
           , A.MENU_PRICE
           , A.CATEGORY_CODE
           , A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE ORDERABLE_STATUS = 'Y'
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
           AND A.MENU_PRICE < #{ price }
            ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            AND A.MENU_PRICE BETWEEN 10000 AND #{ price }
        </if>
        <if test="price gt 20000 and price lte 30000">
            AND A.MENU_PRICE BETWEEN 20000 AND #{ price }
        </if>
        <if test="price gt 30000">
            AND A.MENU_PRICE BETWEEN 30000 AND #{ price }
        </if>
        ORDER BY A.MENU_CODE
    </select>

    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
             A.MENU_CODE
           , A.MENU_NAME
           , A.MENU_PRICE
           , A.CATEGORY_CODE
           , A.ORDERABLE_STATUS
          FROM TBL_MENU A
        <if test="condition == 'category'">
          JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        </if>
         WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="condition == 'name'">
           AND A.MENU_NAME LIKE CONCAT('%', #{ value }, '%')
        </if>
        <if test="condition == 'category'">
           AND B.CATEGORY_NAME = #{ value }
        </if>
         ORDER BY A.MENU_CODE
    </select>

    <!-- <choose>(when/otherwise) 태그 : java의 switch-case처럼 역할을 한다.
        <choose>
            <when test = "(조건)">
                쿼리구문
            </when>
            ...
            <otherwise>
                쿼리구문
            </otherwise>
        </choose>

        <when> 태그 test 속성 조건에 부합하면 <when> 엘리먼트 구문을 쿼리에 포함한다.
        어떠한 when 조건도 만족하지 못하면 <otherwise> 엘리먼트 구문을 쿼리에 포함한다.
    -->
    <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
              A.MENU_CODE
            , A.MENU_NAME
            , A.MENU_PRICE
            , A.CATEGORY_CODE
            , A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
        <choose>
            <when test="value == '식사'">
           AND A.CATEGORY_CODE IN (4,5,6,7)
            </when>
            <when test="value == '음료'">
           AND A.CATEGORY_CODE IN (8,9,10)
            </when>
            <otherwise>
           AND A.CATEGORY_CODE IN (11,12)
            </otherwise>
        </choose>
       ORDER BY A.MENU_CODE
    </select>

    <!-- <foreach> 태그 : java의 for문처럼 역할을 한다.
                      1. collection 속성 : 반복을 수행할 대상
                      2. item 속성 : 반복을 수행할 때마다 꺼내올 값의 이름 설정
                      3. open 속성 : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
                      4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어갈 문자
                      5. close 속성 : <foreach> 엘리먼트 구문의 마지막에 올 문자
    -->
    <select id="searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
               A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE 1 = 1
           AND A.MENU_CODE IN
        <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator=", " close=")">
            #{ menuCode }
        </foreach>
    </select>

    <!--
    <where> 태그 : 엘리먼트 구문이 where로 시작하지 않으면 자동으로 where를 붙여준다.
                  또한 where엘리먼트 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where를 무시한다.
                  단, name 부분에 where를 빼주지 않으면 where where로 where이 2개 생성될 수 있다.
                  엘리먼트 구분이 AND나 OR로 시작하면 자동으로 해당 단어를 지워준다.

    <trim> 태그 : 조회 조건에 AND 혹은 OR로 시작하지 않는 다른 문자로 시작하는 경우 등
                  where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해 trim 엘리먼트를 제공한다.
                  1. prefix(접두사) 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
                  2. prefixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 앞에 속성값이 해당하는 문자를 자동 삭제
                  3. suffix(접미사) 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
                  4. suffixOveeirdes 속성 : 처리 후 엘리먼트 내용 중 가장 뒤에 속성값이 해당하는 문자를 자동 삭제
    -->

    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
               A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
          FROM TBL_MENU A
        <if test="condition != null and condition eq 'menuCode'">
            <where>
                A.MENU_CODE = #{ value }
            </where>
        </if>
    </select>

    <select id="searchMenuByNameOrCategory" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
              A.MENU_CODE
            , A.MENU_NAME
            , A.MENU_PRICE
            , A.CATEGORY_CODE
            , A.ORDERABLE_STATUS
          FROM TBL_MENU A
        <!-- 문제 발생 상황 : 카테고리로만 조회하는 경우 WHERE가 붙지 않아 쿼리 오류로 조회 불가하다.
        <if test="nameValue != null">
         WHERE A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
        </if>
        <if test="categoryValue != null">
           AND A.CATEGORY_CODE = #{ categoryValue }
        </if> -->

        <!-- 해결방법 1 : <where> 태그 이용 -->
        <!--<where>
            <if test="nameValue != null">
                A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </where>-->

        <!-- 해결방법 2 : <trim> 태그 이용 -->
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </trim>
    </select>

    <!-- <set> 태그 : set 엘리먼트 구문이 있으면 SET을 자동으로 추가한다. -->
    <update id="modifyMenu" parameterType="hashmap">
        <!--UPDATE
               TBL_MENU
           SET MENU_NAME = #{ name }
             , ORDERABLE_STATUS = #{ orderableStatus }
         WHERE MENU_CODE = #{ code }-->

        <!--UPDATE
               TBL_MENU
        <if test="name != null and name != ''">
           SET MENU_NAME = #{ name }
        </if>
        <if test="orderableStatus != null and orderableStatus != ''">
            , ORDERABLE_STATUS = #{ orderableStatus }
        </if>
        WHERE MENU_CODE = #{ code }-->

        <!-- 해결방안 1: <set> 태그 이용 -->
        <!--UPDATE
               TBL_MENU
        <set>
            <if test="name != null and name != ''">
                MENU_NAME = #{ name }
            </if>
            <if test="orderableStatus != null and orderableStatus != ''">
                , ORDERABLE_STATUS = #{ orderableStatus }
            </if>
            WHERE MENU_CODE = #{ code }
        </set>-->

        <!-- 해결방안 2: <trim> 태그 이용 -->
        UPDATE
               TBL_MENU
        <trim prefix="SET" prefixOverrides=",">
            <if test="name != null and name != ''">
                , MENU_NAME = #{ name }
            </if>
            <if test="orderableStatus != null and orderableStatus != ''">
                , ORDERABLE_STATUS = #{ orderableStatus }
            </if>
        </trim>
            WHERE MENU_CODE = #{ code }
    </update>
</mapper>



 <!--
    1. DB에서 조회한 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트이다.
    2. resultMap 엘리먼트는 MyBatis에서 가장 중요하고 강력한 엘리먼트이다.
    3. ResultSet에서 데이터를 가져올 때 작성되는 JDBC 코드를 줄여주는 역할을 한다.
       실제로 join 매핑과 같은 복잡한 코드는 굉장히 많은 코드가 필요한데,
       ResultMap은 간단한 구문에서는 매핑이 필요하지 않고 복잡한 구문에서 관계를 서술하기 위해 필요하다.
    ==========================================================================================
    <resultMap 엘리먼트 속성>
    1. id : 매핑 구문에서 결과 매핑을 사용할 때 구분하기 위한 ID이다.
    2. type : 결과 매핑을 적용하는 대상 객체 타입을 의미한다.
    3. extends : 자바의 상속처럼 기존에 정의된 매핑 결과를 상속받아 추가적인 매핑 정보로 확장할 때 사용한다
    4. autoMapping : 결과 매핑을 자동 매핑을 할 것인지를 결정한다.
                     auto 매핑 설정은 동일한 컬럼명이 있는 경우 위험성을 가지기 때문에 사용하지 않는 것이 안전하다.
    -->
    <resultMap id="menuResultMap1" type="com.ohgiraffers.common.MenuDTO" autoMapping="false">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
    </resultMap>

    <resultMap id="menuResultMap2" type="com.ohgiraffers.common.MenuDTO" extends="menuResultMap1">
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <select id="selectResultMapTest" resultMap="menuResultMap2">
        SELECT
               A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
    </select>

    <!--
        <resultMap>의 하위 엘리먼트
        <id> : primary key 컬럼을 매핑하기 위한 태그이다.
        <result> : pk가 아닌 일반 컬럼을 매핑하기 위한 태그이다.
        <constructor> : 인스턴스화 되는 클래스의 생성자에 결과를 삽입하기 위해 사용한다. <idArg>, <arg> 하위 엘리먼트가 있다.
        <association> : 복잡한 타입의 연관관계로 1:1 포함관계인 경우 사용한다.
        <collection> : 복잡한 타입의 연관관계로 1:다 포함관계인 경우 사용한다.
        <discriminator> : 조건에 따라 다른 resultMap이 매핑되도록 한다.
    -->

    <!-- <constructor> -->
    <resultMap id="menuResultMap3" type="com.ohgiraffers.common.MenuDTO">
        <!-- id, result 엘리먼트는 setter을 이용하기 때문에 property를 지정하지만 생성자는 순서와 타입을 맞춰서 사용해야 한다. -->
        <constructor>
            <idArg column="MENU_CODE" javaType="_int"/>
            <arg column="MENU_NAME" javaType="string"/>
            <arg column="MENU_PRICE" javaType="_int"/>
            <arg column="CATEGORY_CODE" javaType="_int"/>
            <arg column="ORDERABLE_STATUS" javaType="string"/>
        </constructor>
    </resultMap>

    <select id="selectResultMapConstructor" resultMap="menuResultMap3">
        SELECT A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
    </select>

    <!-- <association> -->
    <!-- 1. 따로 만든 resultMap을 사용하는 방법 -->
    <!--<resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.common.MenuAndCategoryDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        <association property="category" resultMap="categoryResultMap"/>
    </resultMap>

    <resultMap id="categoryResultMap" type="com.ohgiraffers.common.CategoryDTO">
        <id property="code" column="CATEGORY_CODE"/>
        <result property="name" column="CATEGORY_NAME"/>
        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
    </resultMap>-->

    <!-- 2. association 내에 id, result 작성하는 방법 -->
    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.common.MenuAndCategoryDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        <association property="category" javaType="com.ohgiraffers.common.CategoryDTO">
            <id property="code" column="CATEGORY_CODE"/>
            <result property="name" column="CATEGORY_NAME"/>
            <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        </association>
    </resultMap>

    <select id="selectResultMapAssociationTest" resultMap="menuAndCategoryResultMap">
        SELECT
               A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , B.CATEGORY_CODE
             , B.CATEGORY_NAME
             , B.REF_CATEGORY_CODE
             , A.ORDERABLE_STATUS
         FROM TBL_MENU A
         JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        WHERE A.ORDERABLE_STATUS = 'Y'
    </select>
</mapper>
