파이썬 - LLM 
* 객체, 변수, 리스트 등 용어 정리 및 개념 정리가 필요하다 


# 한줄 주석 

'''
여러줄 주석 1
'''

"""
여러줄 주석 2 
"""

# 1. 변수와 기본 타입 
team_name='오지라퍼스' #단어와 단어 사이를 _로 잇는 snake_case를 사용하는 것이 표준 
price = 123456 #int
is_active = True  # bool (논리형)
user_data = None # 값이 없음을 나타내는 NoneType ( java의 null )

#f-string - f문자열 {확인하고 싶은 변수명}
print(f"팀 이름: {team_name}")
print(f"가격 {price}")

# 2. List (java의 ArrayList) : 순서가 있는 가변 배열 
scores = [88, 95, 56]
print(f"점수리스트: {scores}, 첫 번째 점수: {scores[0]}")

scores.append(100) # 맨 뒤에 추가 / 가상의 공간에 
scores.insert(1, 70) # 1번 인덱스 위치에 70 삽입  / 내가 원하는 위치에 / 자바배열에서도 [0,1,2,3,4 ...] 시작은 0임 
print(f"추가 후 점수: {scores}")
last_score = scores.pop() #인덱스를 주지 않으면 맨 뒤 요소를 꺼내고 제거 
print(f"꺼낸 점수: {last_score}, 수정된 점수: {scores}")

# 3. Dictionary (java의 HashMap) : key-value 쌍의 가변 맵 
user = {'name': '홍길동', 'age':30}  # {key-value, key-value} 
print(f"사용자 정보: {user}, 이름:{user['name']}") #키를 사용해 벨류를 꺼냄 

user['job'] = '의적'  #새로 추가 
user['age'] = 32    #값 수정 30>32
print(f"수정된 정보: {user}")

#안전하게 값 조회하기: get() -> 키가 없어도 에러 대신 기본값 반환 
# .get(키, 기본값) -> 키가 없을 때 지정한 기본값을 안전하게 반환 
email = user.get('email', '정보 없음')
print(f"사용자 이메일: {email}")

users = [
    {'name' : '홍길동', 'age' : '30'}, 
    {'name' : '신사임당', 'age' : '45', 'job' : '아티스트'}, 
]

# 첫 번째 사용자의 이름에 접근 
print(f"첫 번째 사용자 이름: {users[0]['name']}")

# 4. 얕은 복사 / 깊은 복서 
# 원본 데이터를 지키려면 .copy()를 사용한 '깊은 복사'를 해야 한다. 
prices = [10000, 20000]

# [얕은 복사] > 주소값만 복사 
# prices_shallow_copy = prices
# prices_shallow_copy[0] = 9999
# print(f"[얕은 복사] 원본: {prices}")

# [깊은 복사] .copy()를 사용, 값 자체를 복사한 새 객체 생성 
new_prices = prices.copy()
new_prices[0] = 9999
print(f"[깊은 복사] 원본: {prices}, 복사본: {new_prices}")

===================

# 1. 문자열(str)의 핵심 기능 
# 슬라이싱: 문자열의 일부를 잘라낸다 
txt = "hello world"

#[시작인덱스:끝인덱스]
print(f"슬라이싱 [0:5]: {txt[:5]}") # 시작 생략 > 처웅부터
print(f"슬라이싱 [6:]: {txt[6:]}") # 끝을 생략 > 끝까지 
print(f"거꾸로: {txt[::-1]}") # step -1로 주면 문자열을 뒤집는다 

# .split() : 문자열을 특정 기준으로 나눠 리스트를 만든다. 
#csv 데이터를 콤마(,) 기준으로 나눌 때 사용한다. 
csv_data = "홍길동,20,서울"
user_list = csv_data.split(',')
print(f"split 결과: {user_list}, 이름: {user_list[0]}")

# 2. 제어문
score = 85
#파이썬은 들여쓰기 (스페이스 4번, 탭 한번)
if score >= 90:
    grade = 'A'
elif score >= 80:
    grade = 'B'
else:
    grade = 'F'
print(f"점수: {score}, 등급: {grade}")

# for문으로 리스트, 딕셔너리 순회 
foods = ['햄버거', '치킨', '피자']
for food in foods:
    print(f"오늘의 메뉴: {food}")

# items()는 키와, 밸류값을 한  쌍으로 꺼내준다 

user_info = {'name' : '이순신', 'age' : 45}
for key, value in user_info.items():
    print(f" -{key} : {value}")

prompt = f"사용자"    

==========================

# 1. List Compershension : 한 줄 for 문
# 기본 구조: [결과표현식 for 아이템 in 리스트 if 조건]

# 1부터 10까지 제곱수로 이루어진 리스트 만들기 
squares = [n**2 for n in range(1,11)]
print(f"제곱수 리스트: {squares}")

# 과일 리스트에서 5글자 이상인 과일만 필터링해서 대문자로 바꾸기
fruits = ['orange', 'apple', 'banana', 'kiwi', 'grape']
long_fruits = [fruit.upper() for fruit in fruits if len(fruit) >= 5 ]
print(f"긴 이름 과일(대문자) : {long_fruits}")

# 2. Dict Comprehension
# 기본 구조 : {키_표현식: 값_ 표현식 for 아이템 in 리스트}
student_names = ['홍길동', '신사임당', '이순신']
#이름: 이름길이 로 구성퇸 딕셔너리 만들기 
name_lenghts = {name: len(name) for name in student_names}
print(f"이름 길이: {name_lenghts}")

# 3. Lambda: 이름 없는 한 줄짜리 익명 함수 
add = lambda a, b: a + b
print(f"람다 함수 결과: {add(10, 20)}")

studenets = [
    {'name' : '홍길동', 'score' : 90}, 
    {'name' : '이순신', 'score' : 80}, 
    {'name' : '신사임당', 'score' : 95}
]

studenets.sort(key=lambda s: s['score'], reverse=True)
print(f"성적순 정렬: {studenets}")

==============================

간단 문제 

# 0.  아래 4개의 아이템 정보를 각각 딕셔너리로 만들어 inventory 리스트에 담으세요.
# - 아이템명: 'healing_potion', 타입: 'potion', 등급: 'common', 가격: 50
# - 아이템명: 'sword_of_legend', 타입: 'weapon', 등급: 'legendary', 가격: 10000
# - 아이템명: 'iron_shield', 타입: 'armor', 등급: 'rare', 가격: 1500
# - 아이템명: 'mana_potion', 타입: 'potion', 등급: 'common', 가격: 40

inventory = [
    { 'name' : 'healing_potion' , 'type' : 'potion','grade' : 'common', 'price' : 50},
    { 'name' : 'sword_of_legend' , 'type' : 'weapon', 'grade' : 'legendary', 'price' : 10000},
    { 'name' : 'iron_shield' , 'type' : 'armor','grade' : 'rare', 'price' : 1500}, 
    { 'name' : 'mana_potion' , 'type' : 'potion','grade' : 'common', 'price' : 40}
]

# 1.  for문과 if문을 사용해 인벤토리에서 타입(type)이 'potion'인 아이템들의
#  이름과 가격만 형식에 맞춰 출력하세요.
for item in inventory:
    if item['type'] == 'potion':
        print(f"물약 정보 : {item['name']} (가격: {item['price']} G)")


# 2. 등급(grade)이 'rare' 이상인 아이템들의 이름만 뽑아서 새로운 리스트를 만드세요. 
# 이때, List Comprehension을 사용해서 단 한 줄로 해결해 보세요.

#valuable_items = {item['name'] for 'grade' in  if 'rare' and 'legendary' } > 내가 짠 코드 
valuable_items = [item['name'] for item in inventory if item['grade'] in ['rare', 'legendary']] > 수정
print(items_to_sell)
print(valuable_items)

# 3. 인벤토리의 모든 아이템을 가격(price)이 비싼 순서대로 정렬하여 출력하세요.
#  list.sort() 메서드와 lambda 함수를 사용합니다.

items_to_sell = inventory.copy()
# items_to_sell.sort(key=lambda s: s['price']) > 내가 짠 코드 
items_to_sell.sort(key=lambda item: item['price'], reverse=True) > 수정
print(items_to_sell)




