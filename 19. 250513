* 예외처리, 오류, 컬렉션 프레임워크 
* 컬렉션 프레임워크에 대해서는 꼭 알아두자 (반복 숙지 필요) 

* 수업 진도  chap12/ section01 ~ chap13/ section01

/* comment. 컬렉션 프레임워크에 대해 이해할 수 있다.
        *  컬렉션 프레임워크는 데이터를 효율적으로 저장하는 자료구조와
        *  데이터를 처리하는 알고리즘을 미리 구현해놓은 클래스이다.
        * */

        /* Collection Framework는 크게 3가지 인터페이스 중 한 가지를 상속받아 구현해 놓았다.
        *  1. List 인터페이스
        *  2. Set 인터페이스
        *  3. Map 인터페이스
        *
        *
        *  각 인터페이스 별 특징
        *  1. List 인터페이스
        *  - 순서 있는 데이터 집합으로 데이터의 중복 저장을 허용한다.
        *  - Vector, ArrayList, LinkedList, Stack, Queue 등이 있다.
        *  2. Set 인터페이스
        *  - 순서가 없는 데이터 집합으로 데이터의 중복을 허용하지 않는다.
        *  - HashSet, TreeSet 등이 있다.
        *  3. Map 인터페이스
        *  - 키와 값 한 쌍으로 이루어지는 데이터 집합이다.
        *  - key를 Set 방식으로 관리하기 때문에 데이터의 순서를 관리하지 않고 중복된 key를 허용하지 않는다.
        *  - value는 중복된 값을 저장할 수 있다.
        *  - HashMap, TreeMap, HashTable, Properties 등이 있다.
        * */

        /* ArrayList
        * 가장 많이 사용되는 컬렉션 클래스이다.
        * 내부적으로 배열을 이용하여 요소를 관리하며, 인덱스를 이용해 배열 요소에 빠르게 접근할 수 있다.
        *
        * ArrayList는 배열의 단점을 보완하기 위해 만들어졌다.
        * 배열은 크기를 변경할 수 없고, 요소의 추가, 삭제, 정렬 등이 복잡하다는 단점을 가지고 있다.
        * ArrayList는 저러한 배열의 단점을 보완하고자
        * 크기 변경, 요소의 추가, 삭제, 정렬 기능들을 미리 메소드로 구현해서 제공하고 있다.
        * 자동적으로 수행되는 것이지 속도가 빨라지는 것이 아니다.
        * */
        ArrayList alist = new ArrayList();

        List list = new ArrayList();

        Collection clist = new ArrayList<>();

        alist.add("apple");
        alist.add(123);
        alist.add(45.34);
        alist.add(new Date());

        System.out.println(alist);

        System.out.println(alist.size());

        for(int i = 0; i < alist.size(); i++) {
            System.out.println(i + " : " + alist.get(i));
        }

        // 데이터의 중복 저장을 허용
        alist.add("apple");
        System.out.println(alist);

        alist.add(1, "banana");
        System.out.println(alist);

        // 값을 삭제할 때
        alist.remove(2);
        System.out.println(alist);

        // 값을 수정할 때
        alist.set(1, Boolean.valueOf(true));
        System.out.println(alist);

        List<String> stringList = new ArrayList<>();
        stringList.add("apple");
//        stringList.add(123);
        stringList.add("banana");
        stringList.add("orange");
        stringList.add("mango");
        stringList.add("grape");

        System.out.println(stringList);

        // 오름차순 정렬
        Collections.sort(stringList);

        System.out.println(stringList);

        stringList = new LinkedList<>(stringList);

        /* Iterator 반복자 인터페이스를 활용해서 역순으로 정렬한다.
        * LinkedList 타입으로 형변환 한 후 descendingIterator() 메소드를 사용하면
        * 내림차순 정렬된 Iterator 타입의 목록으로 반환을 해 준다.
        *
        * Iterator란?
        * Collection 인터페이스의 iterator() 메소드를 이용해서 인스턴스를 생성할 수 있다.
        * 컬렉션에서 값을 읽어오는 방식을 통일된 방식으로 제공하기 위해 사용한다.
        * 반복자 라고 불리우며, 반복문을 이용해서 목록을 하나씩 꺼내는 방식으로 사용하기 위함이다.
        * 인덱스로 관리되는 컬렉션이 아닌 경우에는 반복문을 사용해서 요소에 하나씩 접근할 수 없기 때문에
        * 인덱스를 사용하지 않고도 반복문을 사용하기 위한 목록을 만들어주는 역할이라고 보면 된다.
        * hasNext() : 다음 요소를 가지고 있는 경우 true, 더 이상 요소가 없는 경우 false 반환
        * next() : 다음 요소를 반환
        * */
        Iterator<String> dIter = ((LinkedList<String>) stringList).descendingIterator();

//        while (dIter.hasNext()) {
//            System.out.println(dIter.next());
//        }

        List<String> descList = new ArrayList<>();
        while (dIter.hasNext()) {
           descList.add(dIter.next());
        }
        System.out.println(descList);
    }
}

  /* comment. Set 자료구조의 특성을 이해하고 HashSet을 이해할 수 있다. */
        /* Set 인터페이스를 구현한 Set 클래스의 특징
        *  1. 요소의 저장 순서를 유지하지 않는다.
        *  2. 같은 요소의 중복 저장을 허용하지 않는다. (null값도 중복하지 않게 하나의 null만 저장한다.)
        *
        *
        * HashSet 클래스
        * Set 컬렉션 클래스에서 가장 만힝 사용되는 클래스 중 하나이다.
        * 해시 알고리즘을 사용하여 검색 속도가 빠르다는 장점을 가진다.
        * */

        HashSet<String> hset = new HashSet<>();

//        Set hset2 = new HashSet();
//        Collection hset3 = new HashSet<>();

        hset.add("java");
        hset.add("oracle");
        hset.add("jdbc");
        hset.add("html");
        hset.add("css");

        System.out.println(hset);

        hset.add("java");

        System.out.println(hset);
        System.out.println(hset.size());
        System.out.println(hset.contains("oracle"));

        /* 저장된 객체를 하나씩 꺼내는 기능이 없다.
        * 반복문을 이용해서 연속처리하는 방법 2가지가 있다. */

        /* 1. toArray()배열로 바꾸고 반복문 사용 */
        Object[] arr = hset.toArray();
        for(int i = 0; i < arr.length; i++) {
            System.out.println(i + " : " + arr[i]);
        }

        /* 2. iterator()로 목록 만들어 연속 처리 */
        Iterator<String> iter = hset.iterator();

        while (iter.hasNext()) {
            System.out.println(iter.next());
        }

        hset.clear();
        System.out.println(hset.isEmpty());
    }
}

/* comment. LinkedHashSet에 대해 이해하고 사용할 수 있다. */
        /* LinkedHashSet 클래스
        *  HashSet이 가지는 기능을 모두 가지고 있고,
        *  추가적으로 저장 순서를 유지하는 특징을 가진다.
        * */
        LinkedHashSet<String> lhset = new LinkedHashSet<>();

        lhset.add("java");
        lhset.add("oracle");
        lhset.add("jdbc");
        lhset.add("html");
        lhset.add("css");

        System.out.println(lhset);

        TreeSet<String> tset = new TreeSet<>(lhset);
        System.out.println(tset);
    }
}

        /* comment. TreeSet에 대해 이해하고 사용할 수 있다. */
        /* TreeSet 클래스
        * 데이터가 정렬된 상태로 저장되는 이진 검색 트리의 형태로 요소를 저장한다.
        * 이진 검색 트리는 데이터를 추가하거나 제거하는 등의 기본 동작 시간이 매우 빠르다.
        * Set 인터페이스가 가지는 특징을 그대로 가지지만 정렬된 상태를 유지한다는 것이 다른 점이다.
        * */
        TreeSet<String> tset = new TreeSet<>();

//        Set<String> tset2 = new TreeSet<>();

        tset.add("java");
        tset.add("oracle");
        tset.add("jdbc");
        tset.add("html");
        tset.add("css");

        System.out.println(tset);

        Iterator<String> iter = tset.iterator();

        while (iter.hasNext()) {
            System.out.println(((String) iter.next()).toUpperCase());
        }

        Object[] arr = tset.toArray();

        for(Object obj : arr) {
            System.out.println(obj);
        }
    }
}

 /* comment. Map의 자료구조에 대해 이해하고 HashMap을 이용할 수 있다. */
        /* Map 인터페이스 특징
        * Collection 인터페이스와는 다른 저장 방식을 가진다.
        * 키(key)와 값(value)를 하나의 쌍으로 저장하는 방식을 사용한다.
        *
        *
        * 키(key)란?
        * 값(value)를 찾기 위한 역할을 하는 객체를 의미한다.
        * 1. 요소의 저장 순서를 유지하지 않는다.
        * 2. 키는 중복을 허용하지 않지만, 키가 다르면 중복되는 값은 저장 가능하다.
        *
        * HashMap, HashTable, TreeMap 등의 대표적인 클래스가 있다.
        * HashMap이 가장 많이 사용된다.
        * 해시 알고리즘을 사용하여 검색 속도가 매우 빠르다.
        * */

        HashMap hmap = new HashMap();
//        Map hmap2 = new HashMap<>();

        hmap.put("one", new Date());
        hmap.put(12, "red apple");
        hmap.put(33, 123);

        System.out.println(hmap);

        // 키는 중복 저장 되지 않음(set) : 최근 키로 override됨(덮어씀)
        hmap.put(12, "yellow banana");
        System.out.println(hmap);

        hmap.put(11, "yellow banana");
        hmap.put(9, "yellow banana");
        System.out.println(hmap);

        // 값 객체의 내용을 가져올 때 get()
        System.out.println("키 9에 대한 객체 : " + hmap.get(9));

        // 키 값을 가지고 삭제를 처리할 때
        hmap.remove(9);
        System.out.println(hmap);

        System.out.println(hmap.size());

        HashMap<String, String> hmap2 = new HashMap<>();

        hmap2.put("one", "java");
        hmap2.put("two", "oracle");
        hmap2.put("three", "jdbc");
        hmap2.put("four", "html");
        hmap2.put("five", "css");

        /* 1. keySet()을 이용해서 키만 따로 set으로 만들고, iterator() 키에 대한 목록을 만듦 */
        Iterator<String> keyIter = hmap2.keySet().iterator();

        while (keyIter.hasNext()) {
            String key = keyIter.next();
            String value = hmap2.get(key);
            System.out.println(key + " = " + value);
        }

        /* 2. 저장된 value객체들만 values()로 Collection으로 만듦 */
        Collection<String> values = hmap2.values();

        /* 2-1. Iterator()로 목록 만들어서 처리 */
        Iterator<String> valueIter = values.iterator();
        while (valueIter.hasNext()) {
            System.out.println(valueIter.next());
        }

        /* 2-2. 배열로 만들어서 처리 */
        Object[] valueArr = values.toArray();
        for(int i = 0; i < valueArr.length; i++) {
            System.out.println(i + " : " + valueArr[i]);
        }

        /* 3. Map의 내부클래스인 EntrySet을 이용 : entrySet() */
        Set<Map.Entry<String, String>> set = hmap2.entrySet();
        // Entry : 키 객체와 값 객체를 쌍으로 묶은 것
        Iterator<Map.Entry<String, String>> entryIter = set.iterator();
        while (entryIter.hasNext()) {
            Map.Entry<String, String> entry = entryIter.next();
            System.out.println(entry.getKey() + " : " + entry.getValue());
        }
    }
}


        /* comment. Properties에 대해 이해하고 사용할 수 있다. */
        /* properties란?
        * HashMap을 구현하여 사용 용법이 거의 유사하지만 key와 value 모두 문자열만 사용할 수 있는 자료구조이다.
        * 설정 파일의 값을 읽어서 어플리케이션에 적용할 때 사용한다.
        * */

        Properties prop = new Properties();

        prop.setProperty("driver", "oracle.jdbc.driver.OracleDriver");
        prop.setProperty("url", "jdbc:oracle:this:@127.0.0.1:1521:xe");
        prop.setProperty("user", "student");
        prop.setProperty("password", "student");

        System.out.println(prop);

        try {
            prop.store(new FileOutputStream("driver.dat"), "jdbc driver");
            prop.store(new FileWriter("driver.txt"), "jdbc driver");
            prop.storeToXML(new FileOutputStream("driver.xml"), "jdbc driver");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        Properties prop2 = new Properties();

        try {
            prop2.load(new FileInputStream("driver.dat"));
            prop2.load(new FileReader("driver.txt"));
            prop2.loadFromXML(new FileInputStream("driver.xml"));

            prop2.list(System.out);

            System.out.println(prop.getProperty("driver"));
            System.out.println(prop.getProperty("url"));
            System.out.println(prop.getProperty("user"));
            System.out.println(prop.getProperty("password"));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }}


        /* comment. 예외에 대해 이해하고 처리하기 위한 문법을 이용할 수 있다. */
        /* 예외처리
        *  자바 프로그램 작성 시 자바 문법에 맞지 않는 경우
        *  코드를 컴파일 하려고 할 때 컴파일 에러를 발생시킨다. 엄밀히 말하면 문법상의 오류 이다.
        *  혹은 자바 문법에 맞게 작상하여 컴파일에 문제가 없더라도, 실행되면서 예상치 못하게 오류가 발생할 수 있다.
        *  컴퓨터 프로그램이 동작하는 도중에 예상치 못한 사태가 발생하여
        *  실행중인 프로그램이 영향을 받는 것을 오류(Error)와 예외(Exception) 두 가지로 구분할 수 있다.
        *
        *  오류(Error)
        *  시스템 상에서 프로그램에 심각한 문제를 발생하여 실행중인 프로그램이 종료되는 것을 말한다.
        *  이러한 오류는 개발자가 미리 예측하여 처리하는 것이 불가능하며, 오류에 대한 처리는 할 수 없다.
        *
        *  예외(Exception)
        *  오류와 마찬가지로 실행중인 프로그램을 비정상적으로 종료시키지만
        *  발생할 수 있는 상황을 미리 예측하고 처리할 수 있는 미약한 오류를 말한다.
        *  개발자는 이러한 예외에 대해 예외처리를 통해 예외 상황을 적절히 처리하여 코드의 흐름을 컨트롤 할 수 있다.
        * */

        /* 강제로 예외를 발생
        *  - throw new 예외클래스명();
        *  예외 처리 방법
        *  1. throws로 위임
        *  2. try-catch로 처리
        * */

        /* 1. throws로 위임 */
        ExceptionTest et = new ExceptionTest();

        et.checkEnoughMoney(10000, 50000);
        et.checkEnoughMoney(50000, 10000);
    }
}

        /* comment. try-catch 블럭을 이용하여 예외처리를 할 수 있다. */
        /* 2. try-catch로 처리 */
        ExceptionTest et = new ExceptionTest();

        try {
            /* 예외 발생 가능성이 있는 메소드는 try 블럭 안에서 호출 */
            et.checkEnoughMoney(50000, 10000);

            /* 위의 메소드 호출 시 예외가 발생하지 않는 경우 이후 내용이 실행 */
            System.out.println("================ 상품 구입 가능 ==============");

        } catch (Exception e) {

            /* 위의 메소드 호출 시 예외가 발생하는 경우 catch 블럭의 코드가 실행 */
            System.out.println("================ 상품 구입 불가능 ===============");
        }


    public void checkEnoughMoney(int price, int money) throws Exception {

        System.out.println("가지고 있는 돈은 " + money + "원 입니다.");

        if(money >= price) {
            System.out.println("상품을 구입하기 위한 금액이 충분합니다.");
        } else {

            /* 강제로 예외를 발생
            *  예외 발생 시키고 메소드 헤드에 throws 구문 추가한다.
            *  예외를 발생시킨 쪽에서는 throws로 예외에 대한 책임을 위임해서
            *  해당 예외에 대한 처리를 강제화한다.
            * */
            throw new Exception();
        }


============== 문제 풀이 

import java.util.Scanner;

public class Solution {
    public static void main(String[] args) { 
        
// System.out.println("!@#$%^&* (\'\"<>?:;"); 
        System.out.println("!@#$%^&* ( \\ ' \" <>?:;");
        
    }
}
\를 캐릭터로 인식,  " 문자열로 인식하기 때문에 \," 앞에 \를 넣어줘야 한다. 
