* 상속
* 오버로딩, 오버라이 - 면접질문에 자주 나옴 

* 수업 진도 - 깃허브 (Java chap07 section02.uses  - chap08 section03.overriding )

/* comment. 객체배열(클래스 자료형 배열)을 매개변수와 리턴값으로 사용할 수 있다. */
  > class를 어떻게 사용하고 어떻게 넘어가는지 흐름을 알아둘 필요가 있음 

  /* comment. 상속에 대해 이해할 수 있다. */
        /* 상속?
        *  상속은 현실 세계의 상속과 비슷한 개념이다.
        *  부모가 가지고 있는 재산(자바에서는 클래스가 가지는 멤버)을 자식이 물려받는 의미이다.
        *  클래스 또한 부모클래스와 자식클래스로 역할을 나누어서 부모가 가지는 멤버를 자식이 물려받아
        *  자기의 멤버인 것 처럼 사용할 수 있도록 만든 기술이다.
        *
        *
        *  하지만 단순 물려받는 개념보다 조금 더 나아간다면
        *  자바에서의 상속은 부모클래스의 확장(extends)의 개념을 가진다.
        *  물려받아서 자신의 것 처럼 사용하는 것 뿐 아니라 추가적인 멤버도 작성이 가능하다.
        *  특히 메소드 재정의(overriding)라는 기술을 이용해서 부모가 가진 메소드를 재정의하는 것도 가능하다.
        *
        *
        *  메소드 재정의(overriding)이란 부모가 가지는 메소드 선언부를 그대로 사용하면서
        *  자식클래스가 정의한 메소드대로 동작하도록 구현 몸체 부분을 새롭게 다시 작성하는 기술이다.
        *  메소드 재정의를 하면 메소드를 호출할 시 재정의한 메소드가 우선적으로 동작하게 된다.
        *
        *  상속이라는 기술을 사용하게 되면 얻게되는 이점은 크게 두 가지로 볼 수 있다.
        *  1. 새로운 클래스를 작성할 시 기존에 작성한 클래스를 재사용할 수 있다.
        *   1-1. 재사용 시 생산성을 크게 향상시킬 수 있다. (새롭게 작성하는거보다 빠르다)
        *   1-2. 공통적으로 사용하는 코드가 부모클래스에 존재하면 수정사항이 생길 시 부모 클래스만 수정해도
        *        전체적으로 적용된다. (유지보수성 증가)
        *  2. 클래스간의 계층 관계가 형성되며 다형성의 문법적인 토대가 된다.
        *
        *
        *  하지만 상속으로 인한 단점도 존재한다.
        *  1. 부모클래스의 기능을 추가/변경할 시 자식클래스가 정상적으로 동작하는지에 대한 예측이 힘들다.
        *     상속 구조가 복잡해 질 수록 그 영향에 대한 예측이 힘들며 이런 단점이 유지보수성 증가한다는 장점과는
        *     반대로 유지보수에 악영향을 미친다.
        *  2. 또한 부모클래스의 변경 또한 쉽지 않다. 자식클래스에서 중요하게 사용하는 기능인 경우
        *     부모클래스를 변경할 시 자식 클래스에 모두 영향을 줄 수 있다.
        *     역시 유지보수에 악영향을 미친다.
        *  3. 부모클래스에서는 의미있었던 기능이 자식클래스에서는 무의미할 수 있다. (불필요한 기능이 추가됨)
        *
        *  장점과 단점을 고려했을 때,
        *  상속은 재사용이라는 장점만 바라보게 되면 오용의 가능성이 있기 때문에 유지보수에 좋지 않는 코드를 작성할 확률이 높다.
        *  상속은 IS-A 관계로 구분되는 경우에만 사용해야 한다.
        *
        *  객체 지향 설계 관점에서 바라보는 상속
        *  모든 객체는 자신이 수신한 메세지에 대해 응답을 해야하는 책임을 가지며, 그 책임의 규모는 적절해야한다.
        *  적절한 책임을 가진 객체들이 서로 메시지 수신과 응답을 통해 프로그램이 동작하는 것이 객체지향 프로그램이다.
        *
        *  적절한 책임을 수행하는 객체 또한 그 객체만 수행할 수 있는 기능이라기 보다 역할의 관점으로 바라봐야 한다.
        *  역할이란 동일한 동작을 수행하는 것을 정의한 것이며, 대체 가능성을 의미한다.
        *  부모클래스를 추상화 하는 경우에는 역할의 관점으로 바라봐야 한다.
        *  그래야 자식클래스로 생성한 객체들이 서로 역할을 수행해가며 유연한 코드를 작성할 수 있게 된다.
        *  동일한 역할을 가지는 모든 객체는 동일한 메시지를 수신하기만 하지만,
        *  객체별로 그 메시지에 응답하는 방식은 서로 다를 수 있다. (다형성)
        * */

        Car car = new Car();

        car.soundHorn();
        car.run();
        car.soundHorn();
        car.stop();
        car.soundHorn();

        FireCar fireCar = new FireCar();

        fireCar.soundHorn();
        fireCar.run();
        fireCar.soundHorn();
        fireCar.stop();
        fireCar.soundHorn();

//        fireCar.runningStatus;

        /* 상속은 확장이다. 추가적인 기능도 작성할 수 있다. */
        fireCar.sprayWater();

        RacingCar racingCar = new RacingCar();
        racingCar.soundHorn();
        racingCar.run();
        racingCar.soundHorn();
        racingCar.stop();
        racingCar.soundHorn();

    }
}

package com.ohgiraffers.section01.extend;

public class Car {

    private boolean runningStatus;

    public Car() {
        System.out.println("Car 클래스의 기본 생성자 호출됨...");
    }

    public void run() {

        runningStatus = true;
        System.out.println("자동차가 달립니다.");
    }

    public void soundHorn() {

        if(isRunning()) {
            System.out.println("빵! 빵!");
        } else {
            System.out.println("주행중이 아닌 상태에는 경적을 울릴 수 없습니다.");
        }
    }

    public boolean isRunning() {

        return runningStatus;
    }

    public void stop() {

        runningStatus = false;
        System.out.println("자동차가 멈춥니다.");
    }
}

package com.ohgiraffers.section01.extend;

public class FireCar extends Car {

    public FireCar() {

        /* 모든 생성자에는 맨 첫 줄에 super()를 컴파일러가 자동 추가한다.
        *  부모의 기본 생성자를 호출하는 구문이다.
        *  해당 생성자가 호출 될 시 가장 먼저 Car 클래스 호출 내용이 출력될 것이다.
        *  명시적, 묵시적 전부 사용 가능하다.
        * */
        super();

        System.out.println("FireCar 클래스의 기본 생성자 호출됨..");
    }

    /* @Override 어노테이션
    *  오버라이딩 성립 요건을 체크하여 성립되지 않는 경우 컴파일에러를 발생시킨다.
    *  오버라이딩 하는 메소드는 기본적으로 부모 메소드 선언 내용을 그대로 작성해야 한다.
    * */
    @Override
    public void soundHorn() {

        if(isRunning()) {
            System.out.println("빠아아아아앙!!!!!!!!!!!!!!!!!!");
        } else {
            System.out.println("소방차가 앞으로 갈 수 없습니다 비키세요~~~");
        }
    }

    public void sprayWater() {
        System.out.println("불난 곳을 발견했습니다. 물을 뿌립니다 ====================>>");
    }
}

package com.ohgiraffers.section01.extend;

public class RacingCar extends Car {

    public RacingCar() {

        System.out.println("RacingCar 클래스 기본 생성자 호출됨..");
    }

    @Override
    public void run() {

        System.out.println("레이싱카가 전속력으로 질주합니다!!!!!!!!!!!!!!!!");
    }

    @Override
    public void soundHorn() {

        System.out.println("레이싱카는 경적을 울리지 않습니다. (조용..)");
    }

    @Override
    public void stop() {

        System.out.println("레이싱카가 멈춥니다..");
    }
}

package com.ohgiraffers.section02.superkeyword;

public class Application {

    public static void main(String[] args) {

        /* comment. super와 super()에 대해 이해할 수 있다. */
        /* super : 자식클래스를 이용해서 객체를 생성할 때 부모생성자를 호출하여 부모클래스의 인스턴스도 함께 생성하게 된다.
        *          이 때 생성한 부모의 인스턴스 주소를 보관하는 레퍼런스 변수로
        *          자식 클래스 내의 모든 생성자와 메소드 내에서 선언하지 않고도 사용할 수 있는 레퍼런스 변수이다.
        *
        *  super() : 부모 생성자를 호출하는 구문으로 인자와 매개변수의 타입, 순서, 갯수가 일치하는
        *            부모의 생성자를 호출하게 된다.
        *            this()가 해당 클래스 내의 다른 생성자를 호출하는 구문이라면,
        *            super()는 부모클래스가 가지는 private 생성자를 제외한 나머지 생성자를
        *            호출할 수 있도록 한 구문이다.
        * */
        Product product1 = new Product();
        System.out.println(product1.getInformation());

        Product product2 = new Product("S-01234", "삼성", "갤럭시Z폴드", 2398000, new java.util.Date());
        System.out.println(product2.getInformation());

        Computer computer1 = new Computer();
        System.out.println(computer1.getInformation());

        Computer computer2 = new Computer("퀼컴 스냅드래곤", 512, 12, "안드로이드");
        System.out.println(computer2.getInformation());

        Computer computer3 = new Computer("S-01234", "삼성", "갤럭시Z폴드", 2398000, new java.util.Date(),
                "퀼컴 스냅드래곤", 512, 12, "안드로이드");
        System.out.println(computer3.getInformation());
    }
}
package com.ohgiraffers.section02.superkeyword;

import java.util.Date;

public class Computer extends Product {

    private String cpu;
    private int hdd;
    private int ram;
    private String operationSystem;

    public Computer() {

        System.out.println("Computer 클래스의 기본 생성자 호출함..");
    }

    /* 모든 필드를 초기화하는 생성자 */
    public Computer(String cpu, int hdd, int ram, String operationSystem) {

        this.cpu = cpu;
        this.hdd = hdd;
        this.ram = ram;
        this.operationSystem = operationSystem;

        System.out.println("Computer 클래스의 모든 필드를 초기화하는 생성자 호출함..");
    }

    /* 부모의 필드도 모두 초기화하는 생성자 */
    public Computer(String code, String brand, String name, int price, Date manufacturingDate,
                    String cpu, int hdd, int ram, String operationSystem) {

        /* 부모가 가진 필드를 초기화 할 값 전달 */
        super(code, brand, name, price, manufacturingDate);

        /* 나머지 필드를 초기화 */
        this.cpu = cpu;
        this.hdd = hdd;
        this.ram = ram;
        this.operationSystem = operationSystem;

        System.out.println("Computer 클래스의 부모 필드를 초기화하는 생성자 호출함..");
    }

    public String getCpu() {
        return cpu;
    }

    public void setCpu(String cpu) {
        this.cpu = cpu;
    }

    public int getHdd() {
        return hdd;
    }

    public void setHdd(int hdd) {
        this.hdd = hdd;
    }

    public int getRam() {
        return ram;
    }

    public void setRam(int ram) {
        this.ram = ram;
    }

    public String getOperationSystem() {
        return operationSystem;
    }

    public void setOperationSystem(String operationSystem) {
        this.operationSystem = operationSystem;
    }

    @Override
    public String getInformation() {

        return super.getInformation()
                + "Computer ["
                + "cpu=" + this.cpu
                + ", hdd=" + this.hdd
                + ", ram=" + this.ram
                + ", operationSystem=" + this.operationSystem
                + "]";
    }
}

package com.ohgiraffers.section02.superkeyword;

import java.util.Date;

public class Product {

    private String code;        // 상품코드
    private String brand;
    private String name;
    private int price;
    private Date manufacturingDate;

    public Product() {

        System.out.println("Product 클래스의 기본 생성자 호출함..");
    }

    public Product(String code, String brand, String name, int price, Date manufacturingDate) {

        super();

        this.code = code;
        this.brand = brand;
        this.name = name;
        this.price = price;
        this.manufacturingDate = manufacturingDate;

        System.out.println("Product 클래스의 매개변수 있는 생성자 호출함..");
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public Date getManufacturingDate() {
        return manufacturingDate;
    }

    public void setManufacturingDate(Date manufacturingDate) {
        this.manufacturingDate = manufacturingDate;
    }

    public String getInformation() {
        return "Product{" +
                "code='" + code + '\'' +
                ", brand='" + brand + '\'' +
                ", name='" + name + '\'' +
                ", price=" + price +
                ", manufacturingDate=" + manufacturingDate +
                '}';
    }
}

오버라이딩 성립 조건
1. 메소드명 동일
2. 메소드 리턴타입 동일
3. 매개변수의 타입, 개수, 순서가 동일
4. 부모 클래스의 private 메소드는 오버라이딩 불가능
5. 부모 클래스의 final 키워드가 사용된 메소드는 오버라이딩 불가능
6. 접근제어자는 부모 메소드와 같거나 더 넓은 범위여야 함
7. 예외처리는 같은 예외이거나 더 구체적(하위)인 예외를 처리해야 함

=========== 팀스터디 문제로 얻은 것 
접근 제한자
public - 적용대상 - 클래스, 필드, 생성자, 매소드 / 접근 가능 대상 - 모든 대상 / 접근 불가 대상 - 없음
protected - 적용대상 - 필드, 생성자, 메소드 / 접근 가능 대상 - 같은 패키지, 자식 클래스 / 접근 불가 대상 - 자식 클래스가 아닌 다른 패키지에 소속된 클래스
default - 적용대상 - 클래스, 필드, 생성자, 매소드 / 접근 가능 대상 - 같은 패키지에 소속된 클래스 / 접근 불가 대상 - 다른 패키지에 소속된 클래스
private - 적용대상 - 필드, 생성자, 매소드 / 접근 가능 대상 - 클래스 내부 / 접근 불가 대상 - 클래스 외부 


