
스프링(Spring)
제어의 역전 (IoC, Inversion of Control) & 의존성 주입 (DI, Dependency Injection)
**가장 중요하고 핵심적인 개념입니다.**
**제어의 역전(IoC)**: 객체의 생성, 생명 주기 관리, 다른 객체와의 의존성 연결 등을 개발자가 직접 코드로 제어하는 대신,
                      **프레임워크(스프링 컨테이너)에 위임**하는 것을 말합니다. "제어권이 뒤바뀌었다"는 의미죠.
**의존성 주입(DI)**: IoC의 구체적인 구현 방법 중 하나입니다. 
                    객체가 필요로 하는 다른 객체(의존성)를 개발자가 직접 생성하거나 찾아와서 주입하는 것이 아니라, 
                     스프링 컨테이너가 **자동으로 연결(주입)**해주는 방식입니다. 
                     
**왜 중요할까요?**:
    **결합도(Coupling)를 낮춥니다**: 객체들이 서로 강하게 묶여있지 않고 느슨하게 연결되어, 
                                    한 부분의 변경이 다른 부분에 미치는 영향을 최소화합니다.
    **재사용성(Reusability)을 높입니다**: 독립적으로 개발된 컴포넌트들을 쉽게 조립하여 사용할 수 있습니다.
    **테스트 용이성(Testability)을 향상시킵니다**: 특정 객체를 테스트할 때, 실제 의존 객체 대신 테스트용 가짜 객체(Mock)를 쉽게 
                                                 주입하여 단위 테스트를 독립적으로 수행할 수 있습니다.
    **코드의 간결성**: 개발자가 직접 객체를 생성하고 관리하는 코드를 줄여줍니다.

@Configuration, @ComponentScan, 어노테이션

1. @Configuration
이 클래스는 **스프링 설정을 위한 클래스**, 즉 **빈(Bean)을 등록하는 설정 클래스**임을 나타냅니다.
- 일반적으로 `@Bean` 어노테이션과 함께 사용됩니다.
- 자바 코드로 빈(Bean)을 등록할 수 있게 합니다.
- XML 설정 파일을 대체하기 위해 사용합니다.

2. @ComponentScan
**특정 패키지 하위에서** `@Component` 계열 어노테이션이 붙은 클래스를 자동으로 스캔해서 **Bean으로 등록**합니다.
- 스프링이 알아서 특정 클래스를 찾아 Bean으로 등록하게 하려면, 우리가 클래스에 `@Component`, `@Service`, `@Repository`, `@Controller` 등을 붙여야 합니다.
- 그런데 이걸 스프링이 어디서부터 찾아야 하는지 알려줘야 합니다 → 그게 바로 `@ComponentScan(basePackages = "경로")`의 역할입니다.

3. 주요 어노테이션 요약
@Component	일반적인 Bean 등록용
@Service	서비스 계층에서 사용 (가독성과 계층 표현 목적)
@Repository	DAO 계층에서 사용. 예외 변환 기능을 제공
@Controller	웹 계층에서 사용. 클라이언트 요청을 처리
@Configuration	설정 클래스임을 명시
@ComponentScan	위 어노테이션들을 가진 클래스들을 찾아 Bean으로 등록

4. @Autowired
스프링에서 **의존성 주입(DI, Dependency Injection)**을 자동으로 수행해주는 핵심 어노테이션입니다.
즉, 필요한 객체를 자동으로 주입해주는 기능

## 왜 중요할까?
1. 객체를 직접 생성하지 않아도 됨
- 우리가 직접 `new` 키워드로 객체를 만들 필요 없이,
- 스프링이 알아서 필요한 Bean을 찾아서 주입해줍니다.

2. 코드 간 결합도 낮춤 (유지보수 쉬움)
- 클래스 내부에서 어떤 구현체를 쓸지 몰라도 되기 때문에,
- 추후 구현체만 바꿔도 코드를 수정할 필요가 없습니다.

1. 생성자 주입 (추천 방식)
- **final 필드 사용 가능** → 불변성 보장
- 테스트 코드 작성 쉬움
@Service
public class OrderService {

    private final MemberRepository memberRepository;

    @Autowired
    public OrderService(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }
}


왜 생성자 주입이 추천 방식일까?
### 1. **불변(immutable) 객체 설계 가능**
- 생성자를 통해 주입된 의존성은 `final` 키워드로 선언할 수 있어, **한 번 주입되면 바뀌지 않음**.
- 필드 주입은 객체 생성 후에 값을 넣으므로 `final`을 쓸 수 없음.

@Service
public class OrderService {

    private final MemberRepository memberRepository;

    @Autowired
    public OrderService(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }
}
이 코드는 OrderService 객체가 생성될 때 반드시 MemberRepository가 필요하다는 걸 명확하게 표현함.

### 2. **테스트가 쉬움 (단위 테스트 용이)**
생성자 주입을 하면, 테스트할 때 **스프링 없이도 직접 의존 객체를 넣어줄 수 있음**.

### 3. **순환 참조 방지에 유리**
- 필드 주입이나 세터 주입은 스프링이 객체를 다 만들고 나서 의존성을 넣기 때문에 **순환 참조를 런타임까지 모름**.
- 생성자 주입은 **객체 생성 시점에 의존성이 모두 충족돼야 하므로**, 순환 참조를 조기에 감지할 수 있음.

2. 필드 주입 (지양 권장)
- 간단하지만 테스트 불편 (목 객체 주입 어려움)
- **스프링 컨테이너 없이 사용 불가능** → 강한 결합
@Autowired
private MemberRepository memberRepository;

필드 주입은 왜 지양할까?
문제점 |	설명
테스트 어려움 |	Mock 객체를 주입하기 어렵고 setter도 없음
리팩터링 취약 |	의존성을 바꾸려면 스프링 환경에서만 가능
순환 참조 문제 |	실행 시점까지 확인 못 함
DI 프레임워크에 강하게 묶임 | 스프링 없이 코드 실행 자체가 안 됨

주입 방식 | 추천 여부  |	이유
생성자 주입  |	✅ 강력히 추천  |	명확한 의존성, 테스트 용이, 불변성
필드 주입  |	❌ 비추천  |	테스트 어려움, 순환 참조 감지 불가
세터 주입  |	⭕ 조건부 사용  |	선택적/옵션 의존성 주입 시 사용 가능
