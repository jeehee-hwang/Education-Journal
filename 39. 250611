* 경로 지정, 오타, 쿼리 문 등 다양한 이유로 오류가 날 수 있다는 것을 명심하자 
* 매핑은 너무 어렵다. CRUD 아직 감이 잘 오지 않지만 연습을 좀 해봐야겠다. 

** 왜 crud를 하는걸까? 
✅ 1. 사용자 요구에 따라 데이터를 관리해야 하므로
대부분의 웹 시스템(예: 게시판, 회원 관리, 상품 관리)은 데이터를 다루는 시스템입니다.

예: 회원 등록(생성), 회원 목록 보기(조회), 회원 정보 수정(수정), 회원 탈퇴(삭제)

✅ 2. Spring Web MVC는 웹 요청을 처리하고 데이터 흐름을 연결해주는 역할
Spring Web MVC는 사용자의 HTTP 요청을 컨트롤러로 전달하고, 컨트롤러는 서비스/DAO를 통해 데이터베이스와 연동합니다.
그 흐름 속에서 CRUD 기능을 구현하는 것이 웹앱의 기본 구조가 됩니다.
예시 흐름 (Spring MVC 기반 게시판):

1. 사용자가 글 작성 요청 (POST /board/write)
 → 컨트롤러가 요청을 받음
 → 서비스 → DAO → DB에 글 저장 (Create)

2. 글 목록 조회 요청 (GET /board/list)
 → DB에서 전체 글 목록 조회 (Read)

3. 글 수정 요청 (POST /board/edit)
 → DB에서 해당 글 내용 수정 (Update)

4. 글 삭제 요청 (POST /board/delete)
 → DB에서 해당 글 삭제 (Delete)
 
✅ 3. 유지보수성과 재사용성 확보
CRUD가 명확하게 나뉘면 기능 단위로 코드를 작성할 수 있어 서비스 구조가 체계적이고 유지보수가 쉬워집니다.
예: 게시판에서 CRUD가 잘 분리돼 있다면 나중에 “글 신고” 기능을 추가하더라도 기존 구조를 해치지 않고 구현 가능.

✅ 4. Spring의 구조(MVC, DI, AOP 등)와 잘 어울림
각 계층(Controller, Service, DAO)에서 CRUD를 분리하여 책임을 나눌 수 있음.
테스트하기 쉽고, 기능 변경 시 다른 계층에 영향을 적게 줌.


** 타임리프 
1. 타임리프를 사용하는 이유
  1. 서버 데이터를 HTML에 표현하기 위해	
  - 컨트롤러에서 넘긴 데이터를 HTML 화면에서 보여주기 위해 필요합니다. (th:text, th:each 등)
  2. HTML 정합성 유지	
  - JSP와 달리 타임리프는 순수 HTML 형식을 유지해서 브라우저에서도 바로 볼 수 있어 디자이너/프론트와 협업하기 쉽습니다.
  3. Spring MVC와 자연스럽게 통합됨	
  - Model 객체로 전달한 데이터에 쉽게 접근 가능하며, Spring EL 표현식과 잘 호환됩니다.
  4. 보안 기능 내장	
  - 예를 들어, th:text는 HTML 태그를 자동으로 이스케이프 처리해서 XSS 공격을 막을 수 있습니다.
  5. 표현력이 뛰어남	
  - 반복문, 조건문, 링크, 폼 처리 등 다양한 기능을 HTML 안에서 직관적으로 표현할 수 있습니다.

2. 자주 사용하는 타임리프 문법 5가지
  1. th:text – 텍스트 출력
    <p th:text="${member.name}">홍길동</p>
      - Model에 담긴 객체의 값을 출력합니다.
      - 화면에는 홍길동처럼 이름이 나옵니다.
      - <p> 태그 안의 기존 내용은 무시되고 덮어쓰기 됩니다.
    
  2. th:each – 반복 출력
      <tr th:each="user : ${userList}">
      <td th:text="${user.name}">이름</td>
      <td th:text="${user.age}">나이</td>
    </tr>
      - 리스트나 배열 등 컬렉션을 반복해서 테이블 등에 출력할 때 사용합니다.
  
  3. th:if, th:unless – 조건문
      <p th:if="${member.age >= 20}">성인입니다</p>
      <p th:unless="${member.active}">비활성 사용자입니다</p>
       - 조건에 따라 특정 태그를 보이게 하거나 숨깁니다.
  
  4. th:href – 동적 링크 처리
    <a th:href="@{/user/detail/{id}(id=${user.id})}">상세보기</a>
      - 컨트롤러에서 매핑된 주소와 파라미터를 동적으로 연결할 수 있습니다.
      예: /user/detail/3
  
  5. th:field – 폼 필드 자동 바인딩
   <input type="text" th:field="*{name}" />
    - @ModelAttribute와 연결된 객체의 name 필드와 자동으로 바인딩됩니다.
    - 폼 전송 시 name 필드의 값을 자동 수신합니다.
  
  6. 기본 객체 출력
    <span th:text="${#dates.format(today, 'yyyy-MM-dd')}"></span>
     - #dates, #numbers, #strings 등 유틸 객체도 자주 사용됩니다.

** @MapperScan
   @MapperScan(basePackages = "com.ohgiraffers.crud", annotationClass = Mapper.class)
  목적: 	@Mapper 인터페이스들을 자동으로 스캔해서 Spring 빈으로 등록
  필요 이유 :	Mapper는 인터페이스이기 때문에 직접 @Component가 안 붙음
  사용 위치	: 주로 @SpringBootApplication 또는 설정 클래스 위
  대체 방법 : 	각 매퍼에 @Mapper를 붙이는 방법도 있지만, @MapperScan이 더 편리

