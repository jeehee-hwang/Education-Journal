* method의 개념을 정리해 두자 
* 조건문, 반복문 관련된 문제를 많이 보자 (사고의 유연성 필요, 문제를 많이 읽어보고 수식화를 해보기) > 수식화가 어려움 

수업진도 :  for문 ~ continue / 04_java chap04-control-flow-lecture-source section02/looping - section03/branching

메소드(method) : 어떠한 특정 작업을 수행하기 위한 명령문의 집합이라 할 수 있습니다.
    1. 접근제어자 2. 반환타입 3. 메소드이름( 4. 매개변수목록) // 선언부 {  // 5. 구현부   }
ex)    1. public   2. int     3. sumTwoNumber(4. int frist, int second { 5. return first + second; }
      
1. 접근 제어자 : 해당 메소드에 접근할 수 있는 범위를 명시합니다.
2. 반환 타입(return type) : 메소드가 모든 작업을 마치고 반환하는 데이터의 타입을 명시합니다.
3. 메소드 이름 : 메소드를 호출하기 위한 이름을 명시합니다.
4. 매개변수 목록(parameters) : 메소드 호출 시에 전달되는 인수의 값을 저장할 변수들을 명시합니다.
5. 구현부 : 메소드의 고유 기능을 수행하는 명령문의 집합입니다.


for문 단독 사용에 대한 흐름을 이해하고 적용할 수 있다. */
        /* [for의 표현식]
        *  for(초기식; 조건식; 증감식) {
        *         조건을 만족하는 경우 수행할 구문(반복할 구문);
        *  }
        * */

  중첩된 for문의 흐름을 이해하고 적용할 수 있다. */


while문 단독 사용에 대한 흐름을 이해하고 적용할 수 있다. */
        /* [while문 표현식]
        *  초기식;
        *  while(조건식) {
        *       조건을 만족하는 경우 수행할 구문(반복할 구문);
        *       증감식;
        *  }
     
  중첩된 while문 흐름을 이해하고 적용할 수 있다. */

do-while문 단독 사용에 대한 흐름을 이해하고 적용할 수 있다. */
    /* [do-while 표현식 ]
    * 초기식;
    * do {
    *    1회차에는 무조건 실행하고, 이후에는 조건식을 확인하여 조건을 만족하는 경우 수행할 구문(반복할 구문)
    *    증감식;
    * } while(조건식);

break문 사용에 대한 흐름을 이해하고 적용할 수 있다. */
        /* break는 반복문 내에서 사용한다.
        *  해당 반복문을 빠져 나올 때 사용하며, 반복문의 조건문 판단 결과와 상관 없이
        *  반복문을 빠져나올 때 사용한다.
        *  일반적으로 if(조건식) { break; } 처럼 사용된다.
        *  단, switch문은 반복문이 아니지만 예외적으로 사용된다.

continue 사용에 대한 흐름을 이해하고 적용할 수 있다. */
        /* continue문은 반복문 내에서 사용한다.
        *  해당 반복문의 반복 회차를 중간에 멈추고, 다시 증감식으로 넘어가게 해준다.
        *  일반적으로 if(조건식) { continue; } 처럼 사용된다.
        *  보통 반복문 내에서 특정 조건에 대한 예외를 처리하고자 할 때 자주 사용된다.
        * */
        
---------- 문제 --------- 

1. 반복문을 사용하여 1부터 100까지 더한 합계를 출력하세요.

        P_practice1 a = new P_practice1();
//       a.testStudy1();

   public void testStudy1() {

        int sum = 0 ;

        for (int i= 1; i <= 100; i++ ) {
            sum += i ;

        }

        System.out.println(sum);
    }


2. 정수 한 개를 입력 받고, 1부터 입력 받은 정수까지의 합을 계산해서 출력하세요.

        P_practice2 b = new P_practice2();
//        b.testStudy2();

-- 입력 예시 --
정수를 입력하세요 : 5

-- 출력 예시 --
1부터 5까지의 합 : 15

public void testStudy2() {
        Scanner sc = new Scanner(System.in);
        System.out.print("정수를 하나 입력하세요 = ");
        int num = sc.nextInt();

        int i = 1;
        int sum = 0;
        while ( i <= num ) {
            sum += i;
            i++;

        }
        System.out.println("1부터 입력 받은 정수 " + num + "까지의 합은 " + sum + "입니다.");

    }

3. 반복문을 사용하여 7단 구구단을 출력하세요.

       P_practice3 c = new P_practice3();
//       c.testStudy3();

    public void testStudy3() {
        Scanner sc = new Scanner(System.in);
        System.out.print("dna = ");
        int dan = sc.nextInt();

        for (int i = 1; i < 10; i++ ) {
            System.out.println(dan + " * " + i + " = " + (dan * i ));
        }

    }


4. 1부터 입력 받은 정수까지의 짝수의 합을 출력하세요. * if, if-else는 조건식임! ~~~하다면, ~~ 아니라면에 어디든 다 쓸 수 있음 

-- 입력 예시 --
정수를 입력하세요 : 10

-- 출력 예시 --
1부터 10까지 짝수의 합 : 30

        P_practice4 d = new P_practice4();
//        d.testStudy4();

    public void testStudy4() {
        Scanner sc = new Scanner(System.in);
        System.out.print("정수를 입력하세요 : ");
        int num = sc.nextInt();

        int i = 1;
        int sum = 0;

        while ( i <= num) {
            i ++;
            if(i % 2 == 0){
                sum += i ;

            }
        }

        System.out.println("1부터 입력 받은 정수" + num + "짝수의 합은" + sum + "입니다.");
    }

5. 문자열을 입력 받아서 문자열의 각 인덱스별로 한 글자씩 출력하세요.

-- 입력 예시 --
문자열을 입력하세요 : apple

-- 출력 예시 --
0 : a
1 : p
2 : p
3 : l
4 : e

        P_practice5 e = new P_practice5();
//        e.testStudy5();


        public void testStudy5() {
            Scanner sc = new Scanner(System.in);
            System.out.print("문자열을 입력하세요 : ");
            String str = sc.nextLine();

            for (int i = 0; i < str.length(); i++ ) {
                char ch = str.charAt(i);

                System.out.println( i + " : " + ch);
            }

        }

6.  반복문을 이용하여 알파벳 소문자 'a'부터 'z'까지를 개행 없이 차례로 출력하세요. > 직접 풀진 않음, 구글링함

-- 출력 예시 --
abcdefghijklmnopqrstuvwxyz

        P_practice6 f = new P_practice6();
//       f.testStudy6();

    public void testStudy6() {

        char[] abc = new char[26];


        for (int i = 0; i < abc.length; i++) {
            abc[i] = (char) (i + 97);
        }
        for (int i = 0; i < abc.length; i++)
            System.out.print(abc[i]);
        }
    }
    /* 문자열로 표현하기 위해 char형으로 배열을 잡아준다. 알파벳은 총 26개가 있으므로 값으로 26을 넣어준다.
    for문을 이용해서 i가 abc.length(26)와 같기 전까지 커지고,abc[i]의 값을
    char형으로 선언해주며 아스키코드를 활용해서 소문자 a가 숫자 97부터인 것을 활용해
    i+97로 지정하여 abc.length의 값과 같기 전까지 커진 i의 값과 +97를 하여
    알파벳 소문자 a~z까지 나오도록 해준다.
