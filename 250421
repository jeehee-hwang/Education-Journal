1-3. DOM(노드 프로퍼티)
1-3-1. get node info (노드 정보 취득)

- Node.prototype.nodeType : 노드 객체의 종류, 즉 노드 타입을 나타내는 상수 반환
    - Node.ELEMENT_NODE : 요소 노드 타입을 나타내는 상수 1 반환
    - Node.TEXT_NODE : 텍스트 노드 타입을 나타내는 상수 3 반환
    - Node.DOCUMENT_NODE : 문서 노드 타입을 나타내는 상수 9를 반환

      <div id = "area"> 노드 정보 취득 </div>     
      <script>
        console.log(document.nodeType); / 9
        
        const $area = document.getElementById('area');
        console.log($area.nodeType); / 1
        
        const $textNode = $area.firstChild;
        console.log($textNode.nodeType); / 3
      </script>

- Node.prototype.nodeName : 노드의 이름을 문자열로 반환한다.
    - 요소 노드 : 다문자 문자열로 태그 이름을 반환
    - 텍스트 노드 : 문자열 “#text”를 반환
    - 문서 노드 : 문자열 “#document”를 반환

          <h1>01. 노드 정보 취득 </h1>
        
          <div id = "area"> 노드 정보 취득 </div> 
        
          <script>
        
          console.log(document.nodeName); / #document
        
          const $area = document.getElementById('area');
          console.log($area.nodeName); / DIV
        
          const $textNode = $area.firstChild;
          console.log($textNode.nodeName); / #text
        
        </script>

1-3-2. text node content (요소 노드의 텍스트 조작)
- Node.prototype.nodeValue 프로퍼티는 setter와 getter가 모두 존재하는 접근자 프로퍼티이다.
    - nodeValue 프로퍼티 참조 시 노드 객체의 값(텍스트 노드의 텍스트)을 반환한다.
    - 텍스트 노드가 아닌 노드(문서 노드, 요소 노드)의 경우 null을 반환한다.
    - 텍스트 노드의 nodeValue 프로퍼티에 값을 할당하면 텍스트 노드의 값을 변경할 수 있다.
      <div id="area">nodeValue</div>
      
      <script>
        console.log(document.nodeValue); /null > document는 문서 객체라 null 값이 나온다.
    
        const $area = document.getElementById('area'); 
        console.log(document.nodeValue);  /null > 요소 노드도 null 값을 반환
    
        const $textNode = $area.firstChild;
        console.log($textNode.nodeValue); / nodeValue
    
        $textNode.nodeValue = '텍스트 값 변경 완료'; 
    
      </script>

    - Node.prototype.textContent 프로퍼티는 setter와 getter 모두 존재하는 접근자 프로퍼티로서 요소 노드의 텍스트와 모든 자손 노드의 텍스트를 모두 취득하거나 변경한다.
    - 요소 노드의 textContent 프로퍼티를 참조하면 요소 노드의 콘텐츠 영역 내의 텍스트롤 모두 반환하며 이 때 HTML 마크업은 무시된다.
    - 요소 노드의 textContext 프로퍼티에 문자열을 할당하면 요소 노드의 모든 자식 노드가 제거 되고 할당한 문자열이 텍스트로 추가 된다. 이 때도 HTML 마크업은 무시되고 문자열 텍스트로 취급된다.
          <div id="area2">textContent<span>내부 span</span></div>
        
          <script>
          const $area2 = document.getElementById('area2');
          // HTML 마크업이 무시 된 div 내부의 컨텐츠를 텍스트로 취득
          console.log($area2.textContent); / textContent내부 span
        
          // nodeValue는 텍스트 노드의 값만 반환하므로 textContent보다 코드가 복잡해진다.
          console.log($area2.firstChild.nodeValue); / textContent
        
          console.log($area2.lastChild.firstChild.nodeValue); /내부 span
        
          $area2.textContent = '텍스트 값 변경완료<span>내부 span</span>';
          </script>

1-4. DOM(노드 수정)

1-4-1. node create append

- Document.prototype.createElement(tagName) : 인수로 전달받은 태그 이름에 해당하는 요소 노드를 생성하여 반환
- Document.prototype.createTextNode(text) : 인수로 전달받은 텍스트 값으로 텍스트 노드를 생성하여 반환
- Node.prototype.appendChild(childNode) : 인수로 전달받은 노드를 appendChild 메서드를 호출한 노드의 마지막 자식 노드로 추가
    

      <ul id="drink">
        <li>커피</li>
      </ul>
    
      <script>
        const $drink = document.getElementById('drink'); 
        const $li = document.createElement('li'); 
        const textNode = document.createTextNode('콜라'); 
    
        $li.appendChild(textNode);
    
        console.log($li); / 콜라
    
        $drink.appendChild($li);  
    
      </script>

    

- 복수의 노드를 생성하여 추가하는 상황에서 DOM의 리플로우, 리페인트 횟수를 줄이는 것이 좋다.
    - 컨테이너 요소를 사용할 수 있다.
    - DocumentFragment 노드는 자식 노드들의 부모 노드로서 별도의 서브 DOM을 구성하여 기존 DOM에 추가하기 위한 용도로 사용할 수 있다.
    
      <ul id = food>
        <li>김치찌개</li>
        /*<div>
         <li>된장찌개</li>
         <li>고등어구이</li>
         </div>*/
      </ul>
    
      <script>
        const $food = document.getElementById('food'); 
        const container = document.createElement('div');
        // <div></div> div가 만들어 진거임, ul, labla, 버튼 등 가능함
        
      ['된장찌개', '고등어구이', '순대국'].forEach(text => {
      const $li = document.createElement('li');//<li></li> 
        $li.textContent = text;//<li>text</li> 
    					 > div에 li가 만들어 짐, 만들어진 li에 text를 넣음 
    					 
        // DOM이 3번 변경 되면서 리플로우, 리페인트가 3번 실행되어 비효율적이다.
        // $food.appendChild($li);
    
        // div에 li를 추가
        container.append($li);//<div><li>된장찌개</li><li>고등어구이</li></div>
      });
    
      // 컨테이너 요소 div를 사용하면 DOM은 1번만 변경된다.
      $food.appendChild(container);  
      </script>


1-4-2. node insert move (노드 삽입과 이동)
- Node.prototype.appendChild(childNode) : 인수로 전달받은 노드를 appendChild 메서드를 호출한 노드의 마지막 자식 노드로 추가
- Node.prototype.insertBefore(newNode, childNode) : 첫 번째 인수로 전달받은 노드를 두 번째 인수로 전달 받은 노드 앞에 삽입
    - 두 번째 인수로 전달 받은 노드는 반드시 insertBefore 메서드를 호출한 노드의 자식 노드여야 한다.
- DOM에 이미 존재하는 노드를 appendChild, insertBefore 메서드를 사용하여 DOM에 다시 추가하면 현재 위치에서 노드를 제거하고 새로운 위치에 노드를 추가하는 노드 이동이 발생한다.
    
      <ul id="drink">
        <li>커피</li>
      </ul>
    
      <script>
        const $drink = document.getElementById('drink');
        const $li1 =document.createElement('li');
        $li1.textContent = '콜라';
        
        $drink.appendChild($li1);
    
        const $li2 = document.createElement('li');
        $li2.textContent = '우유';
    
        $drink.insertBefore($li2, $drink.lastElementChild);
    
        const $li3 = document.createElement('li');
        $li3.textContent = '사이다';
    
        // 두 번째 인수가 null이면 appendChild처럼 마지막 자식 노드로 추가
        $drink.insertBefore($li3, null);
    </script>

1-4-3. node replace remove (노드 교체, 삭제)

- Node.prototype.replaceChild(newChild, oldChild) 메서드는 자신을 호출한 노드의 자식 노드인 oldChild 노드를 newChild 노드로 교체한다.
- 이 때 oldChild는 replaceChild 메서드를 호출한 노드의 자식 노드여야하고 oldChild 노드는 DOM에서 제거된다.
- Node.prototype.removeChild(child) 메서드는 child 매개변수에 인수로 전달한 노드를 DOM에서 삭제한다.
- 인수로 전달한 노드는 removeChild 메서드를 호출한 노드의 자식이어야 한다.

        <h3>노드 교체</h3>
        
        <ul id="drink">
            <li>커피</li>
            <li>사이다</li>
        </ul>
    
        <script>
            const $drink = document.getElementById('drink');
            const $coffee = $drink.firstElementChild;
    
            const $newChild = document.createElement('li');
            $newChild.textContent = '콜라';
    
            $drink.replaceChild($newChild, $coffee);
        </script>

        <h3>노드 삭제</h3>
    
        <ul id="food">
            <li>파스타</li>
            <li>피자</li>
        </ul>
    
        <script>
            const $food = document.getElementById('food');
    
            $food.removeChild($food.lastElementChild);
        </script>

1-5. attribute(어트리뷰트)
1-5-1. attribute (어트리뷰트)
Element.prototype.attributes 프로퍼티로 모든 어트리뷰트 노드를 취득할 수 있다.
attributes 프로퍼티는 getter만 존재하는 읽기 전용 접근자 프로퍼티로 NameNodeMap 객체를 반환한다.
       <label for="username">유저명</label>
    <input type="text" id="username" value="user01">
    
    <script>
        const { attributes } = document.getElementById('username');
        // const attributes = document.getElementById('username').attributes;
    
        console.log(attributes);  /  NameNodeMap 
        console.log(attributes.type.value); / text
        console.log(attributes.id.value); / username
        console.log(attributes.value.value); / user01
    </script>
  
    
- Element.prototype.getAttribute/setAttribute 메서드를 사용하면 attributes 프로퍼티를 통하지 않고 
   요소 노드에서 메서드를 통해 직접 HTML 어트리뷰트 값을 취득하거나 변경할 수 있어 편리하다.
    
    <label for="username">유저명</label>
    <input type="text" id="username" value="user01">
    
    <script>
      const $input = document.getElementById('username');
    
      const inputValue = $input.getAttribute('value');
      console.log(inputValue);
    
      $input.setAttribute('value', 'user02');
      
    </script>
    
    유저명 user01 >> 유저명 user02로 바뀜 
    
