spring core 
1. di-annotation (field, contructor, setter) / (primary, qualifier, collection)
2. bean (scope - singleton, prototype) /  (initdestroy - java, annotation ) / (properties)

* 필드와 생성자의 차이 
 
 1. 자바 관점에서의 필드와 생성자 차이
| 항목      | 필드(Field)                             |  생성자(Constructor)                                    |
| -------   | -------------------------------------- | ------------------------------------------------------  |
| 정의      | 클래스 내에서 선언된 변수                | 객체가 생성될 때 호출되는 특별한 메서드                     |
| 목적(역할) | 객체의 속성(상태)을 저장                 | 객체 생성 시 필드 초기화                                  |
| 작동시점   | 객체가 생성된 이후                      | 객체가 생성될 때 딱 한 번 자동 호출                         |
| 선언 위치  | 클래스 내부                            | 클래스 내부                                               |
| 접근 제어  | `private`, `public` 등으로 제어 가능   | 생성자도 접근 제어자 가능 (`public`, `private` 등)          |
| 유형       | String name;, int age; 같은 변수      | public Person(String name) { this.name = name; } 같은 함수|


 2. 스프링 관점에서의 필드 vs 생성자
| 비교 항목          | 필드 주입   | 생성자 주입    |
| -------------     | ----------- | ------------- |
| 코드 간결성        | ✅ (간단함) | ❌ (더 길어짐) |
| 테스트 용이성      | ❌          | ✅            |
| 불변성 (`final`)   | ❌          | ✅            |
| 순환 참조 조기 감지 | ❌          | ✅            |
| 실무 권장 여부      | ❌ 비추천   | ✅ 강력 추천   |


public class Person {
    // 📦 필드 (데이터를 담는 상자)
    private String name;

    // 🚪 생성자 (객체가 생성될 때 호출되는 문)
    public Person(String name) {
        this.name = name; // 필드 초기화
    }
}

** 왜 구분이 중요한가?
스프링에서는 객체를 직접 만들지 않고 스프링 컨테이너가 만들어 줍니다.
이때 : 필드는 어떤 값을 가질지 결정하는 ‘공간’
       생성자는 어떤 Bean을 그 공간에 넣을지 결정하는 ‘경로’

       
** 자주 하는 혼동 정리
| "필드랑 생성자 둘 다 변수 아닌가요?" | ❌ 필드는 변수, 생성자는 함수(메서드)입니다.              |
| "생성자도 값을 가지는 건가요?"       | ❌ 생성자는 값을 가지지 않고 **값을 필드에 넣는 역할**을 합니다. |

       

## autowired

1. field Injection
- 필드 주입은 @Autowired 어노테이션을 필드에 직접 붙여서 의존성을 주입하는 방식

- EX) 
    @Autowired
    private BookDAO bookDAO;

- 장점 
    1. 간편함 : 코드가 간결하고 작성하기 매우 편리합니다. 
                필드에 @Autowired만 붙이면 되므로 Boilerplate 코드가 줄어듭니다.

- 단점
  1. 단일 책임 원칙 (Single Responsibility Principle, SRP) 위반 가능성 : 필드가 많아질수록 클래스가 너무 많은 의존성을 갖게 되어 단일 책임 원칙을 위반할 가능성이 높습니다.
  2. 테스트의 어려움: 단위 테스트 시 의존성을 주입하기가 어렵습니다. 테스트 코드가 스프링 컨테이너에 의존하게 되거나, 리플렉션을 통해 의존성을 주입해야 하는 등 번거로움이 발생할 수 있습니다.
  3. 불변성 (Immutability) 보장 불가: final 키워드를 사용할 수 없으므로, 객체가 생성된 후에도 의존성이 변경될 수 있습니다. 이는 안정성을 저해할 수 있습니다.
  4. 순환 의존성 문제 발생 가능성: 순환 의존성(Circular Dependency)이 발생했을 때 런타임에 오류를 감지하기 어렵습니다.
  5. DI 컨테이너에 대한 의존성: 스프링 컨테이너 없이는 객체를 제대로 생성하고 사용할 수 없습니다. 일반적인 자바 코드에서 new MyService()를 통해 인스턴스를 생성하면 myRepository는 null이 됩니다.


2. contructor Injection
-  클래스의 생성자를 통해 의존성을 주입받는 방식

- EX) 
    @Autowired
    public BookService(BookDAO bookDAO) { this.bookDAO = bookDAO;}

- 장점
  1. 불변성 (Immutability) 보장: final 키워드를 사용할 수 있어 객체가 생성된 후 의존성이 변경되는 것을 막을 수 있습니다. 이는 객체의 일관성과 안정성을 높입니다.
  2. 테스트 용이성: 의존성을 주입받는 생성자가 명시적으로 존재하므로, 단위 테스트 시 스프링 컨테이너 없이도 테스트 대상 객체를 쉽게 생성하고 의존성을 수동으로 주입할 수 있습니다.
  3. 순환 의존성 감지 용이: 순환 의존성이 발생할 경우 애플리케이션 시작 시점에 오류가 발생하여 개발자가 문제를 빠르게 인지하고 해결할 수 있도록 돕습니다.
  4. 의존성 명시: 해당 클래스가 어떤 의존성을 필요로 하는지 생성자를 통해 명확하게 드러납니다. 이는 클래스의 책임이 명확해지고, 클래스 내부에서 어떤 외부 자원을 사용하는지 쉽게 파악할 수 있도록 합니다.
  5. 의존성 누락 방지: 생성자를 통해 모든 필수 의존성을 주입받으므로, 필수 의존성이 누락되는 것을 컴파일 시점에 방지할 수 있습니다.

- 단점
  1. 코드의 번거로움 (Lombok 미사용 시): 주입해야 할 의존성이 많아질수록 생성자의 매개변수가 늘어나 코드가 길어질 수 있습니다. 하지만 Lombok의 @RequiredArgsConstructor를 사용하면 이 단점을 거의 상쇄할 수 있습니다.

3. setter
- 선택적인 의존성 주입에 유용

- EX) @Autowired
    public void setBookDAO(BookDAO bookDAO) { this.bookDAO = bookDAO; }

- 장점
  1. 의존성 변경 가능: 런타임에 의존성을 변경할 수 있습니다 (잘 사용되지는 않음).
  2. 선택적 의존성: 특정 의존성이 필수가 아닐 때 유용합니다.

- 단점
  1. 불변성 확보 불가: final 키워드를 사용할 수 없습니다.
  2. 의존성 숨김: 필드 주입과 유사하게 코드를 통한 의존성 파악이 어렵습니다.
  3. 누락 가능성: @Autowired(required = false)를 사용하지 않는 한, 주입되지 않으면 오류가 발생할 수 있습니다.

## 어노테이션 Primary, Qualifier, Collection 
1. Primary 어노테이션
- 여러 개의 동일 타입 빈 중에서 기본적으로 주입될 빈을 지정하는 어노테이션

- 장점
  1. 간편함: 하나의 기본 빈을 설정하는 데 매우 간편합니다. @Primary만 붙이면 되므로 코드가 간결합니다.
  2. 일반적인 상황에 적합: 대부분의 경우 특정 인터페이스의 한 가지 구현체를 기본으로 사용하는 시나리오에 적합합니다.

- 단점:
  1. 단 하나의 기본 빈만 지정 가능: 한 타입에 @Primary는 오직 하나만 붙일 수 있습니다. 두 개 이상 붙이면 에러가 발생합니다.
  2. 유연성 부족: 기본 빈이 아닌 다른 빈을 주입해야 할 경우, @Qualifier를 함께 사용해야 합니다. 즉, @Primary만으로는 여러 구현체 중 상황에 따라 다른 것을 선택하는 유연성이 떨어집니다.
  3. 명시성 부족: 코드를 읽을 때 어떤 빈이 주입될지 @Primary 어노테이션을 직접 확인해야 한다는 점에서 명시성이 약간 떨어질 수 있습니다 (특히 프로젝트 규모가 커질수록).

- 예시 
// 인터페이스
public interface NotificationService {
    void send(String message);
}

// 구현체 1: 기본 알림 서비스
@Component
@Primary // 이 빈을 기본으로 사용하겠다!
public class EmailNotificationService implements NotificationService {
    @Override
    public void send(String message) {
        System.out.println("Email notification: " + message);
    }
}

// 구현체 2: 다른 알림 서비스
@Component
public class SmsNotificationService implements NotificationService {
    @Override
    public void send(String message) {
        System.out.println("SMS notification: " + message);
    }
}

// 주입받는 클래스
@Service
public class UserService {

    @Autowired
    private NotificationService notificationService; // @Primary가 붙은 EmailNotificationService가 주입됨

    public void notifyUser(String message) {
        notificationService.send(message);
    }
}


2. Qualifier 어노테이션
- 동일한 타입의 여러 빈 중에서 특정 빈의 이름(또는 한정자 값)을 명시하여 주입받을 때 사용

- 장점
  1. 높은 명시성: 어떤 빈이 주입될지 코드상에서 명확하게 드러납니다.
  2. 세밀한 제어: 여러 개의 동일 타입 빈 중에서 원하는 특정 빈을 정확히 선택하여 주입할 수 있습니다.
  3. @Primary보다 우선순위 높음: @Primary가 설정되어 있어도 @Qualifier가 명시되어 있다면 @Qualifier가 우선적으로 적용됩니다.

- 단점
  1. 코드 증가: 주입받는 곳마다 @Qualifier 어노테이션을 명시해야 하므로 코드가 약간 길어질 수 있습니다.
  2. 문자열 기반: Qualifier 값은 문자열로 지정되기 때문에, 오타가 발생해도 컴파일 시점에는 잡히지 않고 런타임에 에러가 발생할 수 있습니다 (타입 세이프하지 않음).
  3. 모든 경우에 적합하지 않음: 만약 동일 타입의 모든 빈을 가져와야 하는 경우에는 적합하지 않습니다.

- 예시 
// 인터페이스
public interface PaymentGateway {
    void processPayment(double amount);
}

// 구현체 1: 신용카드 결제 게이트웨이
@Component("creditCardPayment") // 빈 이름 지정
public class CreditCardPaymentGateway implements PaymentGateway {
    @Override
    public void processPayment(double amount) {
        System.out.println("Processing credit card payment: " + amount);
    }
}

// 구현체 2: PayPal 결제 게이트웨이
@Component("payPalPayment") // 빈 이름 지정
public class PayPalPaymentGateway implements PaymentGateway {
    @Override
    public void processPayment(double amount) {
        System.out.println("Processing PayPal payment: " + amount);
    }
}

// 주입받는 클래스
@Service
public class OrderService {

    @Autowired
    @Qualifier("creditCardPayment") // 특정 빈의 이름을 명시
    private PaymentGateway defaultPaymentGateway; // creditCardPayment가 주입됨

    @Autowired
    @Qualifier("payPalPayment")
    private PaymentGateway specialPaymentGateway; // payPalPayment가 주입됨

    public void placeOrderWithCreditCard(double amount) {
        defaultPaymentGateway.processPayment(amount);
    }

    public void placeOrderWithPayPal(double amount) {
        specialPaymentGateway.processPayment(amount);
    }
}


3. Collection 어노테이션
- 동일한 타입의 모든 스프링 빈을 List, Set, Map 등의 컬렉션 형태로 한 번에 주입받을 수 있습니다. 
  이는 특정 빈 하나를 선택하는 것이 아니라, 해당 타입의 모든 구현체를 한꺼번에 다룰 때 유용

- 장점:
1. 모든 구현체 접근 가능: 동일한 타입의 모든 빈을 한 번에 주입받아 동적으로 처리할 수 있습니다. (전략 패턴, Chain of Responsibility 패턴 구현에 유용)
2. 유연하고 동적인 처리: 런타임에 어떤 구현체를 사용할지 결정하는 로직을 구현할 수 있습니다.
3. 확장성: 새로운 구현체가 추가되어도 주입받는 코드의 변경 없이 자동으로 컬렉션에 추가됩니다.

- 단점:
1. 단일 빈 주입 불가능: 특정 빈 하나만 주입받아야 하는 상황에서는 사용할 수 없습니다.
2. 추가적인 로직 필요: 컬렉션에서 원하는 빈을 찾아내기 위한 추가적인 로직(예: 반복문, Map의 get() 메서드)이 필요합니다.
3. 명확성 부족: 컬렉션 자체만으로는 어떤 빈들이 포함되어 있는지 즉시 파악하기 어려울 수 있습니다.

- 예시 import java.util.List;
import java.util.Map;

// 인터페이스
public interface ReportGenerator {
    void generateReport();
    String getType(); // 보고서 타입을 반환하는 메서드 추가 (Map 주입용)
}

// 구현체 1: 월간 보고서
@Component("monthlyReport")
public class MonthlyReportGenerator implements ReportGenerator {
    @Override
    public void generateReport() {
        System.out.println("Generating Monthly Report...");
    }
    @Override
    public String getType() { return "monthly"; }
}

// 구현체 2: 연간 보고서
@Component("yearlyReport")
public class YearlyReportGenerator implements ReportGenerator {
    @Override
    public void generateReport() {
        System.out.println("Generating Yearly Report...");
    }
    @Override
    public String getType() { return "yearly"; }
}

// 주입받는 클래스
@Service
public class ReportService {

    // List로 주입 (모든 ReportGenerator 구현체)
    @Autowired
    private List<ReportGenerator> reportGenerators;

    // Map으로 주입 (빈 이름이 키, 빈 객체가 값)
    @Autowired
    private Map<String, ReportGenerator> reportGeneratorMap;

    public void generateAllReports() {
        System.out.println("\n--- Generating all reports (List) ---");
        for (ReportGenerator generator : reportGenerators) {
            generator.generateReport();
        }
    }

    public void generateSpecificReport(String type) {
        System.out.println("\n--- Generating specific report (Map) ---");
        ReportGenerator generator = reportGeneratorMap.get(type + "Report"); // 빈 이름으로 접근
        if (generator != null) {
            generator.generateReport();
        } else {
            System.out.println("No report generator found for type: " + type);
        }
    }
}


각 사용법 비교 및 권장 사항
사용법	 | @Primary	| @Qualifier |	컬렉션 주입 (List/Map)
목적	 | 기본 빈 지정 (디폴트)	| 특정 빈 명시적 선택 |	모든 동일 타입 빈 주입 (동적 처리)
장점	 | 간편, 기본 설정 |	명시적, 세밀한 제어, @Primary보다 우선 |	유연성, 확장성, 모든 구현체 접근
단점	 | 단일 기본 빈, 유연성 부족, 명시성 약간 부족	| 코드 증가, 문자열 기반(타입 세이프X)	 | 단일 빈 주입 불가, 추가 로직 필요, 명확성 부족
우선순위 |	@Qualifier < @Primary < 필드/파라미터 이름 (@Autowired 기본 동작) |	가장 높음 |	(다른 목적이므로 직접 비교 어려움)
사용 시점|	대부분의 경우 기본 구현체가 있을 때	| 명확하게 특정 구현체를 선택해야 할 때 |	동일 타입의 여러 구현체를 동적으로 다룰 때

## bean scope
-  스프링 빈이 생성될 때 생성되는 인스턴스의 범위를 의미한다
  1. singleton - 하나의 인스턴스만 생성, 모든 빈이 해당 인스턴스를 공유하며 사용, 기본값 
    @Bean
    @Scope("singleton") // ("singleton") 를 꼭 사용하지 않아도 된다. 
    public ShoppingCart cart() {
        return new ShoppingCart();
    }
  
  2. prototype - 매번 새로운 인스턴스를 생성
    @Bean
    @Scope("prototype") -> 지정해 주어야 함 
    public ShoppingCart cart() {
        return new ShoppingCart();
    }

## init, destroy
- init 메소드는 빈 객체  생성 시점에 동작하므로 바로 확인 가능 
- destroy 메소드는 빈 객체 소멸 시점에 동작하므로 컨테이너가 종료 되지 않을 경우 확인 할 수 없다.
          가비지 컬랙터가 해당 빈을 메모리에서 지울 때 destroy 메소드가 동작하게 되는데 메모르에서 지우기 전에 프로세는 종료되기 떄문이다.
         따라서 이와 ((AnnotationConfigApplicationContext) context).close(); 같이 강제로 컨테이너를 종료키면 destroy 메소드가 동작한다.
        
        
1. java 방식 

예시 
- public class ContextConfiguration
    @Bean(initMethod = "openShop", destroyMethod = "closeShop")
    public Owner owner() {
        return new Owner();
    }


2. annotation 방식 

- public class Owner
  @PostConstruct // init 메소드와 같은 설정인 어노테이션
    public void openShop() {
        System.out.println("open~ 사장님이 가게 문을 열었습니다. 이제 쇼핑을 하실 수 있습니다.");}

    @PreDestroy //destroy 메소드와 같은 설정인 어노테이션
    public void closeShop() {
        System.out.println("close! 사장님이 가게 문을 닫았습니다. 이제 쇼핑은 하실 수 없습니다."); }

    
## properties 방식 
- .properties 파일에 키 : 값 형태로 설정, 공백이 있으면 안된다. 
- 치환자 문법( ${...} )을 이용해 properties애 저장된 key를 입력하면 value에 해당하는 값을 꺼내온다
- : 을 사용하면 값을 읽어오지 못하는 경우 사용할 대체 값을 작성 가능 
-  @Value를 사용해 속성값을 넣어준다 

- 예시 1)
    @Value("${bread.carpBread.name}")
    private String carpBreadName ;
    
- 예시 2) 
    @Bean
    public Product water( @Value("${beverage.water.name}") String waterName,
                          @Value("${beverage.water.price}") int waterPrice,
                          @Value("${beverage.water.capacity}") int waterCapacity) {
        return new Berverage(waterName, waterPrice, waterCapacity);
    }

*** ApplicationContext context = new AnnotationConfigApplicationContext(ContextConfiguration.class);를 사용하는 이유
 - 이 코드는 **스프링 컨테이너(Spring Container)**를 생성하고 초기화하는 핵심적인 역할

    ▶ ApplicationContext
    스프링의 IoC(제어의 역전) 컨테이너의 최상위 인터페이스.
    객체(빈)의 생성, 의존성 주입, 생명주기 관리 등을 담당합니다.
    
    ▶ AnnotationConfigApplicationContext
    자바 기반 설정을 사용하는 스프링 컨테이너 구현체입니다.
    @Configuration, @ComponentScan 등의 어노테이션을 해석하고 빈을 등록합니다.
    
    ▶ ContextConfiguration.class
    @Configuration이 붙은 클래스입니다.
    내부에 @Bean 메서드나 @ComponentScan이 있어야 하며,
    어떤 객체를 스프링이 관리할지(Bean으로 만들지) 정의합니다.

  -- 왜 사용하는가? (목적 정리)
  목적	| 설명
  스프링 컨테이너 생성 |	AnnotationConfigApplicationContext가 IoC 컨테이너로 동작
  자바 설정 파일 로딩 |	ContextConfiguration.class에서 @Configuration, @Bean 등을 분석
  빈 등록 및 관리 |	설정 클래스에서 지정한 Bean들을 생성하고 의존성 주입 수행
  DI(의존성 주입) 실행 |	@Autowired, @Bean, @ComponentScan 등 자동으로 처리

# 간단 비유
📦 ApplicationContext = 스프링이 제공하는 Bean 공장
📄 ContextConfiguration.class = 공장에 제공하는 설계도 (어떤 제품을 만들지)
🛠️ AnnotationConfigApplicationContext(...) = 공장 가동 버튼

 # 작동 흐름 예시

@Configuration
@ComponentScan(basePackages = "com.example") // 패키지 탐색
public class ContextConfiguration {
}

--------------

public class Main {
    public static void main(String[] args) {
        // 1. 스프링 컨테이너 생성 및 설정 클래스 로딩
        ApplicationContext context = new AnnotationConfigApplicationContext(ContextConfiguration.class);

        // 2. 필요한 빈 꺼내기 (스프링이 생성 및 주입한 객체)
        MyService service = context.getBean(MyService.class);
        service.doSomething();
    }


*** ((AnnotationConfigApplicationContext) context).close(); 에서 다운캐스팅인 이유
context 변수는 ApplicationContext 타입으로 선언되어 있습니다. ApplicationContext는 스프링 컨테이너의 핵심 인터페이스입니다. 이 인터페이스는 컨테이너의 일반적인 기능(예: 빈 가져오기 getBean())을 정의합니다.
하지만 close() 메서드는 ApplicationContext 인터페이스에는 정의되어 있지 않습니다. close() 메서드는 ConfigurableApplicationContext 인터페이스에 정의되어 있으며, 이를 구현하는 AnnotationConfigApplicationContext와 같은 구체적인 컨테이너 클래스들이 이 메서드를 제공합니다.
ApplicationContext는 더 광범위한 기능을 제공하는 ConfigurableApplicationContext의 상위 인터페이스 또는 상위 타입입니다. 따라서 context 변수는 ApplicationContext 타입으로서는 close() 메서드를 직접 호출할 수 없습니다.

  -- 다운캐스팅((AnnotationConfigApplicationContext) context)을 사용하는 이유:
    1. 특정구현체의 기능 사용: close()와 같은 특정 기능을 사용하려면, ApplicationContext 인터페이스가 아닌 **실제로 생성된 객체의 구체적인 타입(AnnotationConfigApplicationContext)**으로 변환(다운캐스팅)해야 합니다.
    2. 타입 안전성: 자바 컴파일러는 context가 ApplicationContext 타입이라는 것만 알기 때문에, close() 메서드가 있는지 알지 못합니다. 
                    개발자가 AnnotationConfigApplicationContext로 다운캐스팅을 함으로써, "이 context 객체는 사실 AnnotationConfigApplicationContext 타입이고, 나는 이 타입의 close() 메서드를 호출할 거야"라고 명시적으로 컴파일러에게 알려주는 것입니다.
  
  -- 왜 close()가 필요한가?
  close() 메서드를 호출하는 이유는 스프링 컨테이너가 관리하는 빈들의 소멸(Destroy) 단계를 명시적으로 트리거하기 위함입니다. 특히, DisposableBean 인터페이스나 @PreDestroy 어노테이션을 통해 정의된 소멸 메서드(destroy 메서드)가 동작하도록 하기 위해 필요합니다.
   
