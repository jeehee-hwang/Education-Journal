
 Spring 요청 관련 요소 비교표

| 항목                | **기능**            | **사용 위치**        | **대상 데이터**         | **데이터 위치**   | **자동 변환**         | **주요 특징 / 용도**                   |
| ----------------- | ----------------- | ---------------- | ------------------ | ------------ | ----------------- | -------------------------------- |
| `WebRequest`      | 요청 정보 수동 처리       | 메서드 파라미터         | 파라미터, 헤더, 세션 등     | 전반적인 요청      | ❌ (직접 꺼냄)         | `HttpServletRequest`보다 가벼운 인터페이스 |
| `@RequestParam`   | 요청 파라미터 바인딩       | 메서드 파라미터         | 단일 값 또는 배열         | 쿼리스트링 / form | ✅ (String, int 등) | 폼 데이터나 URL 쿼리 값 받을 때             |
| `@ModelAttribute` | 파라미터를 객체에 바인딩     | 메서드 파라미터 / 선언부   | 객체 (DTO)           | 쿼리스트링 / form | ✅ (setter로 자동 주입) | 여러 값 묶은 객체 받을 때                  |
| `HttpSession`     | 세션 정보 관리          | 메서드 파라미터 / 내부 코드 | 세션 속성 값            | 서버 세션 영역     | ❌ (직접 꺼냄)         | 로그인 정보, 장바구니 등 사용자 상태 유지         |
| `@RequestBody`    | HTTP Body → 객체 변환 | 메서드 파라미터         | JSON/XML 등 구조화된 본문 | 요청 본문 (Body) | ✅ (Jackson 등)     | REST API에서 JSON 객체 받을 때 사용       |

1. WebRequest
누가 (Who): Spring 프레임워크가 제공하는 추상화된 HTTP 요청 객체입니다.
언제 (When): 클라이언트의 HTTP 요청이 들어와 DispatcherServlet이 핸들러 메소드를 호출하기 전에, 요청 정보를 좀 더 일반화된 방식으로 다루고 싶을 때 사용됩니다.
어디서 (Where): 주로 Controller의 핸들러 메소드의 파라미터로 선언하여 사용합니다.
무엇을 (What): HttpServletRequest의 기능을 감싸서(Wrapping) 제공하며, 요청 파라미터, 헤더, 세션 정보 등에 접근할 수 있는 일반화된 인터페이스를 제공합니다. 특정 웹 환경(Servlet API)에 종속적이지 않게 요청 정보를 다룰 수 있게 합니다.
어떻게 (How): 핸들러 메소드의 파라미터로 WebRequest 객체를 선언하면, Spring이 자동으로 요청 정보를 담은 WebRequest 인스턴스를 주입해 줍니다.
    @GetMapping("/test")
  public String handleRequest(WebRequest request) {
      String param = request.getParameter("paramName");
      // ...
      return "viewName";
  }
왜 (Why): Servlet API에 직접적으로 의존하지 않는 코드를 작성하여 웹 애플리케이션의 유연성과 테스트 용이성을 높이기 위함입니다. 다양한 웹 환경(Portlet 등)에서 동일한 코드를 재사용할 수 있도록 돕습니다.

2. @RequestParam
누가 (Who): Spring Framework가 클라이언트 요청 파라미터를 핸들러 메소드의 인자로 바인딩해 주기 위해 사용합니다.
언제 (When): 클라이언트가 HTTP 요청을 보낼 때, 쿼리 파라미터(?key=value), 폼 데이터(HTML form), 또는 멀티파트(multipart) 요청의 파트(part)로 데이터를 함께 보낼 때 사용됩니다.
어디서 (Where): Controller의 핸들러 메소드 파라미터 앞에 선언합니다.
무엇을 (What): HTTP 요청의 특정 파라미터 값을 메소드 인자로 직접 매핑해 줍니다. required (필수 여부), defaultValue (기본값 설정) 등의 속성을 가집니다.
어떻게 (How):
    @GetMapping("/search")
  public String searchProduct(@RequestParam("keyword") String searchKeyword,
                              @RequestParam(value = "page", defaultValue = "1") int pageNum) {
      // searchKeyword와 pageNum에 각각 요청 파라미터 값이 바인딩됩니다.
      return "searchResults";
  }
왜 (Why): HTTP 요청 파라미터의 값을 명확하고 간편하게 핸들러 메소드의 로컬 변수로 받아와서 사용하기 위함입니다. 이를 통해 파라미터 파싱 코드를 줄이고 가독성을 높일 수 있습니다.


3. @ModelAttribute
누가 (Who): Spring Framework가 요청 파라미터를 객체(DTO 또는 VO)의 속성으로 바인딩해 주기 위해 사용합니다. 또한, 모델에 데이터를 추가하여 뷰로 전달할 때도 사용됩니다.
언제 (When):
요청 파라미터 바인딩: 클라이언트가 여러 개의 요청 파라미터를 보낼 때, 이를 하나의 자바 객체로 묶어서 받고 싶을 때 사용됩니다 (예: 회원가입 폼 데이터).
모델 데이터 추가: 핸들러 메소드 실행 전이나 후에 특정 데이터를 Model에 자동으로 추가하고 싶을 때 사용됩니다.
어디서 (Where):
메소드 파라미터: 핸들러 메소드의 파라미터 앞에 선언합니다.
메소드 레벨: 핸들러 메소드와 별개로, @RequestMapping 메소드보다 먼저 실행되어 모델에 데이터를 추가하는 메소드 위에 선언합니다.
무엇을 (What):
메소드 파라미터에 사용될 때는, 요청 파라미터들을 해당 객체(DTO/VO)의 필드에 자동으로 바인딩해 줍니다.
메소드 레벨에 사용될 때는, 해당 메소드가 반환하는 객체를 Model에 추가하여 모든 뷰에서 사용할 수 있도록 합니다.
어떻게 (How):
- 파라미터 바인딩:
    // MemberDTO에는 userId, userName 등의 필드가 있고, 요청 파라미터 이름과 일치함
    @PostMapping("/join")
    public String join(@ModelAttribute MemberDTO member) {
        // member 객체에 userId, userName 등의 값이 자동으로 채워짐
        return "joinSuccess";
    }
- 모델 데이터 추가:
    @ModelAttribute("commonMessage") // "commonMessage"라는 이름으로 반환 값을 모델에 추가
    public String addCommonMessage() {
        return "모든 페이지에 표시될 공통 메시지입니다.";
    }
    // 이 메시지는 모든 뷰에서 ${commonMessage}로 접근 가능
왜 (Why): 복잡한 요청 파라미터를 객체 지향적으로 처리하고, 뷰와 컨트롤러 간에 데이터를 효율적으로 주고받기 위함입니다. 폼 데이터 바인딩 시 매우 유용합니다.

4. HttpSession
누가 (Who): Java Servlet API의 HttpSession 객체를 Spring MVC 핸들러 메소드에서 사용합니다.
언제 (When): 클라이언트(사용자)의 세션 정보를 서버 측에서 유지하고 싶을 때 사용됩니다. (예: 로그인 상태 유지, 장바구니 정보, 사용자별 설정 등)
어디서 (Where): Controller의 핸들러 메소드 파라미터로 선언합니다.
무엇을 (What): 클라이언트와 서버 간의 세션 데이터를 저장, 조회, 삭제할 수 있도록 하는 객체입니다. 세션은 서버 메모리에 저장되며, 클라이언트에게는 세션 ID가 쿠키 형태로 전달됩니다.
어떻게 (How): 핸들러 메소드의 파라미터로 HttpSession 객체를 선언하면, Spring이 현재 세션 객체를 주입해 줍니다.
    @GetMapping("/login")
    public String login(HttpSession session) {
        session.setAttribute("loggedInUser", "user123"); // 세션에 데이터 저장
        return "home";
    }
    
    @GetMapping("/profile")
    public String viewProfile(HttpSession session, Model model) {
        String user = (String) session.getAttribute("loggedInUser"); // 세션에서 데이터 조회
        model.addAttribute("user", user);
        return "profile";
    }
왜 (Why): HTTP는 Stateless(무상태) 프로토콜이므로, 클라이언트의 요청마다 독립적으로 처리됩니다. 하지만 웹 애플리케이션에서는 사용자 상태(로그인 여부, 장바구니 내용 등)를 유지해야 할 필요가 있는데, 이때 HttpSession을 사용하여 서버 측에서 사용자별 상태를 관리하기 위함입니다.

5. @RequestBody
누가 (Who): Spring Framework가 HTTP 요청의 본문(Body)에 담긴 데이터를 핸들러 메소드의 인자로 변환하여 바인딩해 주기 위해 사용합니다.
언제 (When): 주로 RESTful API를 개발할 때, 클라이언트가 JSON, XML 등 구조화된 데이터를 HTTP 요청 본문에 담아 서버로 보낼 때 사용됩니다 (예: POST 요청으로 JSON 형태의 회원 정보 등록).
어디서 (Where): Controller의 핸들러 메소드 파라미터 앞에 선언합니다.
무엇을 (What): HTTP 요청 본문(Body)에 있는 데이터를 메소드 인자의 자바 객체로 변환합니다. 변환 과정에는 HttpMessageConverter가 사용되며, 주로 JSON (Jackson 라이브러리) 또는 XML (JAXB) 데이터를 자바 객체로 역직렬화(Deserialize)합니다.
어떻게 (How):
    // 클라이언트가 {"name": "홍길동", "age": 30} 과 같은 JSON을 요청 본문에 담아 보낼 때
    @PostMapping("/users")
    public String createUser(@RequestBody UserDTO user) {
        // user 객체에 JSON 데이터가 자동으로 매핑됩니다.
        System.out.println("User created: " + user.getName());
        return "userCreated";
    }
왜 (Why): 클라이언트-서버 간에 데이터를 효율적으로 주고받기 위함입니다. 특히 프론트엔드 프레임워크(React, Angular, Vue.js)나 모바일 앱에서 JSON/XML 형태로 데이터를 주고받는 경우에 필수적으로 사용됩니다. 이를 통해 HTTP 요청 파라미터의 길이 제한이나 복잡한 폼 데이터 처리를 피할 수 있습니다.    


** 예외처리 (지역, 전역)
1. 지역 예외 처리 (Local Exception Handling)
특정 컨트롤러 클래스 내에서 발생하는 예외만을 처리하는 방법입니다. @ExceptionHandler 어노테이션을 사용

1.1 문법
@Controller // 또는 @RestController
public class MyController {

    // 특정 예외를 처리하는 메소드
    @ExceptionHandler(SpecificException.class) // 처리할 예외 타입 지정
    public String handleSpecificException(SpecificException ex, Model model) {
        // 예외 처리 로직
        model.addAttribute("error", "특정 오류가 발생했습니다: " + ex.getMessage());
        return "errorPage"; // 오류 페이지 뷰 이름 반환
    }

    // 여러 예외를 한 번에 처리하는 경우
    @ExceptionHandler({AnotherException.class, YetAnotherException.class})
    public ResponseEntity<String> handleMultipleExceptions(Exception ex) {
        // 예외 처리 로직 (JSON/XML 응답을 보낼 때 유용)
        return new ResponseEntity<>("다중 오류 발생: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }

    // RuntimeException 계열 등 모든 하위 예외를 처리하는 경우
    @ExceptionHandler(RuntimeException.class)
    public String handleRuntimeException(RuntimeException ex) {
        // 예외 처리 로직
        return "genericErrorPage";
    }

    // 일반적인 핸들러 메소드
    @GetMapping("/test-exception")
    public String testException() {
        if (true) { // 예외를 강제로 발생시키는 예시
            throw new SpecificException("테스트용 특정 예외 발생!");
        }
        return "success";
    }
}

1.2 사용법
  1. @ExceptionHandler 어노테이션 활용: 예외를 처리하고자 하는 컨트롤러 클래스 내부에, 예외를 처리할 메소드를 정의하고 그 위에 @ExceptionHandler 어노테이션을 붙입니다.
  2. 처리할 예외 타입 지정: @ExceptionHandler 괄호 안에 처리하고자 하는 예외 클래스(예: SpecificException.class)를 지정합니다. 여러 개의 예외를 처리하려면 배열 형태로 지정할 수 있습니다.
  3. 메소드 파라미터: 예외 객체를 인자로 받을 수 있습니다 (예: SpecificException ex). Model, HttpServletRequest, HttpServletResponse, HttpSession 등 다양한 서블릿 API 객체도 파라미터로 받을 수 있습니다.
  4. 반환 타입:
    String: 뷰(View)의 이름을 반환하여 특정 오류 페이지를 보여줄 수 있습니다.
    ModelAndView: 모델 데이터와 뷰 이름을 함께 반환할 수 있습니다.
    ResponseEntity<?>: HTTP 응답 상태 코드, 헤더, 본문을 직접 제어하여 REST API에서 오류 응답을 보낼 때 유용합니다.
    void: HTTP 상태 코드를 설정하고 아무것도 반환하지 않을 수도 있습니다 (예: response.sendError(HttpStatus.BAD_REQUEST.value());).
  5. 동작 방식: 해당 컨트롤러 내부의 핸들러 메소드에서 지정된 예외가 발생하면, @ExceptionHandler 메소드가 이를 가로채서 처리합니다.

1.3 장점/단점
  -  장점: 특정 컨트롤러에서 발생하는 특정 예외에 대한 매우 세밀한 제어가 가능합니다.
  - 단점: 컨트롤러마다 동일한 예외 처리 로직을 반복적으로 작성해야 할 수 있으며, 모든 컨트롤러에 걸쳐 발생하는 공통 예외를 처리하기 어렵습니다.

2. 전역 예외 처리 (Global Exception Handling)
전역 예외 처리는 애플리케이션 전체에서 발생하는 예외를 한곳에서 처리하는 방법입니다. 주로 @ControllerAdvice 어노테이션을 사용

2.1 문법
// 전역 예외 처리를 위한 별도의 클래스 생성
@ControllerAdvice // 모든 @Controller에 적용되는 어드바이스
// @RestControllerAdvice // @RestController에만 적용 (== @ControllerAdvice + @ResponseBody)
public class GlobalExceptionHandler {

    // 특정 예외를 전역적으로 처리하는 메소드
    @ExceptionHandler(NullPointerException.class)
    public String handleNullPointerException(NullPointerException ex, Model model) {
        model.addAttribute("error", "널(Null) 포인터 오류가 발생했습니다: " + ex.getMessage());
        return "error/nullPointerErrorPage"; // 전역 오류 페이지 뷰 이름
    }

    // 커스텀 예외를 전역적으로 처리 (REST API용)
    @ExceptionHandler(CustomBusinessException.class)
    public ResponseEntity<ErrorResponse> handleCustomBusinessException(CustomBusinessException ex) {
        ErrorResponse errorResponse = new ErrorResponse(ex.getErrorCode(), ex.getMessage());
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    // 모든 예외를 포괄적으로 처리하는 메소드 (가장 넓은 범위)
    @ExceptionHandler(Exception.class) // 가장 상위의 Exception을 처리
    public String handleAllExceptions(Exception ex) {
        // 로그 기록 등 공통 처리
        System.err.println("전역적으로 처리된 예외: " + ex.getMessage());
        return "error/globalErrorPage";
    }

    // 특정 HTTP 상태 코드를 처리하는 경우 (선택 사항)
    // @ResponseStatus 어노테이션과 함께 사용하면 특정 예외 발생 시 HTTP 상태 코드 지정 가능
    @ResponseStatus(HttpStatus.NOT_FOUND) // 404 상태 코드 반환
    @ExceptionHandler(NoResourceFoundException.class) // Spring 4.3 이상에서 사용 가능
    public String handleNoResourceFoundException(NoResourceFoundException ex) {
        return "error/404";
    }
}

// 예시: ErrorResponse DTO (REST API 응답용)
class ErrorResponse {
    private String code;
    private String message;

    public ErrorResponse(String code, String message) {
        this.code = code;
        this.message = message;
    }
    // getter, setter
}

2.2 사용법
  1. @ControllerAdvice 클래스 생성: 별도의 클래스를 생성하고 그 위에 @ControllerAdvice (또는 REST API만 다룬다면 @RestControllerAdvice) 어노테이션을 붙입니다.
  2. @ExceptionHandler 메소드 정의: 이 @ControllerAdvice 클래스 내부에 위에서 설명한 @ExceptionHandler 메소드를 정의합니다.
  3. 동작 방식: 애플리케이션의 어떤 컨트롤러에서든 @ExceptionHandler에 지정된 예외가 발생하면, 이 @ControllerAdvice 클래스의 해당 메소드가 예외를 가로채서 처리합니다. 가장 구체적인 예외 핸들러가 우선적으로 적용됩니다.
  4. @ResponseStatus (선택적): 특정 예외가 발생했을 때 HTTP 응답 상태 코드를 지정하고 싶다면 @ExceptionHandler와 함께 @ResponseStatus 어노테이션을 사용할 수 있습니다.

2.3 장점/단점
  1. 장점:
    중복 코드 제거: 모든 컨트롤러에서 공통으로 발생하는 예외를 한곳에서 관리하여 중복 코드를 제거할 수 있습니다.
    유지보수 용이성: 예외 처리 로직이 한 곳에 모여 있어 관리와 유지보수가 편리합니다.
    일관된 응답: 애플리케이션 전체에 걸쳐 일관된 방식으로 오류 응답을 제공할 수 있습니다.
  2. 단점: 특정 컨트롤러의 매우 특수한 예외 처리가 필요한 경우, 지역 예외 처리 방식보다 유연성이 떨어질 수 있습니다 (하지만 대부분 전역 처리가 더 효율적입니다).

3. 지역 vs. 전역 예외 처리 선택 기준
- 특정 컨트롤러에서만 발생하는 아주 특수한 예외: 지역 예외 처리 (@ExceptionHandler in Controller)
- 애플리케이션 전반에 걸쳐 공통적으로 발생하는 예외 (NullPointerException, IllegalArgumentException 등) 또는 커스텀 예외: 전역 예외 처리 (@ControllerAdvice + @ExceptionHandler)
- RESTful API에서 일관된 오류 응답 형식 (JSON/XML)을 제공해야 할 때: 전역 예외 처리 (@RestControllerAdvice가 매우 유용).
