- 프로세스와 스레드
- crud 연습

## Thread 개요
### 01-01-01. Process와 Thread

- Process
    - 실행 중인 프로그램을 가리키며, 프로그램이 실행될 때마다 개별적으로 생성된다.
    - 하나의 프로세스는 프로그램을 수행함에 있어 필요한 데이터, 메모리 등의 할당 받은 자원, 하나 이상의 스레드로 구성된다.
- Thread
    - 프로세스 내에서 할당된 자원을 이용해 실제 작업을 수행하는 작업 단위
    - 모든 프로세스는 하나 이상의 스레드를 가지며 각각 독립적인 작업 단위를 지닌다.

### 01-01-02. main thread

- 모든 자바 프로그램은 메인 스레드가 main() 메소드를 실행하며 시작되어, main() 메소드의 첫 코드부터 아래로 순차적으로 실행되다가
   return을 만나면 종료된다.
- 필요에 의해 작업 스레드들을 만들어서 병렬 코드를 실행(= 멀티 스레드를 이용한 멀티 태스킹)할 수 있다.
- 싱글 스레드는 메인 스레드가 종료되면 프로세스도 종료되지만, 멀티 스레드는 실행 중인 스레드가 하나라도 있다면 프로세스가 종료되지 않는다.

## 01-02. Multi Thread
### 01-02-01. Multi Process와 Multi Thread
- 멀티 프로세스 : 각각의 프로세스를 독립적으로 실행한다.
- 멀티 스레드 : 하나의 프로세스 내에서 여러 스레드가 동시에 작업을 수행한다.
* 그림을 보는게 훨씬 이해하기 쉽다 

01-02-02. Single Thread와 Multi Thread
- 싱글 스레드 : 메인 스레드 하나만 가지고 작업을 처리하며, 한 작업씩 차례대로 처리한다.
- 멀티 스레드 : 메인 스레드 외의 추가적인 스레드를 이용하여 병렬적으로 작업을 처리한다.

* 일을 순차적으로 진행시키고 싶으면 싱글 스레드를 사용한다. 
* 멀티 스레드는 작업이 순차 적으로 동시에 일어나는게 아니다. 사용자가 동시 다발적으로 여러가지 작업을 수행하고 작업이 끝나는 순서대로 작동한다. 


- 멀티 스레드의 장점
    1. 자원을 보다 효율적으로 사용할 수 있다.
    2. 사용자에 대한 응답성이 향상된다.
    3. 애플리케이션의 응답성이 향상된다.
    4. 작업이 분리되어 코드를 간결하게 작성할 수 있다.
    5. CPU 효율성이 향상된다.
- 멀티 스레드의 단점
    1. 동기화(= Synchronization)에 주의해야 한다.
    2. 교착상태(= dead-lock)가 발생하지 않도록 주의해야 한다.
    3. 이처럼 프로그래밍 시 고려해야 할 사항이 많다.

## 01-03. Thread 사용
### 01-03-01. Thread 구현 방법
1. Thread 클래스를 상속 받아 구현하는 방법이 있다.
2. Runnable 인터페이스로 구현하는 방법이 있다.

### 01-03-02. Thread 동작 구조
1. run() 호출
                                                       run()       
  main()                                              main()           
Main Thread   ---------------------------------->   Main Thread 
자바 프로그램 시작     main() 메소드에서 run() 호출    main() 메소드 위로  쌓임 


2. start() 호출
  main()                                                  main()             run()   
Main Thread   -------------------------------------->   Main Thread     Main Thread 
자바 프로그램 시작     main() 메소드에서 start() 호출       start()메소드가 새로운 스레드 생성  
                                                              그 위에 run() 메소드가 쌓임 


# Servlet & JSP 개요
Network 통신
Server-client Model
- 서버는 특정 서비스를 제공하는 컴퓨터를 말하며, 클라이언트는 해당 서비스를 이용하는 사용자를 의미한다.

Web 통신 구조
- 그림을 봐둘것!!! 

Server의 종류
종류	설명
Web Server	웹 브라우저와 HTTP 프로토콜을 사용하여 사용자의 요구에 따른 특정 서비스를 제공하는 서버
Mail Server	인터넷을 통해 사용자 간의 전자 우편을 주고 받는 서비스 제공
FTP Server	서버 내에 파일을 업로드, 다운로드 할 수 있도록 파일 관리 기능 제공
Talnet Server	Terminal, 텍스트로만 이루어진 창에서 특정 명령어를 통해 원격지 서버를 접속 및 관리
Database Server	데이터를 저장하고, 원격지에 접속할 경우 권한에 따라 해당 데이터를 열람, 추가, 수정, 삭제하는 기능 처리

Web Server란
- 사용자에게 HTML 페이지나 jpg, png와 같은 이미지를 HTTP 프로토콜을 통해 웹 브라우저에 제공하는 서버로, 
  내부의 내용이 이미 만들어져 있는 정적인 요소들을 화면에 보여주는 역할을 한다.

개별(로컬)프로그램과 서버 프로그램의 특징
- 개별 프로그램의 특징 및 단점
    1. 프로그램 업데이트 발생 시 각각 다시 다운로드 해야 한다.
    2. 각 프로그램에서 생성된 데이터 개별 저장되므로 공유 불가하다.
    
- 서버 프로그램 특징
    1. 프로그램 업데이트 발생 시 서버가 상관하지 않아도 클라이언트가 서버에서 다운 받아 업데이트를 개별적으로 진행한다.
    2. 데이터는 서버에 일괄 저장된다.



수업 내용 중 일부 (코드 위주) =============
   /* comment. 프로세스와 스레드
        *  프로세스는 실행중인 프로그램이라고 할 수 있다.
        *  스레드는 프로세스 내에서 실제로 작업을 수행하는 주체를 의미한다.
        *  모든 프로세스는 한 개 이상의 스레드가 존재하며
        *  두 개 이상의 스레드를 가지는 프로세스를 멀티스레드라고 한다.
        *
        *
        *  스레드를 생성하는 방법
        *  1. Thread 클래스를 상속받는 방법
        *  2. Runnable 인터페이스를 상속받는 방법
        * */

        Car car = new Car();
        Tank tank = new Tank();
        Plane plane = new Plane();

        /* Thread 타입의 인스턴스로 변환 */
//        Thread t1 = car;
//        Thread t2 = tank;
//        Thread t3 = new Thread(plane);

        Thread t1 = new Car();
        Thread t2 = new Tank();
        Thread t3 = new Thread(plane);

//        t1.run();
//        t2.run();
//        t3.run();

        t1.start();
        t2.start();
        t3.start();
    }
}

package com.ohgiraffers.lifecycle.section01.xml;

import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServlet;

import java.io.IOException;

public class LifeCycleTestServlet extends HttpServlet {

    /* 각 메소드의 호출 횟수를 카운트 할 목적의 필드 */
    private int initCount = 1;
    private int serviceCount = 1;
    private int destroyCount = 1;

    /* 기본 생성자 */
    public LifeCycleTestServlet() {

    }

    /* 최초 서블릿 요청 시에 동작하는 메소드로 최초 요청 시에만 실행하고 두 번째 요청부터는 호출하지 않는다. */
    @Override
    public void init(ServletConfig config) throws ServletException {
        System.out.println("xml 매핑 init() 메소드 호출 : " + initCount++);
    }

    /* 컨테이너가 종료될 때 호출되는 메소드이며 주로 자원을 반납하는 용도로 사용한다. */
    @Override
    public void destroy() {
        System.out.println("xml 매핑 destroy() 메소드 호출 : " + destroyCount++);
    }

    /* 최초 요청 시에는 init() 이후에 동작하고, 두 번째 요청부터는 init() 호출 없이 바로 service()를 호출한다. */
    @Override
    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {
        System.out.println("xml 매핑 service() 메소드 호출 : " + serviceCount++);
    }
}

package com.ohgiraffers.lifecycle.section02.annotation;

import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;

import java.io.IOException;

/* loadOnStartup 속성으로 우선순위를 지정할 수 있으며, 서버가 start 될 때 인스턴스를 생성하고 init()를 호출한다. */
@WebServlet(value = "/annotation-lifecycle", loadOnStartup = 1)
public class LifeCycleTestServlet extends HttpServlet {

    private int initCount = 1;
    private int serviceCount = 1;
    private int destroyCount = 1;

    public LifeCycleTestServlet() {}

    @Override
    public void init(ServletConfig config) throws ServletException {
        System.out.println("annotation 매핑 init() 메소드 호출 : " + initCount++);
    }

    @Override
    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {
        System.out.println("annotation 매핑 service() 메소드 호출 : " + serviceCount++);
    }

    @Override
    public void destroy() {
        System.out.println("annotation 매핑 destroy() 메소드 호출 : " + destroyCount++);
    }
}
