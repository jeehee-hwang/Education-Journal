
오늘 배운 내용을 복습해보자 

- httpRequest의 getMethod() 는 어떠한 http method 요청이 들어온 것인지 문자열 형태로 반환 
  String httpMethod = httpRequest.getMethod();

- java.sql.Date : 데이터베이스에 사용자가 입력한 날짜를 저장할 때, 데이터베이스의 날짜 포맷과 맞추기 위한 용도의 클래스 */
  java.sql.Date birthday = java.sql.Date.valueOf(request.getParameter("birthday"));


### 데이터 전송 방식

1. get 방식 
    - URL창에 “ **?** “ 뒤에 데이터를 입력하는 방법(= 쿼리스트링)으로 전송한다.
    - 전송 데이터가 여러 개이면 **&**로 묶어서 보낸다.
    - 데이터 검색에 주로 사용되며, 데이터 크기 한계가 있고 보안에 취약하다.
    - URL 쿼리스트링 예시 : http://localhost:8080/sendMessage?message=abc&code=20

2. post 방식 
    - HTTP header의 내용으로 데이터를 전송한다.
    - 전송 데이터 크기에 제한이 없고, header에 포함해 전송하므로 보안이 뛰어나다.


Sevlet Method
- 서블릿이 get/post의 두 방식 중 하나로 요청 정보를 전달 받으면, 
  request와 response를 전달하면서 해당하는 처리 메소드(doGet() 메소드 또는 doPost() 메소드)를 호출한다.
  → 즉, 톰캣 서블릿 컨테이너가 요청 url로 매핑된 서블릿 클래스의 인스턴스를 생성 -> service method를 호출 ->
     HttpServlet을 상속받아 오버라이딩한 현재 클래스의 doGet() 또는 doPost() 메소드가 동적바인딩에 의해 호출
       ⇒ 이때, 서블릿 메소드에 대하여 반드시 ServletException 처리를 해야 한다.
- HTML에서 method 속성을 이용해 방식을 결정하며, default는 get 방식이다.

doGet() 메소드
- 클라이언트에서 데이터 전송 방식을 get으로 전송하면 호출되는 메소드이다.
- 쿼리스트링으로 보내는 데이터가 노출되므로 보안에 취약하다는 단점이 있으나, 속도면에서 더 빠르므로 검색 기능에 적합하다.

doPost() 메소드
- 클라이언트에서 데이터 전송 방식을 post로 전송하면 호출되는 메소드이다.
- POST 요청은 서버의 리소스에 내용을 추가하는 요청이기 때문에 요청하는 데이터가 필요한 경우가 대부분이다. 
- 기본적으로 서버단에서 페이로드를 디코딩 하는 방식은 지정되어 있지 않고, 
  인코딩된 방식을 명시하지 않으면 기본 ISO-8859-1로 해석하므로 값을 꺼내오면 한글인 글자가 깨지는 현상이 발생
   -> request 객체의 getCharacterEncoding() 메소드를 호출해보면 null을 반환한다.

@Override
protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	System.out.println(request.getCharacterEncoding());
}

HttpServletRequest
- HTTP Servlet을 위한 요청 정보(request information)를 제공하는 메소드를 지정
- HttpServletRequest 객체의 주요 메소드
    | **method 명** | **내용** |
    | getParameter(String) | client가 전송한 값의 명칭이 매개변수와 같은 값 가져옴 |
    | getParameterNames() | client가 전송한 값의 명칭 가져옴 |
    | setAttribute(String, object) | request 객체로 전달할 값을 String 이름-Object 값으로 설정 |
    | getAttribute(String) | 매개변수와 동일한 객체 속성 값 가져옴 |
    | removeAttribute(String) | request객체에 저장된 매개변수와 동일한 속성 값 삭제 |
    | setCharacterEncoding(String) | 전송 받은 request객체 값들의 CharaterSet 설정 |
    | getRequestDispatcher(String) | 컨테이너 내에서 request, response객체를 전송하여 처리한 컴포넌트(jsp파일 등)를 가져옴 (forward() method와 같이 사용) |

Request Header
    요청 시 전달되는 헤더라는 것이 어떤 정보를 포함하고 있는 지 확인한다. 
      헤더의 종류 전통적으로 4가지 카테고리로 구분된다.
      1. General Header : 요청 및 응답 모두에 적용되지만 최종적으로는 body에 전송되는 것과 관련이 없는 헤더이다.
      2. Request Header : Fetch될 리소스나 클라이언트 자체에 대한 상세 정보를 포함하는 헤더이다.
      3. Response Header : 위치나 서버 자체와 같은 응답에 대한 부가적인 정보를 갖는 헤더이다.
      4. Entity Header : 컨텐츠 길이나 같은 엔티티 body에 대한 상세 정보를 포함하는 헤더이다.
                          (요청 응답 모두 사용되며, 메시지 바디의 컨텐츠를 나타내기에 GET요청은 해당하지 않는다.)
     

Exception Handler

- sendError() 메소드를 사용하여 에러를 발생시킬 수 있다.
    response.sendError(500, "서버 내부 오류입니다. 서버 오류는 개발자의 잘못이고, 개발자는 여러분입니다.");

  @WebServlet("/status")
  public class StatusCodeTestServlet extends HttpServlet {
  
      @Override
      protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

//        response.sendError(404, "없는 페이지 잆니다. 경로를 확인해주세요.");
        response.sendError(500, "서버 내부 오류입니다. 서버 오류는 개발자의 잘못이고, 개발자는 여러분이다.");
    


 스트림을 활용한 동적 페이지 응답    
 1. 응답 헤더의 타입을 설정한다.
      response.setContentType("text/html");
    
    - 기본값은 text/plain이다.
    - HTML태그를 사용하면 요청 시 text/html도 응답으로 수락 가능하도록 헤더 설정이 되어있어 자동으로 text/html로 인식한다.
    
2. 응답할 내용의 인코딩 방식을 설정한다.
    response.setCharacterEncoding("UTF-8");
    
    - 응답 시 별도 인코딩을 지정하지 않으면 기본으로 설정된 인코딩 방식(ISO-8859-1)을 따르므로  한글 데이터가 깨져서 현출된다.
    - 따라서 응답할 인코딩 방식이 UTF-8임을 응답 헤더에 설정하면 브라우저가 이를 해석할 때 UTF-8로 인식하고 해석하여 한글 데이터가 정상적으로 현출된다.
    - 응답 헤더와 인코딩 설정을 동시에 할 수도 있다.
        response.setContentType("text/html; charset=UTF-8");
    
    ※ 반드시 getWriter()로 스트림을 얻어오기 전에 설정해야 한다.
    
3. 응답을 위한 스트림을 가져와 응답을 내보낸다.
    
    PrintWriter out = response.getWriter();
    out.print(responseBuilder.toString());
    
4. 응답에 사용한 스트림을 닫는다.
    out.close();

   스트리 수업 내용 중  ================

@WebServlet("/headers")
public class ResponseHeaderPrintServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        response.setContentType("text/html;charset=UTF-8"); // 헤더 설정
//        response.setHeader("Refresh", "1");

        PrintWriter out = response.getWriter();

        long currentTime = System.currentTimeMillis();

        out.print("<h1>" + currentTime + "</h1>");

        out.close();

        Collection<String> responseHeaders = response.getHeaderNames();
        Iterator<String> iter = responseHeaders.iterator();
        while (iter.hasNext()) {
            String headerName = iter.next();
            System.out.println(headerName + " : " + response.getHeader(headerName));
        }

    }
}
    
