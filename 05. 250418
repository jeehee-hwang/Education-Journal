** 팀 스터디를 하면서 느낀점  : 1.  문장을 함수식으로 변환하는 부분이 매우 힘듬 -> 많은 문제를 풀어봐야 함 
                              2.  단어의 정의를 명확하게 이해해야함 

객체안에 변수가 있다. 객체는 서랍장(여러가지가 다 담길 수 있음), 변수는 상자 (단 한개만 담김) 

- 03-01_javascript(core) 9. array
- 03-02_javascript(web) 1-1_DOM(노드 취득), 2_DOM(노드 탐색)

array (배열)
배열은 여러 개의 값을 순차적으로 나열한 자료구조이다. 
배열이 가지고 있는 값을 요소라 부르며 자바스크립트의 모든 값은 배열의 요소가 될 수 있다.

배열 리터럴
  const arr = ['바나나', '복숭아', '키위'];

배열 생성자 함수
- 전달 된 인수가 없을 경우 빈 배열을 생성한다.
- 전달 된 인수가 1개이고 숫자인 경우 length 프로퍼티 값이 인수인 배열을 생성한다.
- 전달 된 인수가 2개 이상이거나 숫자가 아닌 경우 인수를 요소로 갖는 배열을 생성한다.

Array.of 메소드
- 전달 된 인수를 요소로 갖는 배열을 생성한다. 

배열의 요소 접근
- 배열의 요소는 자신의 위치를 나타내는 인덱스를 가지며 배열의 요소에 접근할 때 사용된다.
- 요소에 접근 시에는 대괄호 표기법을 사용한다.

length 프로퍼티, for문
- 배열은 요소의 개수, 즉 배열의 길이를 나타내는 length 프로퍼티를 갖는다.
- 배열은 인덱스와 length 프로퍼티를 갖기 때문에 for문을 통해 순차적으로 요소에 접근할 수 있다.

typeof 배열
- 배열이라는 별도의 타입은 존재하지 않으며 배열은 객체 타입이다.

배열의 장점은 처음부터 순차적으로 요소에 접근할수도 있고 마지막부터 역순으로 요소에 접근할 수도 있음 
 특정 위치부터 순차적으로 요소에 접근할 수도 있다는 것이다.

length property (length 프로퍼티)
- length 프로퍼티는 요소의 개수를 나타내는 0 이상의 정수를 값으로 갖는다.
- length 프로퍼티 값은 배열에 요소를 추가하거나 삭제하면 자동 갱신된다.
- length 프로퍼티에 임의의 숫자 값을 명시적으로 할당할 수도 있다.
- 현재 length 프로퍼티보다 작은 숫자 값을 할당하면 배열의 길이가 줄어든다.
- 현재 length 프로퍼티보다 큰 숫자 값을 할당하면 length 프로퍼티의 값은 변경되지만 배열의 길이가 늘어나지는 않는다.

 자바스크립트 문법이 허용하긴 하지만 배열은 같은 타입의 요소를 연속적으로 위치 시키는 것이 효율적으로 동작한다.

1. 배열 메소드
Array.prototype.indexOf, Array.prototype.lastIndexOf, Array.prototype.includes
- indexOf : 배열에서 요소가 위치한 인덱스를 리턴
- lastIndexOf : 배열의 요소가 위치한 마지막 인덱스를 리턴
- includes : 배열에 해당 요소 포함 여부 리턴

Array.prototype.push, Array.prototype.pop
- push : 배열의 맨 뒤에 요소 추가
- pop : 배열의 맨 뒤에 요소 제거

Array.prototype.unshift, Array.prototype.shift
- unshift : 배열의 맨 앞에 요소 추가
- shift : 배열의 맨 앞 요소 제거 후 반환

Array.prototype.concat
- concat : 두 개 이상의 배열을 결합

Array.prototype.slice, Array.prototype.splice
- slice : 배열의 요소 선택 잘라내기
- splice : 배열의 index 위치의 요소 제거 및 추가

Array.prototype.join
- join : 배열을 구분자로 결합하여 문자열로 반환

Array.prototype.reverse
- : 배열의 순서를 뒤집음

2. 배열 고차 함수
고차 함수 : 함수를 인수로 전달 받거나 함수를 반환하는 함수

Array.prototype.sort
- 배열을 정렬 기준으로 정렬한다
- 오름차순 정렬이 기본이며 정렬 후 정렬 순서를 유지한다.
- 배열은 기본적으로 문자열 정렬이 되므로 일부 올바르지 않게 정렬 되는 모습을 확인할 수 있다.
- 다른 정렬 기준을 사용하려면 매개변수로 compare 함수 전달해야 한다.

Array.prototype.forEach
- for를 대체할 수 있는 고차함수이다.

Array.prototype.map
- 배열 요소 전체를 대상으로 콜백 함수 호출 후 반환 값들로 구성 된 새로운 배열 반환한다.

Array.prototype.filter
- 배열 요소 전체를 대상으로 콜백 함수 호출 후 반환 값이 true인 요소로만 구성 된 새로운 배열 반환한다.

Array.prototype.some
- 배열 내 일부 요소가 콜백 함수의 테스트를 통과하는지 확인하여 그 결과를 boolean으로 반환한다.

Array.prototype.every
- 배열 내 모든 요소가 콜백함수의 테스트를 통과하는지 확인하여 그 결과를 boolean으로 반환한다.

Array.prototype.find, Array.prototype.findIndex
- find : 배열을 순회하며 각 요소에 대하여 인자로 주어진 콜백함수를 실행하여 그 결과가 참인 첫번째 요소를 반환
    - 참인 요소가 존재하지 않는다면 undefined를 반환
- findIndex : 배열을 순회하며 각 요소에 대하여 인자로 주어진 콜백함수를 실행하여 그 결과가 참인 첫번째 요소의 인덱스를 반환
    - 참인 요소가 존재하지 않는다면 -1을 반환
- find, findIndex는 일치하는 요소를 찾으면 더 이상 탐색하지 않고 하나의 요소, 
  인덱스만 반환하므로 일치하는 여러 요소를 반환 받지는 못한다.
- 이 때 filter를 이용하면 콜백함수의 실행 결과가 true인 배열 요소의 값만을 추출한 새로운 배열을 반환 받을 수 있다.



