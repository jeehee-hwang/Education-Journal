- 프로젝트 회사 구성원 부서 및 직책 수정 삭제 

** 오류 1 
: findById를 찾지 못함 

  메서드 호출 방식이 잘못되었기 때문입니다.
  findById는 static 메서드가 아니므로 클래스 이름(OrgDepartmentRepository)에 직접 붙여서 호출할 수 없습니다. 
  대신, 스프링의 의존성 주입(Dependency Injection)으로 받은 인스턴스 변수를 통해 호출해야 합니다.

서비스 클래스에 final 키워드로 레포지토리 인스턴스 변수를 선언하고, 이 변수를 통해 findById를 호출해야 합니다.

## 잘못된 코드 (현재 코드)

// 클래스 이름에 직접 .findById()를 호출하여 에러 발생
DepartmentEntity department = OrgDepartmentRepository.findById(reqDTO.getDepartmentId());

PositionEntity position = OrgPositionRepository.findById(reqDTO.getPositionId());

## 올바른 코드 (수정 코드)

// 주입받은 인스턴스 변수(departmentRepository)를 통해 호출
DepartmentEntity department = departmentRepository.findById(reqDTO.getDepartmentId())
        .orElseThrow(() -> new BusinessException(404, "존재하지 않는 부서입니다."));

// 주입받은 인스턴스 변수(positionRepository)를 통해 호출
PositionEntity position = positionRepository.findById(reqDTO.getPositionId())
        .orElseThrow(() -> new BusinessException(404, "존재하지 않는 직책입니다."));

## 전체적인 서비스 클래스 구조
아래와 같이 OrgMemberService에 레포지토리가 의존성 주입되어 있어야 합니다. @RequiredArgsConstructor 어노테이션이 final 필드에 대한 생성자를 자동으로 만들어주어 의존성 주입이 완료됩니다.

package com.ourhour.domain.org.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
// ... 다른 import ...

@Service
@RequiredArgsConstructor // final 필드에 대한 생성자를 만들어 의존성을 주입해줍니다.
public class OrgMemberService {

    // 의존성 주입된 레포지토리 인스턴스 변수들
    private final OrgParticipantMemberRepository orgParticipantMemberRepository;
    private final DepartmentRepository departmentRepository; // 'OrgDepartmentRepository'가 아닌 'DepartmentRepository'
    private final PositionRepository positionRepository;     // 'OrgPositionRepository'가 아닌 'PositionRepository'

    @Transactional
    public void updateMemberDeptAndPosition(Long orgId, Long memberId, UpdateMemberDeptAndPositionReqDTO reqDTO) {
        // 1. 수정할 구성원 조회
        OrgParticipantMemberEntity participantMember = orgParticipantMemberRepository
                .findByOrgEntity_OrgIdAndMemberEntity_MemberId(orgId, memberId);

        // 2. 부서 정보 업데이트 (인스턴스 변수로 호출)
        if (reqDTO.getDepartmentId() != null) {
            DepartmentEntity department = departmentRepository.findById(reqDTO.getDepartmentId())
                    .orElseThrow(() -> new BusinessException(404, "존재하지 않는 부서입니다."));
            participantMember.changeDepartment(department);
        } else {
            participantMember.removeDepartment();
        }

        // 3. 직책 정보 업데이트 (인스턴스 변수로 호출)
        if (reqDTO.getPositionId() != null) {
            PositionEntity position = positionRepository.findById(reqDTO.getPositionId())
                    .orElseThrow(() -> new BusinessException(404, "존재하지 않는 직책입니다."));
            participantMember.changePosition(position);
        } else {
            participantMember.removePosition();
        }
    }

** 오류 2 
: Failed to add the foreign key constraint. Missing unique key for constraint 'FK_batch_inviter_participant' in the referenced table 'tbl_org_participant_member'

이 오류는 외래 키(Foreign Key)를 생성하려는 테이블이 참조하는 대상 테이블의 컬럼에 PRIMARY KEY 또는 UNIQUE 제약 조건이 없기 때문에 발생합니다.
데이터베이스는 외래 키 관계를 맺을 때, 참조하는 대상 컬럼이 항상 고유한 값을 가진다는 보장이 있어야만 관계를 형성할 수 있습니다.

## 오류 발생 원인 분석
외래 키를 생성하려는 테이블: tbl_org_invitation_batch
참조되는 대상 테이블: tbl_org_participant_member
오류의 핵심: tbl_org_participant_member 테이블의 (org_id, member_id) 두 컬럼을 묶어서 PRIMARY KEY 또는 UNIQUE 키로 지정하는 제약 조건이 실제 데이터베이스 스키마에 누락되었습니다.
