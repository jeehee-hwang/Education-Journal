* 오버로딩, 오버라이딩 > 개념 잘 알아 둘 것 
* 자바 용어 관련된 자료들 보고 정리해둘 것, 진도가 나가면 나갈 수록 용어의 개념을 정확하게 아는게 중요하다. 
* 오늘 진도 나간 개념은 다시 꼭 복습해서 정리해둘것 

수업진도 깃허브로(04_java chap06-class-object-lecture-source/.../section05/overloading - chap07-object-array-lecture-source/.../section01/init

  /* comment. 오버로딩에 대해 이해할 수 있다. */
    /* 오버로딩이란?
    *  매개변수 부분의 타입, 갯수, 순서를 다르게 작성하면 서로 다른 메소드나 생성자로 인식하기 때문에
    *  동일한 이름의 생성자나 메소드를 여러 개 작성할 수 있는 것을 오버로딩 이라고 한다.
    
    *  오버로딩의 사용 이유?
    *  매개변수의 종류별로 메소드 내용을 다르게 작성해야하는 경우들이 종종 있다.
    *  이 때, 동일한 기능의 메소드를 매개변수에 따라 다르게 이름을 정의하면 복잡하고 관리하기가 매우 어렵다.
    *  따라서 동일한 이름으로 다양한 종류의 매개변수에 따라 처리해야하는 여러 메소드를 동일한 이름으로 관리하기 위해
    *  사용하는 기술을 오버로딩이라고 한다.
    
    *  오버로딩의 조건
    *  동일한 이름을 가진 메소드의 파라미터 선언부에 매개변수의 타입, 갯수, 순서를 다르게 작성하여
    *  한 클래스 내에 동일한 이름의 메소드를 여러 개 작성할 수 있도록 한다.
    *  메소드의 시그니쳐가 다르면 다른 메소드로 인식하기 때문이다.
    *  즉, 시그니쳐 중 메소드 이름은 동일해야 하기 때문에 파라미터 선언부가 다르게 작성되어야 오버로딩이 성립된다.
    * */

    public void test() {}
//    private void test() {}    // 접근제한자는 메소드 시그니처에 해당하지 않는다.
//    public int test() { return 0; }   // 반환형은 메소드 시그니처에 해당하지 않는다.

    public void test(int num) {}
//    public void test(int num2) {}  // 매개변수의 이름은 메소드 시그니처에 영향을 주지 않는다.
    public void test(int num1, int num2) {} // 매개변수 갯수
    public void test(int num1, String name) {}  // 매개변수 타입
    public void test(String name, int num1) {} // 매개변수 순서

/* comment. 메소드의 파라미터에 대해 이해하고 사용할 수 있다. */
        /* 매개변수(parameter)로 사용 가능한 자료형
        *  1. 기본자료형
        *  2. 기본자료형 배열
        *  3. 클래스자료형
        *  4. 클래스자료형 배열
        *  5. 가변인자
        * */
        ParameterTest pt = new ParameterTest();

        /* 1. 기본자료형을 매개변수로 전달 받는 메소드 호출 확인 */
        int num = 20;

        pt.testPrimaryTypeParameter(num);

        /* 2. 기본자료형 배열을 매개변수로 전달 받는 메소드 호출 확인 */
        int[] iarr = new int[] {1, 2, 3, 4, 5};

        System.out.println("인자로 전달하는 값 : " + iarr);
        pt.testPrimaryTypeArrayParameter(iarr);

        System.out.print("변경 후 원본 배열의 값 출력 : ");
        for(int i = 0; i < iarr.length; i++) {
            System.out.print(iarr[i] + " ");
        }
        System.out.println();

        /* 3. 클래스 자료형 */
        RectAngle r1 = new RectAngle(12.5, 22.5);

        System.out.println("인자로 전달하는 값 : " + r1);
        pt.testClassTypeParameter(r1);

        System.out.println("변경 후 사각형의 넓이와 둘레 ==========");
        r1.calcArea();
        r1.calcRound();

        /* 5. 가변인자 */
//        pt.testVariableLengthArrayParameter();
        pt.testVariableLengthArrayParameter("홍길동");
        pt.testVariableLengthArrayParameter("유관순", "볼링");
        pt.testVariableLengthArrayParameter("이순신", "볼링", "테니스", "당구");
        pt.testVariableLengthArrayParameter("신사임당", new String[] {"테니스", "서예", "떡썰기"});
    }

     /* comment. final 키워드에 대해 이해할 수 있다. */
    /* final
    *  : final은 종단의 의미를 가지는 키워드이다.
    *  final 키워드를 사용할 수 있는 위치는 다양한 편이며 의미가 약간은 다르지만, 결국 변경 불가의 의미이다.
    *  1. 지역변수 : 초기화 이후 값 변경 불가
    *  2. 매개변수 : 호출시 전달한 인자 변경 불가
    *  3. 전역변수 : 인스턴스 생성 후 초기화 이후에 값 변경 불가
    *  4. 클래스(static)변수 : 프로그램 start 이후 값 변경 불가
    *  5. non-static 메소드 : 메소드 재작성(overriding) 불가
    *  6. static 메소드 : 메소드 재작성(overriding) 불가
    *  7. 클래스 : 상속 불가
    * */

    /* 1. non-static field에 final 사용 */
//    private final int nonStaticNum;

    /* final은 변경 불가의 의미를 가진다.
    * 따라서 초기 인스턴스가 생성되고 나면 기본값 0이 필드에 들어가게 되는데,
    * 그 초기화 이후 값을 변경할 수 없기 때문에 선언하면서 바로 초기화를 해주어야한다.
    * */

    /* 해결하는 방법
    * 1-1. 선언과 동시에 초기화 한다. */
    private final int NON_STATIC_NUM = 1;

    /* 1-2. 생성자를 이용해서 초기화 한다. */
    private final String NON_STATIC_NAME;

    public FinalFieldTest(String nonStaticName) {
        this.NON_STATIC_NAME = nonStaticName;
    }

    /* 2. static field에 final 사용 */
    /* static에도 자바에서 지정한 기본값이 초기에 대입되기 때문에
    *  final 키워드 사용 시 초기화를 하지 않으면 에러가 발생한다.
    * */
//    private static final int STATIC_NUM;
    private static final int STATIC_NUM = 1;

    /* 생성자를 이용한 초기화는 불가능하다.
    *  생성자는 인스턴스가 생성되는 시점에 호출이 되기 때문에 그 전에는 초기화가 일어나지 못한다.
    *  하지만 static은 프로그램이 start될 때 할당되기 때문에 초기화가 되지 않은 상태로 선언된 것과
    *  동일하여 기본값으로 초기화 된 후 값을 변경하지 못하기 때문에 에러가 발생한다.
    * */
    private static final double STATIC_DOUBLE;
//
//    public FinalFieldTest(double staticDouble) {
//        FinalFieldTest.STATIC_DOUBLE = staticDouble;
//    }

    static {
        STATIC_DOUBLE = 0.5;
    }

        /* comment. 싱글톤 패턴에 대해 이해할 수 있다. */
        /* singleton pattern 이란?
        *  애플리케이션이 시작될 때 어떤 클래스가 최초 한 번만 메모리에 할당하고
        *  그 메모리에 인스턴스를 만들어서 하나의 인스턴스를 공유해서 사용하며
        *  메모리 낭비를 방지할 수 있게 함(매번 인스턴스 생성 하지 않음)
        *
        *  장점
        *  1. 첫 번째 이용 시에는 인스턴스를 생성해야 하므로 속도 차이가 나지 않지만
        *     두 번째 이용 시에는 인스턴스 생성 시간 없이 사용할 수 있다.
        *  2. 인스턴스가 절대적으로 한 개만 존재하는 것을 보증할 수 있다.
        *
        *  단점
        *  1. 싱글톤 인스턴스가 너무 많은 일을 하거나 많은 데이터를 공유하면 결합도가 높아진다.
        *  2. 동시성 문제를 고려해서 설계해야 하기 때문에 난이도가 있다.
        * */

        /* 싱글톤 구현 방법
        *  1. 이른 초기화
        *  2. 게으른 초기화 */

        /* 1. 이른 초기화 구현 */
//        EagerSingleton eager = new EagerSingleton();

        EagerSingleton eager1 = EagerSingleton.getInstance();
        EagerSingleton eager2 = EagerSingleton.getInstance();

        System.out.println(eager1.hashCode());
        System.out.println(eager2.hashCode());

        /* 2. 게으른 초기화 구현 */
        LazySingleton lazy1 = LazySingleton.getInstance();
        LazySingleton lazy2 = LazySingleton.getInstance();

        System.out.println(lazy1.hashCode());
        System.out.println(lazy2.hashCode());
    }
}
/* 1. 이른 초기화 

public class EagerSingleton {

    private static EagerSingleton eager = new EagerSingleton();

    private EagerSingleton() {}

    public static EagerSingleton getInstance() {
        return eager;
    }
}
 
 /* 2. 게으른 초기화 

public class LazySingleton {

    private static LazySingleton lazy;

    private LazySingleton() {}

    public static LazySingleton getInstance() {

        /* 인스턴스를 생성한 적이 없는 경우 인스턴스를 생성해서 반환하고
        *  생성한 인스턴스가 있는 경우 만들어둔 인스턴스를 반환한다. */
        if(lazy == null) {
            lazy = new LazySingleton();
        }

        return lazy;
    }
}

 /* comment. static 키워드에 대해 이해할 수 있다. */

        /* static
        * : 정적 메모리 영역에 프로그램이 start 될 때 할당을 하는 키워드이다.
        *   인스턴스를 생성하지 않고도 사용할 클래스의 멤버(필드, 메소드)에 지정할 수 있다.
        *   여러 인스턴스가 공유해서 사용할 목적의 공간이다.
        *   하지만 static 키워드의 남발은 유지보수와 추적이 힘든 코드를 작성하는 피해야할 방식이다.
        *   명확한 목적이 존재하지 않는 이상 static 키워드 사용은 자제하자.
        *   의도적으로 static 키워드를 사용하는 대표적인 예는 singleton 객체를 생성할 때 이다.
        * */

        /* 1. static 키워드를 필드에서 사용 */
        StaticFieldTest sft1 = new StaticFieldTest();

        System.out.println(sft1.getNonStaticCount());
        System.out.println(sft1.getStaticCount());

        sft1.increaseNonStaticCount();
        sft1.increaseStaticCount();

        System.out.println(sft1.getNonStaticCount());
        System.out.println(sft1.getStaticCount());

        StaticFieldTest sft2 = new StaticFieldTest();

        System.out.println(sft2.getNonStaticCount());
        System.out.println(sft2.getStaticCount());  // 값 유지

        /* 인스턴스 변수의 경우에는 sft1, sft2 두 개의 인스턴스가 서로 값을 공유하지 못하고
        * 인스턴스를 생성할때마다 0으로 초기화 되었다.
        * 하지만 static 필드의 경우에는 클래스변수 자체가 프로그램을 종료할 때 까지 유지되고
        * 있기 때문에 값을 유지하고 있다.
        * 따라서 여러 개의 인스턴스가 같은 공간을 공유할 목적으로 필드에 static 키워드를 사용한다.
        * */

        /* 2. static 메소드 확인 */
        /* 2-1. non-static 메소드 호출 */
        StaticMethodTest smt = new StaticMethodTest();
        smt.nonStaticMethod();

        /* static method는 정적 영역에 두고 인스턴스를 생성하지 않고 호출할 목적으로
        * 만들기 때문에 static 메소드를 호출하는 방식으로 호출해야 한다. */
        smt.staticMethod(); // 권장하지 않음

        /* 2-2. static 메소드 호출 */
        StaticMethodTest.staticMethod();    // 권장함
    }
}

    /* static 필드에 접근하기 위해서는 클래스명.필드명으로 접근한다. */
        public int getStaticCount() {
        return StaticFieldTest.staticCount;
    }

    
    /* comment. 다양한 변수들을 이해하고 사용할 수 있다. */
    /* 클래스 영역에 작성하는 변수를 필드라고 한다.
    *  필드 == 멤버변수(클래스가 가지는 멤버라는 의미) == 전역 변수(클래스 전역에서 사용할 수 있는 변수라는 의미)
    * */

    /* non-static field를 인스턴스 변수라고 한다. (인스턴스 생성 시점에 사용 가능한 변수라는 의미) */
    private int globalNum;

    /* static field를 정적필드(클래스변수) 라고 한다. (정적(클래스) 영역에 생성되는 변수라는 의미) */
    private static int staticNum;

    public void testMethod(int num) {   // 메소드영역의 시작

        /* 메소드영역에서 작성하는 변수를 지역변수라고 한다.
        *  메소드의 괄호 안에 선언하는 변수를 매개변수라고 한다.
        *  매개변수도 일종의 지역변수로 생각하면 된다.
        *  지역변수와 매개변수 모두 호출 시 stack을 할당받아 stack에 생성된다.
        * */
        int localNum;

        System.out.println(num);

//        System.out.println(localNum);
        System.out.println(globalNum);
        System.out.println(staticNum);
    }

    public void testMethod2() {

//        System.out.println(localNum);
        System.out.println(globalNum);
        System.out.println(staticNum);
    }
}


        /* comment. 초기화블럭의 동작 순서를 이해하고 이를 활용하여 인스턴스를 생성할 수 있다. */
        /* 초기화블럭?
        *  복잡한 초기화를 수행할 수 있는 블럭을 제공하며, 인스턴스 초기화 블럭과 정적 초기화 블럭으로 구분된다.
        *  1. 인스턴스 초기화 블럭
        *    : 인스턴스가 생성되는 시점에 생성자 호출 이전에 먼저 실행이 된다.
        *      인스턴스를 호출하는 시점마다 호출이 된다.
        *      인스턴스변수를 초기화하며 정적필드에는 실행시점마다 값을 덮어쓴다.
        *  {
        *     초기화 내용 작성
        *  }
        *
        *  2. 정적 초기화 블럭
        *   : 클래스가 로드 될 때 한 번 동작한다.
        *     정적 필드를 초기화하며, 인스턴스변수는 초기화하지 못한다.
        *  static {
        *     초기화 내용 작성
        *  }
        * */

        Product product = new Product();

        /* 1. 자료형별 기본값으로 초기화 된 내용 확인 */
//        System.out.println(product.getInformation());

        /* 2. 명시적 초기화로 필드 초기화 확인 */
//        System.out.println(product.getInformation());

        /* 3. 초기화블럭으로 필드 초기화 확인 */
        System.out.println(product.getInformation());

        /* 4. 매개변수 있는 생성자를 이용한 초기화 확인 */
        Product product2 = new Product("대륙폰", 3000000, "사우미");
        System.out.println(product2.getInformation());

    }
}

package com.ohgiraffers.section08.initblock;

public class Product {

    /* 1. 필드를 초기화하지 않으면 JVM이 정한 기본값으로 객체가 생성된다. */
//    private String name;
//    private int price;
//    private static String brand;

    /* 2. 명시적 초기화 */
    private String name = "갤럭시";
    private int price = 1000000;
    private static String brand = "삼송";

    /* 3. 인스턴스 초기화 블럭 */
    {
        name = "사이언";
        price = 900000;
        brand = "사과";
        System.out.println("인스턴스 초기화 블럭 동작함..");
    }

    static {
        /* static 초기화 블럭에서는 non-static 필드를 초기화하지 못한다. */
//        name = "아이펀";
//        price = 10000000;
        brand = "헬지";
        System.out.println("정적 초기화 블럭 동작함..");
    }

    public Product() {}

    /* 4. 매개변수 있는 생성자
    *    : 위에서 초기화된 값을 다 무시하고 생성자에 작성한 초기화 내용으로 인스턴스를 초기화시킨다. */
    public Product(String name, int price, String brand) {
        this.name = name;
        this.price = price;
        Product.brand = brand;
        System.out.println("매개변수 있는 생성자 호출됨..");
    }

    public String getInformation() {

        return "Product [name=" + this.name + ", price=" + this.price + ", brand=" + Product.brand + "]";
    }
}

package com.ohgiraffers.section01.init;

public class Application {

    public static void main(String[] args) {

        /* comment. 객체배열에 대해 이해할 수 있다. */
        /* 객체배열은 레퍼런스변수에 대한 배열이다.
        *  생성한 인스턴스도 배열을 이용해서 관리하면
        *  동일한 타입의 여러 개 인스턴스를 각각 취급하지 않고 연속 처리할 수 있어서 유용하다.
        *  또한 반환값은 1개의 값만 반환할 수 있기 때문에
        *  동일한 타입의 여러 인스턴스를 반환해야 하는 경우 객체배열을 이용할 수 있다.
        * */

        Car car1 = new Car("페라리", 300);
        Car car2 = new Car("람보르기니", 350);
        Car car3 = new Car("롤스로이스", 250);
        Car car4 = new Car("부가티베이론", 400);
        Car car5 = new Car("포터", 500);

        car1.driveMaxSpeed();
        car2.driveMaxSpeed();
        car3.driveMaxSpeed();
        car4.driveMaxSpeed();
        car5.driveMaxSpeed();

        Car[] carArray = new Car[5];
        carArray[0] = new Car("페라리", 300);
        carArray[1] = new Car("람보르기니", 350);
        carArray[2] = new Car("롤스로이스", 250);
        carArray[3] = new Car("부가티베이론", 400);
        carArray[4] = new Car("포터", 500);

        for(int i = 0; i < carArray.length; i++) {
            carArray[i].driveMaxSpeed();
        }

        /* 할당과 동시에 초기화 할 수 있다. */
        Car[] carArray2 = {
                 new Car("페라리", 300)
                , new Car("람보르기니", 350)
                , new Car("롤스로이스", 250)
                , new Car("부가티베이론", 400)
                , new Car("포터", 500)
        };

        for(Car c : carArray2) {
            c.driveMaxSpeed();
        }
    }
}

연습문제 풀이 =========================================

1번 
package org.practice_250507.section01;

public class Application {
    public static void main(String[] args) {


        MemberDTO memberDTO = new MemberDTO();

        System.out.println(memberDTO.getId());
        System.out.println(memberDTO.getPwd());
        System.out.println(memberDTO.getName());
        System.out.println(memberDTO.getAge());
        System.out.println(memberDTO.getGender());
        System.out.println(memberDTO.getPhone());
        System.out.println(memberDTO.getEmail());

        memberDTO.setId("user01");
        memberDTO.setPwd("pass01");
        memberDTO.setName("홍길동");
        memberDTO.setAge(20);
        memberDTO.setGender('M');
        memberDTO.setPhone("010-1234-56789");
        memberDTO.setEmail("hong123@ohgiraffers.com");

        System.out.println(memberDTO.getId());
        System.out.println(memberDTO.getPwd());
        System.out.println(memberDTO.getName());
        System.out.println(memberDTO.getAge());
        System.out.println(memberDTO.getGender());
        System.out.println(memberDTO.getPhone());
        System.out.println(memberDTO.getEmail());

    }
}

--------------------

package org.practice_250507.section01;

public class MemberDTO {
    private String id;
    private String pwd;
    private String name;
    private int age;
    private char gender;
    private String phone;
    private String email;

    public MemberDTO() {}

    public void setId(String id) { this.id = id;}
    public void setPwd(String pwd) { this.pwd = pwd; }
    public void setName(String name) { this.name = name; }
    public void setAge(int age) { this.age = age;}
    public void setGender(char gender) { this.gender = gender;}
    public void setPhone(String phone) { this.phone = phone; }
    public void setEmail(String email) { this.email = email; }

    public String getId() { return id;  }
    public String getPwd() { return pwd; }
    public String getName() { return name;}
    public int getAge() { return age; }
    public char getGender() { return gender; }
    public String getPhone() { return phone; }
    public String getEmail() { return email; }

}

2번 
package org.practice_250507.section02;

public class Application {
    public static void main(String[] args) {

        BookDTO bookDTO = new BookDTO();
        System.out.println(bookDTO.getprintInformation());


        BookDTO bookDTO1 = new BookDTO("자바의 정석","도우출판", "남궁성");
        System.out.println(bookDTO1.getprintInformation());

        BookDTO bookDTO2 = new BookDTO();
        bookDTO2.setTitle("홍길동전");
        bookDTO2.setPublisher("활빈당");
        bookDTO2.setAuthor("허균");
        bookDTO2.setPrice(5000000);
        bookDTO2.setDiscountRate(0.5);
        System.out.println(bookDTO2.getprintInformation());
    }
}

--------------------------

public class BookDTO {
    private String title;
    private String publisher;
    private String author;
    private int price;
    private double discountRate;

    public BookDTO() {}

    public BookDTO(String title, String publisher, String author) {
        this.title = title;
        this.publisher = publisher;
        this.author = author;
    }

    public BookDTO(String title, String publisher, String author, int price, double discountRate) {
        this.title = title;
        this.publisher = publisher;
        this.author = author;
        this.price = price;
        this.discountRate = discountRate;
    }

    public void setTitle(String title) {this.title = title;}
    public void  setPublisher(String publisher) {this.publisher = publisher;}
    public void setAuthor(String author) { this.author= author;}
    public void setPrice(int price) {this.price = price;}
    public void setDiscountRate(double discountRate) {this.discountRate = discountRate;}

    public String getTitle() { return title; }
    public String getPublisher() { return publisher; }
    public String getAuthor() { return author; }
    public int getPrice() { return price; }
    public double getDiscountRate() { return discountRate;}

    public String getprintInformation() {
        return this.title + ", " + this.publisher + ", " + this.author +
                ", " + this.price + ", " + this.discountRate ;
    }
}

3번 
* nextLine은 공간에 공백까지 다 나와 빈공간이 된다. 
  nextint, nextDouble 등은 공백이 남아 있어 빈 공간이 아니게 된다. 공간을 비워줘야 하기에 뒤에 nextLine을 써줘야 한다. 

package org.practice_250507.section03;

public class EmployeeDTO {

    private int number;
    private String name;
    private String dept;
    private String job;
    private int age;
    private char gender;
    private int salary;
    private double bonusPoint;
    private String phone;
    private String address;

    public EmployeeDTO() {}

    public void setNumber(int number) {this.number = number;}
    public void setName(String name) {this.name = name;}
    public void setDept(String dept) {this.dept = dept;}
    public void setJob(String job) {this.job = job;}
    public void setAge(int age) {this.age = age;}
    public void setGender(char gender) {this.gender = gender;}
    public void setSalary(int salary) {this.salary = salary;}
    public void setBonusPoint(double bonusPoint) {this.bonusPoint = bonusPoint;}
    public void setPhone(String phone) {this.phone =phone;}
    public void setAddress(String address) {this.address=address;}

    public int getNumber() {return number;}
    public String getName() {return name;}
    public String getDept() {return dept;}
    public String getJob() {return job;}
    public int getAge() {return age;}
    public char getGender() {return gender;}
    public int getSalary() {return salary;}
    public double getBonusPoint() {return bonusPoint;}
    public String getPhone() {return phone;}
    public String getAddress() {return address;}

    public void Information() {
        System.out.println("------");
    }
}
------------------------------

package org.practice_250507.section03;

import org.practice_250507.section02.BookDTO;

import java.util.Scanner;

public class Application {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        System.out.println("number : ");
        int number = sc.nextInt();
        sc.nextLine();

        System.out.println("name : ");
        String name = sc.nextLine();

        System.out.println("dept :");
        String dept = sc.nextLine();

        System.out.println("job : ");
        String job = sc.nextLine();

        System.out.println("age : ");
        int age = sc.nextInt();
        sc.nextLine();

        System.out.println("gender : ");
        char gender = sc.nextLine().charAt(0);

        System.out.println("salary : ");
        int salary = sc.nextInt();
        sc.nextLine();

        System.out.println("bonusPoint : ");
        double bonusPoint = sc.nextDouble();
        sc.nextLine();

        System.out.println("phone : ");
        String phone = sc.nextLine();

        System.out.println("address : ");
        String address = sc.nextLine();

        EmployeeDTO employeeDTO1 = new EmployeeDTO();
        employeeDTO1.Information();

        employeeDTO1.setNumber(200);
        employeeDTO1.setName("홍길동");
        employeeDTO1.setDept("영업부");
        employeeDTO1.setJob("과장");
        employeeDTO1.setAge(20);
        employeeDTO1.setGender('남');
        employeeDTO1.setSalary(2000000);
        employeeDTO1.setBonusPoint(0.5);
        employeeDTO1.setPhone("010-1234-5678");
        employeeDTO1.setAddress("서울시 서초구 서초동");

        System.out.println(employeeDTO1.getNumber());
        System.out.println(employeeDTO1.getName());
        System.out.println(employeeDTO1.getDept());
        System.out.println(employeeDTO1.getJob());
        System.out.println(employeeDTO1.getAge());
        System.out.println(employeeDTO1.getGender());
        System.out.println(employeeDTO1.getSalary());
        System.out.println(employeeDTO1.getBonusPoint());
        System.out.println(employeeDTO1.getPhone());
        System.out.println(employeeDTO1.getAddress());

    }

}

