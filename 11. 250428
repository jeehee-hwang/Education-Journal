* ifelse, switch > 연습이 필요 (수식으로 변경이 어려움) 
* next, nextline > 차이점 알아 둘 것  
* 변수의 개념, 자료형 등 기초적인 부분은 한 번 더 볼것 

chap03-method-and-api-lecture-source ~ hap04-control-flow-lecture-source, _switch

/* comment. 매개변수와 리턴값을 복합적으로 활용하는 것을 이해하고 활용할 수 있다. */

int first = 20;
int second = 10;

Application7 app7 = new Application7();
System.out.println(app7.plusTwoNumbers(first, second));

    public int plusTwoNumbers(int first, int second) {

        return first + second;
    }

  
/* comment. static 메소드를 호출할 수 있다. */
/* static 메소드를 호출하는 방법 : 클래스명.메소드명(); */

    Application8.sumTwoNumbers(10, 20);
    sumTwoNumbers(20, 30);  // 동일한 클래스일 때 클래스명 생략 가능

    public static int sumTwoNumbers(int first, int second) {
        return first + second;
    }

    
/* comment. 다른 클래스에 작성한 메소드를 호출할 수 있다. */
int first = 100;
int second = 50;

/* 1. non-static 메소드의 경우 */
Calculator calc = new Calculator();
int min = calc.minNumberOf(first, second);

System.out.println("두 수 중 최소값은 : " + min);

/* 2. static 메소드의 경우 */
/* 다른 클래스에 작성한 static 메소드의 경우 호출할 때 클래스명을 반드시 기술해야 한다. */

// int max = maxNumberOf(first, second); // 임포트 하지 않으면 에러가 발생한다.
   int max = Calculator.maxNumberOf(first, second);
   System.out.println("두 수 중 최대값은 : " + max);

/* 주의사항
* static 메소드도 non-static 메소드처럼 호출은 가능하다. > 하지만 권장하지 않는다.
* 이미 메모리에 로딩되어 있는 static 메소드는 여러 객체가 공유하게 된다.
* 그 때 객체로 접근하게 되면 인스턴스가 가진 값으로 공유된 값에 예상치 못하는 동작을 유발할 수 있기 때문에 사용을 제한해달라는 경고이다.
* 시스템이 복잡해질 수록 객체의 상태를 추적하기 어려워 유지보수에 악영향을 준다.
    int max2 = calc.maxNumberOf(first, second); // 권장하지 않는다.

 /* comment. Math 클래스에서 제공하는 static 메소드를 호출할 수 있다. */
        /* API란?
        *  Application Programming Interface는 응용프로그램에서 사용할 수 있도록
        *  운영체제가 프로그래밍 언어가 제공하는 기능을 제어할 수 있도록 만든 인터페이스를 뜻한다.
        *  쉽게 말해 우리가 구현할 수 없거나 구현하기 번거로운 기능들을 JDK를 설치하면 사용할 수 있도록 제공해놓은
        *  소스코드(클래스나 인터페이스)들을 의미한다.
        *  더 쉽게 말해 누가 작성해놓은 소스코드이니 가져다 쓰는 방법을 본다는 말이다.
        *  모든 코드를 우리가 다 외울 수 없으니 API 문서를 별도로 제공해주고 있다.
        * */

        /* java.lang.Math
        *  Math 클래스는 수학에서 자주 사용하는 상수들과 함수들을 미리 구현해놓은 클래스이다.
        *  모든 메소드가 static 메소드로 작성되어 있다.
        * */

        /* 1. 절대값 출력 */
        /* 1-1. 클래스의 full-name을 다 적은 경우 */
        System.out.println("-7의 절대값 : " + (java.lang.Math.abs(-7)));

        /* 1-2. import를 해서 사용 */
        System.out.println(Math.abs(-1.25));

        /* 2. 최대값, 최소값 출력 */
        System.out.println(Math.min(10, 20));
        System.out.println(Math.max(20, 30));

        System.out.println(Math.PI);

        /* 3. 난수 출력 */
        System.out.println(Math.random());

       /* comment. 사용자 지정 범위의 난수를 발생시킬 수 있다. */
        /* 난수의 활용
        *  Math.random()을 이용해 발생한 난수는 0부터 1전까지의 실수 범위의 난수값을 반환한다.
        *  필요에 따라 정수 형태의 값을 원하는 범위 만큼 발생시켜야 하는 경우들이 존재한다.
        /* 원하는 범위의 난수를 구하는 공식 : (int) (Math.random * 구하려는 난수의 갯수) + 구하려는 난수의 최소값
        /* 1. 0 ~ 9까지의 난수 발생 */
        int random1 = (int) (Math.random() * 10);
        System.out.println(random1);
        /* 2. 1 ~ 10까지의 난수 발생 */
        int random2 = (int) (Math.random() * 10) + 1;
        /* 3. 10 ~ 15까지의 난수 발생 */
        int random3 = (int) (Math.random() * 6) + 10;
        /* 4. -128 ~ 127까지의 난수 발생 */
        int random4 = (int) (Math.random() * 256) - 128;

        /* comment. java.util.Random 클래스를 활용하여 사용자 지정 범위의 난수를 발생시킬 수 있다. */
        /* java.util.Random 클래스의 nextInt() 메소드를 이용한 난수 발생
        /* 원하는 범위의 난수를 구하는 공식 : random.nextInt(구하려는 난수의 갯수) + 구하려는 난수의 최소값
        Random random = new Random();
        /* 1. 0 ~ 9까지 난수 발생 */
        int random1 = random.nextInt(10);
        System.out.println("random1 = " + random1);
        /* 2. 1 ~ 10까지 난수 발생 */
        int random2 = random.nextInt(10) + 1;
        /* 3. 20 ~ 45까지 난수 발생 */
        int random3 = random.nextInt(26) + 20;
        /* 4. -128 ~ 127까지 난수 발생 */
        int random4 = random.nextInt(256) - 128;

         /* comment. java.util.Scanner를 이용한 다양한 자료형 값 입력 받기 */
        /* 1. Scanner 객체 생성 */
        Scanner sc = new Scanner(System.in);

        /* 2. 자료형별 값 입력받기 */
        /* 2-1. 문자열 입력 받기 */
        /* nextLine() : 입력받은 값을 문자열로 반환해준다. */
        System.out.print("이름을 입력하세요 : ");
        String name = sc.nextLine();
        System.out.println("입력하신 이름은 " + name + "입니다.");

        /* 2-2. 정수형 값 입력 받기 */
        /* nextInt() : 입력받은 값을 int형으로 반환한다. */
        System.out.print("나이를 입력하세요 : ");
        int age = sc.nextInt();
        System.out.println("입력하신 나이는 " + age + "입니다.");

        /* nextLong() : 입력받은 값을 long형으로 반환한다. */
        System.out.print("금액을 입력해주세요 : ");
        long money = sc.nextLong();
        System.out.println("입력하신 금액은 " + money + "원 입니다.");

        /* 2-3. 실수형 값 입력 받기 */
        /* nextFloat() : 입력받은 값을 float형으로 반환한다. */
        System.out.print("키를 입력해주세요 : ");
        float height = sc.nextFloat();
        System.out.println("입력하신 키는 " + height + "cm 입니다.");

        /* nextDouble() : 입력받은 값을 double형으로 반환한다. */
        System.out.print("원하는 실수를 입력하세요 : ");
        double number = sc.nextDouble();
        System.out.println("입력하신 실수는 " + number + "입니다.");

        /* 2-4. 논리형 값 입력받기 */
        /* nextBoolean() : 입력받은 값을 boolean형으로 반환한다. */
        System.out.print("참과 거짓 중에 한 가지를 true or false로 입력해주세요 : ");
        boolean isTrue = sc.nextBoolean();
        System.out.println("입력하신 논리 값은 : " + isTrue + "입니다.");

        /* 2-5. 문자형 값 입력받기 */
        sc.nextLine();
        System.out.print("아무 문자나 입력해주세요 : ");
        char ch = sc.nextLine().charAt(5);
        System.out.println("입력하신 문자는 " + ch + "입니다.");

        /* comment. Scanner의 nextLine()과 next()에 대해 구분하여 사용할 수 있다. */ > 이거는 꼭 다시 한번 더 해볼 것!! 
        /* nextLine() : 공백을 포함한 한 줄을 입력을 위한 개행문자 전까지 읽어서 문자열로 반환한다. (공백문자 포함)
        *  next() : 공백문자나 개행문자 전까지 읽어서 문자열로 반환한다.
        * */
        Scanner sc = new Scanner(System.in);
        /* nextLine */
        System.out.print("인사말을 입력해주세요 : ");
        String greeting1 = sc.nextLine();

        System.out.println("greeting1 = " + greeting1);

        /* next */
        System.out.print("인사말을 입력해주세요 : ");
        String greeting2 = sc.next();

        System.out.println("greeting2 = " + greeting2);


    /* comment. 스캐너 사용 시 주의 사항에 대해 이해하고 사용 시 주의사항을 고려하여 사용할 수 있다. */
		/*  스캐너의 next 메소드들은 입력한 내용을 버퍼로부터 토큰단위로 분리해서 읽어온다.
		 *  그래서 크게 두 가지 사항을 주의해야 한다.
		 *  1. next()로 문자열 입력 받은 후 정수, 실수, 논리값 입력 받을 때
		 *  2. 정수, 실수, 논리값 입력 후 next()로 문자열 입력받을 때

		Scanner sc = new Scanner(System.in);

		/* 1. next()로 문자열 입력 받은 후 정수, 실수, 논리값 입력 받을 때  */
		System.out.print("문자열을 입력해주세요 : ");
		String str1 = sc.next();				//공백이나 개행문자 전 까지를 읽어온다.
		System.out.println("str1 : " + str1);

		System.out.print("숫자를 입력해주세요 : ");
		int num1 = sc.nextInt();				//정수 값을 읽어온다.
		System.out.println("num1 : " + num1);

		/*  여기까지 작성하고 나면 작성상에(compile 시)는 문제되지 않는다.
		 *  처음 실행할 때 문자열에 "안녕" 이라고 입력하고 정수를 입력하면 정상적으로 동작한다.
		 *  하지만, "안녕하세요 반갑습니다" 입력 하면 동작 시(Runtime) 숫자를 입력하기도 전에 InputMismatchException이 발생한다.
		 *
		 *  "안녕하세요 반갑습니다" <- 입력 시 공백을 기준으로 두 개의 토큰 "안녕하세요"와 "반갑습니다"로 분리가 된다.
		 *  next()는 다음 토큰인 "안녕하세요"를 읽었고, nextInt()는 다음 토큰을 정수로 읽어야 하는데 "반갑습니다"가 나왔다.
		 *  정수를 입력해야 하는데 "반갑습니다"를 읽으면 당연히 InputMismatchException이 발생하게 된다.
		 *  공백이 있는 문자열을 받을거면 nextLine()을 이용하자
		 *
		 *  혹은 입력받은 버퍼를 줄 단위로 토큰을 분리하기 때문에 해당 라인의 토큰을 다 읽고 다음 줄로 이동시키고 싶을 때는
		 *  한 라인의 모든 토큰을 읽어오는 sc.nextLine(); 호출을 중간에 한 번 넣어줘도 해결은 된다.
		 * */
		
		/* 2. 정수, 실수, 논리값 입력 후 nextLine()로 문자열 입력받을 때 */
		System.out.print("다시 숫자를 입력해주세요 : ");
		int num2 = sc.nextInt();
		System.out.println("num2 : " + num2);
		
		System.out.print("공백이 있는 문자열을 하나 입력해주세요 : ");
		
		sc.nextLine();
		
		String str2 = sc.nextLine();
		System.out.println("str2 : " + str2);		
		
		/*  입력받을 시 nextLine()을 호출한 것이 아직 행을 바꾸지 않고 한 라인을 읽어드린다고 판단해서 아무 것도 읽지 못하고 넘어간 뒤
		 *  다음 출력구문을 실행시킨 것이다.
		 *  이걸 해결하기 위해서는 sc.nextLine() 호출 전에 미리 sc.nextLine()을 한 번 호출 하면
		 *  그 행을 읽어드리는걸 다음 행으로 넘기게 되고, 그 이후 새로 입력받은 한 라인을 읽어와서 str2에 저장하게 되므로 정상 동작하게 된다.


   수업에서 한 문제 
        A_if a = new A_if();
//        a.testSimpleIfStatement();
//        a.testNestedIfStatement();

        B_ifElse b = new B_ifElse();
//        b.testSimpleIfElseStatement();
//        b.testNestedIfElseStatement();

        C_ifElseIf c = new C_ifElseIf();
//        c.testSimpleIfElseIfStatement();
//        c.testNestedIfElseIfStatement();

        D_switch d = new D_switch();
//        d.testSimpleSwitchStatement();
        d.testSwitchVendingMachine();
    }

     /* comment. if문 단독 사용에 대한 흐름을 이해하고 적용할 수 있다. */
    /* [if문 표현식]
    *  if(조건식) {
    *      조건식이 true일 때 실행할 명령문;
    *  }
    *
    *  조건식 : true or false가 나오는 연산식을 조건식이라고 한다.
    *  if문은 조건식의 결과 값이 참(true)이면 { } 안에 있는 코드를 실행하고,
    *  조건식의 결과 값이 거짓(false)이면 { } 안에 있는 코드를 무시하고 넘어감
    * */

    /* 문제 1.
    *  정수 한 개를 입력 받아 그 수가 짝수이면 "입력하신 숫자는 짝수입니다." 라고 출력하고,
    *  짝수가 아니면 출력하지 않는 구문을 작성해보자
    *  단, 조건과 상관 없이 프로그램이 종료될 때 "프로그램을 종료합니다." 라고 출력되도록 한다.
    * */

        Scanner sc = new Scanner(System.in);
        System.out.print("숫자 한 개를 입력하세요 : ");
        int num = sc.nextInt();
        if(num % 2 == 0) {
            System.out.println("입력하신 숫자는 짝수입니다.");
        }
        System.out.println("프로그램을 종료합니다.");
     }

         /* comment. 중첩된 if문의 흐름을 이해하고 적용할 수 있다. */
        /* 문제 2.
        *  정수 한 개를 입력 받아 그 숫자 양수인 경우에만 짝수인지를 확인하여
        *  짝수이면 "입력하신 숫자는 양수이면서 짝수입니다." 라고 출력하고,
        *  둘 중 하나라도 해당하지 않으면 아무 내용도 출력하지 않는 구문을 작성해보자
        *  단, 조건과 상관 없이 프로그램이 종료될 때 "프로그램을 종료합니다." 라고 출력되도록 한다.
        * */
     public void testNestedIfStatement() {
       Scanner sc = new Scanner(System.in);
        System.out.print("숫자 한 개를 입력하세요 : ");
        int num = sc.nextInt();
        if(num > 0) {
            if(num % 2 == 0) {
                System.out.println("입력하신 숫자는 양수이면서 짝수입니다.");
            }
        }
        System.out.println("프로그램을 종료합니다.");
        

         /* comment. if-else문 단독 사용에 대한 흐름을 이해하고 적용할 수 있다. */
        /* [if-else문 표현식]
        *  if(조건식) {
        *       조건식이 true일 때 실행할 명령문;
        *  } else {
        *       조건식 false일 때 실행할 명령문;
        *  }
        * */

        /* 문제 3.
        *  정수 한 개를 입력 받아 그 수가 홀수이면 "입력하신 숫자는 홀수입니다." 라고 출력하고,
        *  홀수가 아니면 "입력하신 숫자는 짝수입니다." 라고 출력하는 프로그램을 작성해보자.
        *  단, 조건과 상관 없이 프로그램이 종료될 때 "프로그램을 종료합니다." 라고 출력되도록 한다.
        * */
        Scanner sc = new Scanner(System.in);
        System.out.print("정수 한 개를 입력하세요 : ");
        int num = sc.nextInt();
        if(num % 2 != 0) {
            System.out.println("입력하신 숫자는 홀수입니다.");
        } else {
            System.out.println("입력하신 숫자는 짝수입니다.");
        }
        System.out.println("프로그램을 종료합니다.");
    }

    

        /* comment. 중첩된 if-else문의 흐름을 이해하고 적용할 수 있다. */
        /* 문제 4.
        * 숫자를 하나 입력 받아 양수이면 "입력하신 숫자는 양수입니다." 출력하고,
        * 음수이면 "입력하신 숫자는 음수입니다." 출력
        * 단, 0이면 "0입니다." 라고 출력하세요
        * 조건과 상관없이 프로그램이 종료될 때 "프로그램을 종료합니다." 라고 출력되도록 한다.
        * */
        public void testNestedIfElseStatement() {
        Scanner sc = new Scanner(System.in);
        System.out.print("숫자를 하나 입력하세요 : ");
        int num = sc.nextInt();
        if(num != 0) {
            if(num > 0) {
                System.out.println("입력하신 숫자는 양수입니다.");
            } else {
                System.out.println("입력하신 숫자는 음수입니다.");
            }
        } else {
            System.out.println("입력하신 숫자는 0입니다.");
        }
        System.out.println("프로그램을 종료합니다.");


         /* comment. if-else-if문 단독 사용에 대한 흐름을 이해하고 적용할 수 있다. */
        /* [if-else-if 표현식]
        *  if(조건식1) {
        *      조건식1이 true일 때 실행할 명령문;
        *  } else if(조건식2) {
        *      조건식1이 false이고 조건식2가 true일 때 실행할 명령문;
        *  } else {
        *      위의 조건 2개가 모두 거짓인 경우 실행할 명령문;
        *  }
        * */

        /* 문제 5. */
        System.out.println("산 속에서 나무를 하던 나무꾼이 연못에 도끼를 빠뜨리고 말았다.");
        System.out.println("연못에서 산신령이 나타나 금도끼, 은도끼, 쇠도끼를 들고 나타났다.");
        System.out.println("나무꾼에게 셋 중 어떤 도끼가 나무꾼의 도끼인지 물어보았다.");

        System.out.print("어느 도끼가 너의 도끼이냐? (1. 금도끼, 2. 은도끼, 3. 쇠도끼 : ");
        Scanner sc = new Scanner(System.in);
        int answer = sc.nextInt();

        if(answer == 1) {

            System.out.println("이런 거짓말 쟁이!! 너에겐 아무런 도끼도 줄 수 없다...");

        } else if(answer == 2) {

            System.out.println("욕심이 과하지는 않지만 그래도 넌 거짓말을 하고 있다...");

        } else {

            System.out.println("너 정직하구나~ 이 세 개 도끼를 다 주겠다~");
        }

        System.out.println("그렇게 산신령은 다시 연못 속으로 사라지고 말았다...");

    }

  

        /* comment. 중첩된 if-else-if문의 흐름을 이해하고 적용할 수 있다. */
        /* 문제 6.
        *  ohgiraffers 대학의 김xx교수님은 학생들 시험 성적을 수기로 계산해서 학점 등급을 매기는 채점방식을 사용하고 있었다.
        *  90점 이상이면 'A', 80점 이상이면 'B', 70점 이상이면 'C', 60점 이상이면 'D'를
        *  60점 미만인 경우에는 'F'를 학점 등급으로 하는 기준이다.
        *  추가로 각 등급의 중간점수(95, 85, 75..)인 경우 '+'를 붙여서 등급을 세분화 하다보니 복잡하다.
        *  그래서 학생의 이름과 점수를 입력하면 자동으로 학점 등급이 계산되는 프로그램을 만들기로 했다.
        * */
        public void testNestedIfElseIfStatement() {
        Scanner sc = new Scanner(System.in);
        System.out.print("학생의 이름을 입력하세요 : ");
        String name = sc.nextLine();
        System.out.print("학생의 점수를 입력하세요 : ");
        int point = sc.nextInt();
         String grade = "";
        if(point >= 90) {
            grade = "A";
            if(point >= 95) {
                grade += "+";
            }
        } else if(point >= 80) {
            grade = "B";
            if(point >= 85) {
                grade += "+";
            }
        } else if (point >= 70) {
            grade = "C";
            if(point >= 75) {
                grade += "+";
            }
        } else if(point >= 60) {
            grade = "D";
            if(point >= 65) {
                grade += "+";
            }
        } else {
            grade = "F";
        }
        System.out.println(name + " 학생의 점수는 " + point + "이고, 등급은 " + grade + "입니다.");
        System.out.println("프로그램을 종료합니다.");
  
  /* comment. switch 단독 사용에 대한 흐름을 이해하고 적용할 수 있다. */
        /* [switch 표현식]
        *  switch(비교할변수) {
        *       case 비교값1 : 비교값1과 일치하는 경우 실행할 구문; break;
        *       case 비교값2 : 비교값2과 일치하는 경우 실행할 구문; break;
        *       default : case에 모두 해당하지 않는 경우 실행할 구문; break;
        *  }
        * */

        /* 문제 7.
        *  정수 두 개와 연산 기호 문자를 입력 받아서
        *  두 숫자의 연산 결과를 출력해보는 간단한 계산기를 만들어보자.
        * */
        Scanner sc = new Scanner(System.in);
        System.out.print("첫 번째 정수 입력 : ");
        int first = sc.nextInt();
        System.out.print("두 번째 정수 입력 : ");
        int second = sc.nextInt();
        System.out.print("연산 기호 입력(+, -, *, /, %) : ");
        char op = sc.next().charAt(0);

        int result = 0;
        switch(op) {
            case '+' :
                result = first + second;
                break;
            case '-' :
                result = first - second;
                break;
            case '*' :
                result = first * second;
                break;
            case '/' :
                result = first / second;
                break;
            case '%' :
                result = first % second;
                break;

                // 산술연산 외에 다른 문자에 대한 처리는 생략하였음
        }

        System.out.println(first + " " + op + " " + second + " = " + result);
    }


        /* comment. switch문을 이용해서 문자열 값 비교 및 break 테스트 */
        public void testSwitchVendingMachine() {
        System.out.println("===== ohgiraffers vending machine =====");
        System.out.println(" apple   banana   orange   melon   grape   ");
        System.out.println("=======================================");
        System.out.print("과일을 선택해주세요 : ");

        Scanner sc = new Scanner(System.in);
        String selectedFruits = sc.nextLine();

        int price = 0;

        String order = "";

        switch (selectedFruits) {
            case "apple" :
                order = "apple";
                price = 1000;
                break;
            case "banana" :
                order = "banana";
                price = 1500;
                break;
            case "orange" :
                order = "orange";
                price = 2000;
                break;
            case "melon" :
                order = "melon";
                price = 2500;
                break;
            case "grape" :
                order = "grape";
                price = 10000;
                break;
        }

        System.out.println(order + "를 선택하셨습니다.");
        System.out.println(price + "원을 투입해주세요~~");



실습문제 ---------------------------- 

1. 
정수형 변수 2개를 선언하여, 각 20과 30으로 초기화 한 후, 두 수의 더하기, 빼기, 곱하기, 나누기, 나머지를 다음과 같이 출력하세요.

public class Study1 {
    public static void main(String[] args) {

        int num = 20;
        int num1 = 30;

        Study1 stu1 = new Study1();

        System.out.println("더하기 결과 : " + stu1.plusTwonum(num, num1));
        System.out.println("빼기 결과 : " + stu1.minusTwonum(num, num1));
        System.out.println("곱하기 결과 : " + stu1.multipleTwonum(num, num1));
        System.out.println("나누기한 몫 결과 : " + stu1.divideTwonum(num, num1));
        System.out.println("나누기한 나머지 : " + stu1.divisionTwonum(num, num1));

    }

    public int plusTwonum (int num, int num1) {
        return num + num1;
    }
    public int minusTwonum (int num, int num1) {
        return num - num1;
    }
    public int multipleTwonum (int num, int num1) {
        return num * num1;
    }
    public int divideTwonum (int num, int num1) {
        return num / num1;
    }
    public int divisionTwonum (int num, int num1) {
        return num % num1;
    }
}

더하기 결과 : 50
빼기 결과 : -10
곱하기 결과 : 600
나누기한 몫 결과 : 0
나누기한 나머지 : 20

2. 사각형의 넓이와 둘레를 구하여 출력합니다. 너비 12.5 높이 36.4를 변수에 저장하고, 
넓이와 둘레를 계산한 뒤 각각 넓이와 둘레를 변수에 담아 아래와 같이 출력하세요.

2.
 public class Study2 {
    public static void main(String[] args) {

        double width = 12.5;
        double height  = 36.4;

        Study2 stu2 = new Study2();

        System.out.println("둘레 : " + stu2.multipleTwo(width, height));
        System.out.println("면적 : " + stu2.plusTwo(width, height));

    }

    public double multipleTwo(double width, double heigth) {
        return ((width * 7.28) + (heigth * 10));
    }

    public double plusTwo (double width, double heigth) {
        return ((width * 2) + (heigth*2));
    }
}

둘레 : 455.0
면적 : 97.8

3. 국어점수 80.5점, 수학점수 50.6점, 영어점수 70.8점을 실수 형태로 저장한 뒤, 총점과 평균을 정수 형태로 출력하세요.

3.
public class Study3 {
    public static void main(String[] args) {

        Study3 stu3 = new Study3();

        float korean = 80.5f;
        float englis = 50.6f;
        float math = 70.8f;

        System.out.println("총점 : " + stu3.sumThreeNumbers (korean, englis, math));
        System.out.println("평균 : " + stu3.sumAverageNumbers (korean, englis, math));
    }
    public static int sumThreeNumbers(float korean,  float englis,  float math ) {
        return (int)(korean + englis + math);
    }
    public static int sumAverageNumbers(float korean,  float englis,  float math) {
        return (int)((korean + englis + math) / 3);
 
총점 : 201
평균 : 67

4. 두 개의 정수형 변수를 선언하고, 삼항 연산자를 사용하여  두 수 중 큰 수를 출력하는 프로그램을 작성하세요.

4.

public class Study4 {
    public static void main(String[] args) {
        int num1 = 20;
        int num2 = 10;
        String result = (num1 > num2 ) ? ("두 수 중 큰 수는 " + num1  + " 입니다.") : " " ;

        if (num1 > num2 ) {
            result = ("두 수 중 큰 수는 " + num1  + " 입니다.");
        } else { }

        System.out.println(result);

    }
}

5. 정수형 변수를 선언하여 점수를 저장하고, 삼항 연산자를 사용하여 점수가 60점 이상이면 “합격입니다”, 
그렇지 않으면 “아쉽지만 불합격입니다.” 을 출력하는 프로그램을 작성하세요.

5.

public class Study5 {
    public static void main(String[] args) {
       int num = 70;

        String result = ( num >= 60) ? "합격입니다~!" : "아쉽지만 불합격 입니다. " ;

        if ( num >= 60) {
            System.out.println("합격입니다~!");
        } else {
            System.out.println("아쉽지만 불합격 입니다. ");

6. 정수형 변수를 선언하고, 삼항연산자를 사용하여 입력된 수가 짝수인지 홀수인지 출력하는 프로그램을 작성하세요.
/* 참고사항 : 조건식에 %를 활용하여 짝수인지 홀수인지를 판단해보세요 */

6.
public class Study6 {
    public static void main(String[] args) {
        int num = 6;

        String result = ( num % 2 ==0) ? "입력하신 수는 짝수입니다." : "입력하신 수는 홀수입니다. " ;

        if ( num % 2 ==0 ) {
            System.out.println("입력하신 수는 짝수입니다. ");
        } else {
            System.out.println("입력하신 수는 홀수입니다. ");

