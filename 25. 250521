JDBC 사용법 자체가 어렵다. 

수업진도 깃허브 <06_JDBC / chap01 - chap03 / section01/ insert / Application2


JDBC는 왜 사용하는걸까? 
  서버와 DB는 연결과정을 맺는다. 이때 문제가 되는 것이 DB마다 연결과정, SQL을 전달하는 방법, 결과를 응답받는 방법이 모두 다르다
  JDBC 이전에는 MySQL이면 MySQL, Oracle이면 Oracle에 해당하는 로직을 작성해야 했다. 
  이 때문에 개발자는 개발하는 DB에 따라 해당 DB에 관한 공부를 해야만 했고 서버가 DB에 의존하게되는 문제점이 있었다.
  이러한 문제점을 해결하기 위해 탄생한 것이 JDBC(Java Database Connectivity)이다. 
  JDBC는 자바에서 DB에 접속할 수 있도록하는 자바 API이다. 
  JDBC는 드라이버가 존재하는 DB에게서 커넥션을 얻고, SQL을 전달하고, 응답 결과를 받을 수 있도록 표준화한 기술이다.
  JDBC를 이용하면 개발자는 어떤 DB이든 드라이버만 존재하면 표준 인터페이스만 사용해서 개발이 가능해졌다.


JDBC Class 
# 01. JDBC 사용 Class
## 01-01. DriverManager
### 01-01-01. DriverManager Class
- 데이터 원본(= Database)에 JDBC driver를 통하여 Connection을 만드는 역할을 한다.
- Driver란 중간에서 연결하는 역할을 의미한다.
- Class.forName() method를 통해 생성되어 메모리에 할당된다.
    - **Class**.forName()에서 **Class** 클래스는 클래스의 메타 정보 가지고 있다.
    - forName() 메소드에 풀클래스명을 작성하면 해당 클래스를 메모리에 올려 사용할 준비를 하도록 하는 것으로, 동적 로딩을 이용하여 DB driver를 로딩한다.

### 01-01-02. DriverManager Class 사용 시 주의 사항
1. 반드시 예외 처리를 해야 한다.
2. 직접 instance 생성이 불가하고, DriverManager 클래스의 getConnection() 메소드를 사용하여 Connection instance를 생성할 수 있다.

### 01-01-03. DriverManager Class 활용 예시
1. Class.forName() 메소드를 활용해 사용할 Driver를 등록한다. 
    - 아래 코드는 MySQL JDBC Driver 클래스를 등록한다. >> Class.forName("com.mysql.cj.jdbc.Driver");    
    - ClassNotFoundException에 대한 예외 처리를 반드시 해야 한다.
        
2. DriverManager를 이용해 Connection 객체를 생성할 수 있다.
    - getConnection() 메소드의 매개변수 속성은 다음과 같다.
        - url : 연결할 Database의 주소
        - user : Database에 접속할 user 이름
        - password : Database 접속을 위한 비밀번호
    
    Connection con  = null;
    try { 
    	con = DriverManager.getConnection("jdbc:mysql://localhost/employee", "sahmyook", "sahmyook");

    
3. Properties 파일을 활용하여 수기로 작성하지 않고 속성 값을 불러와 코드를 작성할 수 있다.
    - 수기로 매번 설정 속성을 작성할 경우 다음과 같은 문제점이 있으므로 설정 속성 파일을 분리하여 사용하는 것이 일반적이다.
      
        1) 수기로 작성하면서 오타가 발생할 가능성이 높아진다.
        
        2) 설정 속성에 수정 사항이 발생할 경우 파일마다 번거롭게 수정해야 하므로, 유지보수 비용이 증가한다.
        
        3) Connection을 사용하는 파일마다 동일한 코드를 중복 작성하게 된다.
        
    - JDBD Configuration Properties 파일 작성
        driver=com.mysql.cj.jdbc.Driver
        url=jdbc:mysql://localhost/employee
        user=sahmyook
        password=sahmyook
        
    - Properties 파일을 읽어와 Connection 객체를 생성하는 코드 작성
        - properties 파일에 key-value 방식으로 저장한 설정 정보를 읽어온다.
        - 인자로 url, user, password를 줘도 되고, url, prop를 줘도 된다. (user와 password를 분리하지 않고 보낼 수 있다.)
        
        Properties prop = new Properties();
        Connection con = null;
        
        try {
            prop.load(new FileReader("jdbc-config.properties"));
        
            String driver = prop.getProperty("driver");
            String url = prop.getProperty("url");
            String user = prop.getProperty("user");
            String password = prop.getProperty("password");
        
            Class.forName(driver);
            con = DriverManager.getConnection(url, user, password);
        }
   
        

## 01-02. Connection

### 01-02-01. Connection Class

- 특정 데이터 원본(= Database)과 연결된 Connection을 나타낸다.
- 쿼리문을 실행할 수 있는 Statement 혹은 PreparedStatement 객체를 생성할 수 있는 기능을 제공한다.
    - Connection instance를 생성하고 createStatement() 메소드를 호출하여 Statement instance를 생성할 수 있다.
    - 따라서 SQL문 실행 전 우선 Connection instance가 있어야 한다.

### 01-02-02. Connection Class 활용

- Connection 객체 생성 시 생성 전에 설정한 데이터베이스 주소로 ping을 보내 연결이 정상일 경우에 객체를 생성한다.
- Connection 객체 자원은 사용 후 반드시 반납해야 한다.
- Connection 객체를 생성하는 코드 예시는 위에서 DriverManager 클래스를 활용하여 확인하였으므로 생략한다.
- Connection 객체를 생성하는 코드 또한 중복 작성하게 되므로, Template 클래스의 static 메소드로 Connection 객체를 생성하거나 반납하는 코드를 작성하여 공통으로 사용하도록 하는 것이 일반적이다.
    - 자원 반납 시에는 null 체크와 이미 반납된 자원이 아닌지 확인해야 한다.
    - Template 코드 작성 예시

        public class JDBCTemplate {
        
            public static Connection getConnection() {
                Connection con = null;
        				//DriverManager를 활용한 Connnection 객체 생성 코드 생략
                return con;
            }
        
        	public static void close(Connection con) {
                try {
                    if(con != null & !con.isClosed()) {
                        con.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
      

## 01-03. Statement
### 01-03-01. Statement Class 특징
- SQL문을 저장하고 실행한 뒤 결과를 받아 반환해주는 메소드들이 묶여 있는 타입의 클래스이다.

### 01-03-02. Statement 객체 생성 및 사용
1. Connection class의 createStatement() 메소드를 호출하여 Statement instance를 생성한다.
2. 생성한 instance의  executeQuery() 메소드를 호출하여 SQL문 수행한다. (SQL문을 String 형태로 인자로 전달한다.)

- 사용 예시
    try {
    	String query = "SELECT ID, LAST_NAME FROM EMP";
    	stmt = conn.createStatement(); // conn = Connection 객체이다.
    	rset = stmt.executeQuery(query);
    } catch (SQLException e) {
    	e.printStackTrace();
    }

## 01-04. PreparedStatement
### 01-04-01. PreparedStatement Class 특징
- PreparedStatement도 Statement이다. 따라서 Template 클래스를 작성하여 Statement를 close() 하는 메소드를 함께 사용할 수 있다.
- 완성된 쿼리문과 미완성된 쿼리문(= 위치홀더를 사용한 쿼리문)을 모두 사용할 수 있다.
- PreparedStatement는 위치홀더(placeholder) 개념에 해당되는 인수가 많아 특정 값만 바꾸어 여러 번 실행하는 상황에 유용하다.

### 01-04-02. PreparedStatement 장점

1. 수행 속도가 빠르다.
    - Java 쿼리문은 파싱을 통해 유효성 검사, 연산식 등의 유효성 검사를 거친 뒤에 컴파일되어 Database에서 쿼리를 수행해 결과 값을 가지고 오는 구조이다.
    - Statement는  SQL문 실행 시 쿼리문을 전달하므로, 매번 새로운 쿼리로 인식하기 때문에 조건값에 따라 컴파일을 새로 해야 한다.
    - 하지만 PreparedStatement는 조건값을 ?로 두고 쿼리를 준비시킨 뒤, 쿼리는 변경하지 않고 변경되지 않으므로 바인딩 되는 변수만 바꿔 조회한다. 따라서 한번 컴파일한 뒤 캐시에 담아두고 수행한다.
    
- 따라서 대부분의 경우PreparedStatement가 빠르고 안전하므로, 특수 케이스가 아니면 PreparedStatement 사용을 권장한다.

### 01-04-03. PreparedStatement 객체 생성 및 사용
1. Connection class의 preparedStatement() 메소드를 사용하여 instance 생성한다.
2. SQL문을 위치홀더(placeholder) 「?」로 표현하는 String으로 정의한다.
3. PreparedStatement의 setString() 메소드로 위치홀더의 순서와 넣어 줄 변수 값을 세팅한다.
4. 생성하고 위치홀더 값을 세팅한 instance의  executeQuery() 메소드를 호출하여 SQL문 수행한다.
- 사용 예시

    try {
    	String query = "INSERT INTO MEMBER VALUES(?, ?)";
    	pstmt = conn.preparedStatement(query);
    	pstmt.setString(1, id);
    	pstmt.setString(2, password);
    	rset = pstmt.executeQuery();
    } catch (SQLException e) {
    	e.printStackTrace();
    }
    
### 01-04-04. SQL문 관리
- SQL문을 XMl파일로 분리하여 관리할 수 있다.
    - 쿼리 XMl 파일 작성 예시

        <?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
        <properties>
            <comment/>
            <entry key="selectEmpByFamilyName">
                SELECT
                E.*
                FROM EMPLOYEE E
                WHERE E.EMP_NAME LIKE CONCAT(?, '%')
            </entry>
        </properties>
        
    - XML 파일의 쿼리를 읽어와 사용하는 코드 작성 예시
        try {
            prop.loadFromXML(new FileInputStream("employee-query.xml"));
            String query = prop.getProperty("selectEmpByFamilyName");
        
            pstmt = con.prepareStatement(query);
            pstmt.setString(1, empName);
        
            rset = pstmt.executeQuery();
        } 
        

## 01-05. ResultSet
### 01-05-01. ResultSet Class
- SELECT문 수행 성공 시 반환한 결과값을 받아오는 객체이다.
- SQL문에 의해 생성된 결과 테이블을 담고 있다.
- 커서(cursor)로 특정 행에 대한 참조 조작을 할 수 있다.
    
    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/2e42b292-3597-492a-9d2f-caaf0ff36a48/9f9ae1af-2de7-4e7d-b7ba-949a311258dd/Untitled.png)
    
- Connection과 Statement도 close()로 자원 반납하듯, ResultSet도 close()를 통해 자원을 반납해야 한다.

### 01-05-02. ResultSet method
- getString()
    - ResultSet의 현재 커서 위치에 존재하는 로우에서 인자로 전달한 컬럼의 결과 값을 가지고 온다.
    - 데이터 자료형에 따라 **get*자료형*(”*컬럼명*”)** 형식으로 사용한다.
- next()
    - ResultSet의 커서 위치를 하나 내리면서 다음 행이 존재하면 true 존재하지 않으면 false를 반환한다.
    - while문을 활용하여 쿼리 수행 결과의 마지막 행까지 반복 수행하여 결과를 한 행씩 가지고 올 때 활용한다.
    - 단, 수행 결과 반환될 컬럼이 1건임이 확실하면 while 블럭 대신 if문에 조건으로 사용할 수 있다.
- 적용 코드 예시

    while(rset.next()) {
        System.out.println(rset.getString("EMP_ID") + ", " + rset.getString("EMP_NAME"));
    }



===================================
수업 내용 중 일부 

1.  DB 접속을 위한 Connection Instance, DriverManager를 이용해 Connection 생성

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Application1 {

    public static void main(String[] args) {

        /* comment. DB 접속을 위한 Connection Instance 생성 */
        Connection con = null;

        /* 사용할 Driver 등록 */
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");

            /* DriverManager를 이용해 Connection 생성 */
            con = DriverManager.getConnection("jdbc:mysql://localhost/employeedb", "ohgiraffers", "ohgiraffers");

            System.out.println("con = " + con);

        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if(con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }
}

2. Properties 파일을 활용하여 수기로 작성하지 않고 속성 값을 불러와 코드를 작성

3-1. connection-info.properties 라는파일을 만든다 
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost/employeedb
user=ohgiraffers
password=ohgiraffers
package com.ohgiraffers.section01.connection;


package com.ohgiraffers.section01.connection;

import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

public class Application3 {

    public static void main(String[] args) {

        Properties prop = new Properties();

        Connection con = null;

        try {
            prop.load(new FileReader("src/main/java/com/ohgiraffers/config/connection-info.properties"));

            System.out.println(prop);

            String driver = prop.getProperty("driver");
            String url = prop.getProperty("url");
            String user = prop.getProperty("user");
            String password = prop.getProperty("password");

            Class.forName(driver);

            con = DriverManager.getConnection(url, user, password);

            System.out.println("con = " + con);

        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if(con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }
}



3. 인터페이스 - 쿼리문 저장, 실행, select 결과집합을 받아올 용도, connection을 이용해서 statement 인스턴스 생성

package com.ohgiraffers.section01.statement;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import static com.ohgiraffers.common.JDBCTemplate.close;
import static com.ohgiraffers.common.JDBCTemplate.getConnection;

public class Application1 {

    public static void main(String[] args) {

        Connection con = getConnection();

        /* 쿼리문을 저장하고 실행하는 기능을 하는 용도의 인터페이스 */
        Statement stmt = null;

        /* select 결과집합을 받아올 용도의 인터페이스 */
        ResultSet rset = null;

        /* connection을 이용해서 statement 인스턴스 생성 */
        try {
            stmt = con.createStatement();

            rset = stmt.executeQuery("SELECT EMP_ID, EMP_NAME FROM EMPLOYEE");

            /* next() : ResultSet의 커서 위치를 하나 내리면서 행이 존재하면 true, 존재하지 않으면 false를 반환 */
            while (rset.next()) {
                System.out.println(rset.getString("EMP_ID") + ", " + rset.getString("EMP_NAME"));
            }

        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            close(rset);
            close(stmt);
            close(con);
        }
    }
}


4. XML 읽어오는 JDBC

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <entry key="insertMenu">
        INSERT INTO TBL_MENU
        (
        MENU_NAME,
        MENU_PRICE,
        CATEGORY_CODE,
        ORDERABLE_STATUS
        )
        VALUES
        (
        ?,
        ?,
        ?,
        ?
        )
    </entry>
</properties>

package com.ohgiraffers.section01.insert;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Properties;

import static com.ohgiraffers.common.JDBCTemplate.close;
import static com.ohgiraffers.common.JDBCTemplate.getConnection;

public class Application1 {

    public static void main(String[] args) {

        Connection con = getConnection();

        PreparedStatement pstmt = null;

        int result = 0;

        Properties prop = new Properties();

        try {
            prop.loadFromXML(new FileInputStream("src/main/java/com/ohgiraffers/mapper/menu-query.xml"));
            String query = prop.getProperty("insertMenu");
            System.out.println("query = " + query);

            pstmt = con.prepareStatement(query);
            pstmt.setString(1, "봉골레청국장");
            pstmt.setInt(2, 50000);
            pstmt.setInt(3, 1);
            pstmt.setString(4, "Y");

            result = pstmt.executeUpdate();

        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            close(pstmt);
            close(con);
        }

        System.out.println("result = " + result);

    }
}
