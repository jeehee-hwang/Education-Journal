- 프로젝트 

==========================================
** 오류 : has no access writer 에러

"has no access writer" 에러는 자바 객체를 JSON으로 변환할 때, 해당 객체의 필드 값을 읽어올 방법(getter)이 없어서 발생하는 에러입니다.
조금 더 쉽게 말해, Spring Boot가 API 응답을 만들기 위해 여러분의 DTO나 엔티티 객체를 JSON 문자열로 바꾸려고 하는데, 객체 안의 데이터에 접근할 권한이 없어서 "이 필드는 어떻게 읽어야 할지 모르겠어요!"라고 알려주는 것입니다.

## 왜 이런 에러가 발생하나요?
가장 흔한 원인은 getter 메서드의 부재입니다.
JSON 변환 라이브러리(주로 Jackson)는 객체의 private 필드 값을 직접 읽을 수 없습니다. 대신 get...()으로 시작하는 public 메서드(getter)를 호출해서 값을 가져옵니다.

에러가 발생하는 코드 예시:
이 클래스는 getter가 없어서 JSON으로 변환될 수 없습니다.

// @Getter가 없는 클래스
public class ErrorDTO {
    private Long id;
    private String name;

    // 생성자만 있고 getter가 없음
    public ErrorDTO(Long id, String name) {
        this.id = id;
        this.name = name;
    }
}

위 ErrorDTO 객체를 API 응답으로 반환하면, Jackson 라이브러리가 id와 name 필드 값을 읽을 방법이 없으므로 "has no access writer" 에러가 발생합니다.

## 어떻게 해결하나요?
해결 방법은 간단합니다. Lombok의 @Getter 어노테이션을 클래스에 붙여주면 됩니다.

해결된 코드 예시:

import lombok.Getter;

@Getter // <<-- 이 어노테이션 하나로 해결됩니다!
public class SuccessDTO {
    private Long id;
    private String name;

    public SuccessDTO(Long id, String name) {
        this.id = id;
        this.name = name;
    }
}

@Getter를 추가하면 Lombok이 컴파일 시점에 자동으로 getId()와 getName() 메서드를 만들어주기 때문에, JSON 라이브러리가 필드 값을 정상적으로 읽어갈 수 있습니다.

## 체크리스트 📝
"has no access writer" 에러를 만났다면 아래 사항을 확인해 보세요.
API 응답으로 사용되는 DTO 또는 엔티티 클래스에 @Getter 어노테이션이 빠져있지 않은가? (가장 높은 확률)
Lombok을 사용하지 않는다면, public 접근자를 가진 getter 메서드를 직접 작성했는가?
(드문 경우) 필드에 transient 키워드가 붙어있지 않은가? (transient는 직렬화(JSON 변환 등) 과정에서 해당 필드를 제외하라는 의미입니다.)


==============================================
오류 : 값이 NULL로 나옴 

public List<BoardResponseDTO> getBoardList(Long orgId) {
  List<BoardEntity> boardEntityList = boardRepository.findAllByOrgEntity_OrgId(orgId);
  List<BoardResponseDTO> boardResponseDTOList = new ArrayList<>();
  for (BoardEntity boardEntity : boardEntityList) {
    BoardResponseDTO boardResponseDTO = boardMapper.toBoardResponseDTO(boardEntity);
    boardResponseDTOList.add(boardResponseDTO);
    System.out.println("boardResponseDTO.getBoardId() = " + boardResponseDTO.getBoardId());
    System.out.println("boardResponseDTO.getBoardId() = " + boardResponseDTO.getName());
  }
  return boardResponseDTOList;
}


생각하는 과정 표시
가장 유력한 원인은 BoardResponseDTO 클래스에 @Setter나 기본 생성자(@NoArgsConstructor)가 없기 때문입니다.
BoardMapper(MapStruct)가 BoardEntity의 값을 BoardResponseDTO로 복사하려면, BoardResponseDTO의 빈 객체를 먼저 생성한 후(new BoardResponseDTO()), 각 필드에 맞는 setter 메서드(setName(), setBoardId() 등)를 호출하여 값을 채워 넣습니다.
만약 BoardResponseDTO에 기본 생성자나 setter 메서드가 없다면, MapStruct는 값을 채워 넣을 방법을 찾지 못하고 결국 모든 필드가 null인 객체를 반환하게 됩니다.

## 해결 방법
BoardResponseDTO 클래스에 **@Setter**와 @NoArgsConstructor 어노테이션을 추가하세요.
## 다른 가능한 원인
위 방법으로 해결되지 않을 경우, 다음을 확인해 보세요.
필드 이름 불일치: BoardEntity와 BoardResponseDTO의 필드 이름이 서로 다른 경우, MapStruct가 자동으로 매핑하지 못합니다.
예: BoardEntity에는 author 필드가 있는데 BoardResponseDTO에는 authorName 필드가 있는 경우.
해결: Mapper 인터페이스에 @Mapping(source = "author.name", target = "authorName")처럼 직접 매핑 규칙을 지정해야 합니다.

## 간단한 대체 방법
만약 DTO 변환 로직이 복잡하지 않다면, Mapper를 사용하지 않고 DTO에 직접 생성자를 만들어 사용하는 것이 더 직관적일 수 있습니다.

1. BoardResponseDTO 수정

Java

@Getter
// @Setter, @NoArgsConstructor 필요 없음
public class BoardResponseDTO {
    private Long boardId;
    private String name;

    // Entity를 직접 받아 값을 채우는 생성자
    public BoardResponseDTO(BoardEntity entity) {
        this.boardId = entity.getBoardId();
        this.name = entity.getName();
    }
}

2. BoardService 수정

public List<BoardResponseDTO> getBoardList(Long orgId) {
    List<BoardEntity> boardEntityList = boardRepository.findAllByOrgEntity_OrgId(orgId);
    List<BoardResponseDTO> boardResponseDTOList = new ArrayList<>();

    for (BoardEntity boardEntity : boardEntityList) {
        // Mapper 대신 new 키워드로 직접 생성
        BoardResponseDTO boardResponseDTO = new BoardResponseDTO(boardEntity);
        boardResponseDTOList.add(boardResponseDTO);
    }
    return boardResponseDTOList;
}
