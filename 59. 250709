프로젝트 - 게시판 만들기 

dto, service, controller 만듬 

Repository> 이름 바꿀 것 

공부 해야 할 것이 많다. 조금만 바뀌어도 잘 모르겠고 AI에 물어보게 된다. 이점은 좋지 않으니 스스로 생각해보고 찾아보는 습관을 들이자 


===============

매퍼(Mapper)와 리포지토리(Repository)는 다름 

** 매퍼는 'SQL 실행기 + 변환기'에 가까움 
** 리포지토리는 '객체 컬렉션 저장소

==============

## 매퍼 (Mapper) 🗺️
매퍼는 SQL 쿼리와 객체 사이의 매핑(mapping, 연결)을 담당합니다. 
개발자가 작성한 SQL 문을 실행하고, 그 결과(ResultSet)를 특정 객체(주로 DTO)에 하나하나 매핑해주는 역할을 합니다.

- 관심사: "이 SQL을 실행해서 나온 결과를 이 객체에 담아줘."
- 핵심: SQL 중심적입니다. 개발자가 SQL을 직접 제어합니다.
- 주요 기술: MyBatis, jOOQ 등이 대표적인 매퍼 프레임워크입니다.

==============

## 리포지토리 (Repository) 📦
리포지토리는 도메인 주도 설계(DDD)에서 나온 패턴으로, 도메인 객체(Entity)의 컬렉션처럼 동작합니다. 
데이터베이스의 구체적인 기술(JPA, JDBC 등)을 숨기고, 마치 메모리에 있는 컬렉션에서 객체를 꺼내거나 저장하는 것처럼 보이게 만듭니다.

- 관심사: "Board 객체 하나 저장해줘." 또는 "ID가 1번인 Board 객체 좀 찾아줘."
- 핵심: 도메인 객체 중심적입니다. save(), findById() 같은 메소드를 사용하며, 실제 SQL은 프레임워크(JPA)가 생성합니다.
- 주요 기술: Spring Data JPA가 대표적인 리포지토리 패턴 구현체입니다.

==============

구분 | 매퍼 (Mapper)  | 리포지토리 (Repository)
추상화 수준  |  낮음 (SQL에 가까움)  | 높음 (도메인 객체에 가까움)
관심사  | SQL 실행 및 결과 매핑  | 도메인 객체의 영속성 관리 (저장, 조회, 삭제)
SQL 관리  | 개발자가 직접 작성 및 관리  | 프레임워크(JPA)가 자동 생성 (필요시 JPQL 작성)
반환 타입  | DTO, 원시 타입 등 자유로움 | 주로 도메인 객체(Entity)

==============

## 결론: 함께 사용하기도 하나요?
네, 실제로 두 가지를 함께 사용하기도 합니다.

일반적인 CRUD: 간단한 저장, 수정, 삭제, 단일 조회는 **리포지토리(JPA)**를 사용해 생산성을 높입니다.

복잡한 조회: 여러 테이블을 조인하거나 통계 데이터를 내는 등 복잡한 쿼리가 필요할 때는, ORM으로 처리하기보다 SQL을 직접 제어할 수 있는 **매퍼(MyBatis)**나 JPQL/Native Query를 리포지토리 내에서 사용해 최적화된 쿼리를 실행합니다.

이전 답변에서 BoardRepository에 @Query를 사용해 DTO로 바로 결과를 받는 코드를 작성했는데, 이 경우가 바로 리포지토리 패턴 안에서 매퍼의 역할을 수행하도록 한 예시라고 볼 수 있습니다.

=======================================
프로젝트 코드 작성한 것 

@Getter
@Setter
@NoArgsConstructor
public class BoardDTO {

    /**
     * 게시판의 고유 식별자(ID).
     * - 응답(Response) 시에는 항상 값이 채워집니다.
     * - 생성 요청(Request) 시에는 값이 비어있습니다.
     */
    private Long boardId;

    /* 게시판의 이름 */
    private String name;

    /* 게시판 고정 여부 */
    private boolean isFixed;

    /* BoardEntity 객체를 받아 DTO 객체를 생성하는 생성자.
     * 주로 서비스 계층에서 엔티티를 DTO로 변환하여 컨트롤러에 반환할 때 사용됩니다.
     * @param entity 데이터베이스에서 조회한 BoardEntity 객체
     */
    public BoardDTO(BoardEntity entity) {
        this.boardId = entity.getBoardId();
        this.name = entity.getName();
        this.isFixed = entity.isFixed();
    }
}

@Getter
@Setter
@NoArgsConstructor
public class PostDTO {

    /**
     * 게시글의 고유 식별자(ID).
     * - 응답(Response) 시에는 항상 값이 채워집니다.
     * - 생성 요청(Request) 시에는 값이 비어있습니다.
     */
    private Long postId;

    /**
     * 게시글이 속한 게시판의 ID.
     * - 생성 요청(Request) 시에는 이 필드가 사용되지 않고, URL 경로의 boardId를 사용합니다.
     * - 응답(Response) 시에는 게시글이 속한 게시판의 ID를 포함합니다.
     */
    private Long boardId;

    /**
     * 게시글 작성자의 이름.
     * - 응답(Response) 시에만 사용됩니다.
     */
    private String authorName;

    /**
     * 게시글의 제목.
     */
    private String title;

    /**
     * 게시글의 내용.
     */
    private String content;

    /**
     * 게시글 생성 일시.
     * - 응답(Response) 시에만 사용됩니다.
     */
    private LocalDateTime createdAt;

    /**
     * PostEntity 객체를 받아 DTO 객체를 생성하는 생성자.
     * 주로 서비스 계층에서 엔티티를 DTO로 변환하여 컨트롤러에 반환할 때 사용됩니다.
     * @param entity 데이터베이스에서 조회한 PostEntity 객체
     */
    public PostDTO(PostEntity entity) {
        this.postId = entity.getPostId();
        // BoardEntity가 null이 아닐 경우에만 boardId를 가져옵니다.
        if (entity.getBoardEntity() != null) {
            this.boardId = entity.getBoardEntity().getBoardId();
        }
        // MemberEntity가 null이 아닐 경우에만 작성자 이름을 가져옵니다. (탈퇴한 회원 등)
        if (entity.getAuthorEntity() != null) {
            this.authorName = entity.getAuthorEntity().getName(); // MemberEntity에 getName() 메소드가 있다고 가정
        } else {
            this.authorName = "알 수 없음";
        }
        this.title = entity.getTitle();
        this.content = entity.getContent();
        this.createdAt = entity.getCreatedAt();
    }

@Repository
public interface BoardRepository extends JpaRepository<BoardEntity, Long> {

    List<BoardEntity> findByOrgEntity_OrgIdOrderByIsFixedDescNameAsc(Long orgId);
}

@Service
@RequiredArgsConstructor
public class BoardService {

    private final BoardRepository boardRepository;
    private final OrgRepository orgRepository; // 조직(회사) 정보를 가져오기 위해 주입

    /* 모든 게시판 목록을 조회합니다. */
     /* @param orgId 조회할 조직의 ID
     * @return 해당 조직의 게시판 DTO 리스트
     */
    public List<BoardDTO> getBoardsByOrg(Long orgId) {
        List<BoardEntity> boards = boardRepository.findByOrgEntity_OrgIdOrderByIsFixedDescNameAsc(orgId);
        return boards.stream()
                .map(BoardDTO::new) // board -> new BoardDto(board)
                .collect(Collectors.toList());
    }


