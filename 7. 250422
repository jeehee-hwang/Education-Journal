2-3-1. event propagation (이벤트 전파)

- 생성 된 이벤트 객체는 이벤트를 발생 시킨 DOM 요소인 이벤트 타깃(event target)을 중심으로 DOM 트리를 통해 전파된다.
    1. 캡처링 단계(capturing phase) : 이벤트가 상위 요소에서 하위 요소 방향으로 전파
    2. 타깃 단계(target phase) : 이벤트가 이벤트 타깃에 도달
    3. 버블링 단계(bubbling phase) : 이벤트가 하위 요소에서 상위 요소 방향으로 전파
    이벤트 핸들러 어트리뷰트/프로퍼티 방식으로 등록한 이벤트 핸들러는 타깃 단계와 버블링 단계의 이벤트만 캐치할 수 있지만
    addEventListener 메서드 방식으로 등록한 이벤트 핸들러는 3번째 인수로 true를 전달하면 캡처링 단계의 이벤트도 캐치할 수 있다.

2-3-2. event delegation (이벤트 위임)

- 비슷한 방식으로 여러 요소를 다뤄야 할 때 각 요소마다 핸들러를 할당하지 않고, 공통의 조상에 이벤트 핸들러를 단 하나만 할당해 여러 
  요소를 한 번에 다루는 이벤트 위임을 구현할 수 있다.
- 공통 조상에 할당한 핸들러에서 event.target을 이용하면 실제 어디서 이벤트가 발생했는지 알 수 있으며 이를 이용해 이벤트를 핸들링할 수 있다.

2-4. Event (이벤트 기본 동작)

2-4-1. prevent browser action (브라우저 기본 동작 중단)
- 이벤트 객체의 preventDefault 메서드는 DOM 요소의 기본 동작을 중단시킨다.
    - 예를 들어 a 요소를 클릭하면 href 어트리뷰트에 지정 된 링크로 이동하고, checkbox 또는 radio 요소를 클릭하면 체크 또는 
      해제되는 것 등을 기본 동작이라고 한다.

2-4-2. stop event propagation (이벤트 전파 방지)
- 이벤트 객체의 stopPropagation 메서드는 이벤트 전파를 중지 시킨다.

2-5. Event (이벤트 예제)

2-5-1. mouse event (마우스 이벤트)

- 마우스 이벤트 종류
    - mousedown/mouseup (0.1.2) (마우스 왼, 휠, 오)
    - mouseover/mouseout
    - mousemove
    - click
    - contextmenu

2-5-2. prevent select copy (선택, 복사 막기)

- mousedown, mousemove 이벤트가 발생할 때 나타나는 브라우저 기본 동작을 막으면 글씨 선택을 막을 수 있다.
- copy 이벤트가 발생할 때 나타나는 브라우저 기본 동작을 막아 복사를 막을 수도 있다.
- 브라우저 기본 동작을 막는 방법은 이벤트 객체의 preventDefault 메서드를 호출하는 방법과 이벤트 핸들러 함수 
 반환 값을 false로 지정하는 것이 있다.

 2-5-3. keyboard event (키보드 이벤트)

- 키보드 이벤트 종류
    - keydown
    - keyup
- 키보드 이벤트 속성
    - event.key : 문자
    - event.code : 물리적인 키 코드
    - Ex. 소문자 a를 입력하면 event.key=a event.code=KeyA 대문자 A를 입력하면 event.key=A event.code=KeyA

2-5-4. input event (사용자 입력 양식 이벤트)
- 폼 요소 값 다루기
    - input, textarea : input.value 또는 input.checked(checkbox 또는 radio)
    - select.options : option 하위 요소들을 담고 있는 컬렉션
    - select.value : 현재 선택 된 option 값
    - select.selectedIndex : 현재 선택 된 option의 번호(인덱스)
- focus : 사용자가 폼 요소를 클릭하거나 tab 키를 눌러 요소로 이동 했을 때 발생하는 이벤트이다.
- blur : 사용자가 다른 곳을 클릭하거나 tab 키를 눌러 다음 폼 필드로 이동했을 때 발생하는 이벤트이다.
- 또한 focus, blur 메소드로 요소에 포커스를 주거나 제거할 수 있다.
- focus 이벤트는 해당 입력 필드에서만 동작하고 버블링 되지 않는다.
- 버블링이 필요하다면 focusin, focusout 이벤트를 사용한다.
- change 이벤트는 요소 변경이 끝나면 발생하는 이벤트이다.
- select/checkbox/radio의 경우 선택 값이 변경 된 직후 이벤트가 발생하지만 텍스트 입력 요소인 경우 변경 후 포커스를 잃었을 때 
  이벤트가 발생한다.
- input 이벤트는 키보드 이벤트와 달리 어떤 방법으로든 값을 변경할 때 발생한다.
    - 예를 들어 마우스를 사용하여 글자를 붙여 넣거나 음성 인식 기능을 사용해서 글자를 입력할 때도 반응한다.

2-5-5. form submit event (폼 제출 이벤트)
- submit은 폼을 제출할 때 동작하는 이벤트로 폼을 서버로 전송하기 전 내용을 검증하여 폼 전송을 취소할 때 사용한다.
- 폼을 전송하는 방법으로는 (1) input type=“submit” 또는 input type=“image” 클릭 (2) input 필드에서 Enter 키 누르기가 있다.

3. Timer (타이머)
3-1. timer method (타이머 메소드)
3-1-1. timeout
- setTimeout 함수는 두 번째 인수로 전달 받은 시간(ms, 1/1000초)으로 단 한 번 동작하는 타이머를 생성한다.
- 이후 타이머가 만료 되면 첫 번째 인수로 전달 받은 콜백 함수가 호출 된다.
- 콜백 함수에 전달 해야 하는 인수가 존재하는 경우 세 번째 이후의 인수로 전달할 수 있다.

 clearTimeout
- setTimeout 함수는 생성된 타이머를 식별할 수 있는 고유한 타이머 id를 반환한다.
- 반환한 id를 clearTimeout 함수의 인수로 전달하여 타이머를 취소할 수 있다.

3-1-2. interval
setInterval
- setInterval 함수는 두 번째 인수로 전달 받은 시간(ms, 1/1000초)으로 반복 동작하는 타이머를 생성한다.
- 이후 타이머가 만료될 때마다 첫 번재 인수로 전달 받은 콜백 함수가 반복 호출 된다.
- 이는 타이머가 취소될 때까지 계속된다.
- 콜백 함수에 전달 해야 하는 인수가 존재하는 경우 세 번째 이후의 인수로 전달할 수 있다.

clearInterval
- setInterval 함수는 생성된 타이머를 식별할 수 있는 고유한 타이머 id를 반환한다.
- 반환한 id를 clearInterval 함수의 인수로 전달하여 타이머를 취소할 수 있다.

3-2. asynchronous (비동기) ** 동기, 비동기 면접 질문에 많이 나옴 **
3-2-1. asynchronous (비동기)
- 자바스크립트는 한 번에 하나의 태스크만 실행할 수 있는 싱글 스레드 방식으로 동작한다.
- 때문에 처리에 시간이 걸리는 태스크를 실행하는 경우 블로킹(작업 중단)이 발생한다.

동기 처리(synchronous)
- 현재 실행 중인 태스크가 종료할 때까지 다음에 실행 될 태스크가 대기하는 방식을 동기 처리라고 한다.
- 장점 : 태스크를 순서대로 하나씩 처리하므로 실행 순서 보장
- 단점 : 앞선 태스크가 종료할 때까지 이후 태스크들이 블로킹 (속도 느림)

비동기 처리(asynchronous)

- 현재 실행 중인 태스크가 종료 되지 않은 상태라 해도 다음 태스크를 곧 바로 실행하는 방식을 비동기 처리라고 한다.
- 장점 : 태스크가 블로킹 되지 않음
- 단점 : 태스크의 실행 순서가 보장되지 않음
- setTimeout, setInterval, 이벤트 핸들러, HTTP 요청 등은 비동기 처리 방식으로 동작한다.

4. BOM (Browser Object Model)
4-1. window
- 브라우저 환경
- 자바스크립트가 돌아가는 플랫폼은 호스트(host) 라고 불린다.
- 호스트 환경이 웹 브라우저일 때 사용하는 할 수 있는 기능은 개괄적으로 아래와 같다.
- window
    - DOM (document, …)
    - BOM (location, navigator, screen, history, …)
    - JavaScript (Object, Array, Function, …)
- 최상단의 window 객체는 자바스크립트 코드의 전역 객체이자 브라우저 창(browser window)을 대변하고 이를 제어할 수 있는 메서드를 제공한다.
- window 객체는 전역 객체이므로 메서드 호출 시 생략할 수 있다.

4-1-1. open alert confirm prompt
open
- window.open(url, name, params) 메서드로 새 창을 열 수 있다.
- url : 새 창에 로드할 URL이다.
- name : 새 창의 이름으로 해당 이름을 가진 창이 이미 있으면 그 안에서 열리고, 그렇지 않으면 새 창이 열린다.
- params : 새 창의 설정을 쉼표로 구분하여 문자열로 전달한다.

alert
- window.alert(message) 메서드는 확인 버튼을 가지며 메시지를 지정할 수 있는 경고 대화 상자를 띄운다.

confirm
- window.confirm(message) 메서드는 확인과 취소 두 버튼을 가지며 메시지를 지정할 수 있는 모달 대화 상자를 띄운다.
- 반환 값은 확인을 누를 시 true, 취소를 누르거나 ESC 키를 누르면 false이다.

prompt
- window.prompt(message, default) 메서드는 사용자가 텍스트를 입력할 수 있도록 안내하는 선택적 메세지를 갖고 있는 대화 상자를 띄운다.
- default : 텍스트 입력 필드에 기본으로 채워 넣을 문자열이다.
- 반환 값은 확인을 누를 시 사용자가 입력한 문자열이며 취소를 누르거나 ESC 키를 누르면 null이다.
